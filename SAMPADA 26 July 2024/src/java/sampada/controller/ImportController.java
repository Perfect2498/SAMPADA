/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sampada.controller;

import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.year;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.MathContext;
import java.net.URLDecoder;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.io.FilenameUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
import org.springframework.web.servlet.view.RedirectView;
import sampada.DAO.BankStatementDAO;
import sampada.DAO.BillAgcDetailsDAO;
import sampada.DAO.BillDsmDetailsDAO;
import sampada.DAO.BillEntityAgcDAO;
import sampada.DAO.BillEntityFrasDAO;
import sampada.DAO.BillEntityTRASEDAO;
import sampada.DAO.BillEntityTRASMDAO;
import sampada.DAO.BillEntityTRASSDAO;
import sampada.DAO.BillFrasDetailsDAO;
import sampada.DAO.BillPayableCorpDAO;
import sampada.DAO.BillPayableEntityDsmDAO;
import sampada.DAO.BillPayableEntityRrasDAO;
import sampada.DAO.BillPaymentDuedateDAO;
import sampada.DAO.BillReceiveCorpDAO;
import sampada.DAO.BillReceiveEntityDsmDAO;
import sampada.DAO.BillReceiveEntityRrasDAO;
import sampada.DAO.BillRrasDetailsDAO;
import sampada.DAO.BillTRASEDetailsDAO;
import sampada.DAO.BillTRASMDetailsDAO;
import sampada.DAO.BillTRASSDetailsDAO;
import sampada.DAO.ConstantsMasterDAO;
import sampada.DAO.CorporatesDAO;
import sampada.DAO.CsdfDetailsDAO;
import sampada.DAO.DisbursedInterestDetailsDAO;
import sampada.DAO.DynReconciliationCropDAO;
import sampada.DAO.EntityDAO;
import sampada.DAO.LetterOfCreditDAO;
import sampada.DAO.PaymentDisbursementDAO;
import sampada.DAO.PoolAccountDetailsDAO;
import sampada.DAO.TempBillAGCDetailsDAO;
import sampada.DAO.TempBillDSMDetailsDAO;
import sampada.DAO.TempBillEntityAgcDAO;
import sampada.DAO.TempBillEntityFrasDAO;
import sampada.DAO.TempBillEntityTRASMDAO;
import sampada.DAO.TempBillEntityTRASSDAO;
import sampada.DAO.TempBillEntityTRASEDAO;

import sampada.DAO.TempBillFRASDetailsDAO;
import sampada.DAO.TempBillPayableCorpDAO;
import sampada.DAO.TempBillPayableEntityDSMDAO;
import sampada.DAO.TempBillPayableEntityRRASDAO;
import sampada.DAO.TempBillRRASDetailsDAO;
import sampada.DAO.TempBillReceivableEntityDAO;
import sampada.DAO.TempBillReceiveCorpDAO;
import sampada.DAO.TempBillReceiveEntityRRASDAO;
import sampada.DAO.TempBillTRASMDetailsDAO;
import sampada.DAO.TempBillTRASSDetailsDAO;
import sampada.DAO.TempBillTRASEDetailsDAO;

import sampada.DAO.TempPaymentDisbursementDAO;
import sampada.DAO.TempRefundBillCorpDAO;
import sampada.DAO.miscDisbursementDAO;
import sampada.pojo.BankStatement;
import sampada.pojo.BillAgcDetails;
import sampada.pojo.BillDsmDetails;
import sampada.pojo.BillEntityAgc;
import sampada.pojo.BillEntityFras;
import sampada.pojo.BillEntitySras;
import sampada.pojo.BillEntityTrasE;
import sampada.pojo.BillEntityTrasM;
import sampada.pojo.BillEntityTrasS;
import sampada.pojo.BillFrasDetails;
import sampada.pojo.BillPayableCorp;
import sampada.pojo.BillPayableEntityDsm;
import sampada.pojo.BillPayableEntityRras;
import sampada.pojo.BillPaymentDuedate;
import sampada.pojo.BillReceiveCorp;
import sampada.pojo.BillReceiveEntityDsm;
import sampada.pojo.BillReceiveEntityRras;
import sampada.pojo.BillRrasDetails;
import sampada.pojo.BillSrasDetails;
import sampada.pojo.BillTrasEDetails;
import sampada.pojo.BillTrasMDetails;
import sampada.pojo.BillTrasSDetails;
import sampada.pojo.Corporates;
import sampada.pojo.CsdfDetails;
import sampada.pojo.DisbursedInterestDetails;
import sampada.pojo.DynReconciliationCorp;
import sampada.pojo.Entites;
import sampada.pojo.LetterOfCredit;
import sampada.pojo.MakerBankStatement;
import sampada.pojo.MiscDisbursement;
import sampada.pojo.PaymentDisbursement;
import sampada.pojo.PaymentInterestDisbursement;
import sampada.pojo.PoolAccountDetails;
import sampada.pojo.ReconciliationCorp;
import sampada.pojo.TempBillAgcDetails;
import sampada.pojo.TempBillDsmDetails;
import sampada.pojo.TempBillEntityAgc;
import sampada.pojo.TempBillEntityFras;
import sampada.pojo.TempBillEntitySras;
import sampada.pojo.TempBillEntityTrasE;
import sampada.pojo.TempBillEntityTrasM;
import sampada.pojo.TempBillEntityTrasS;
import sampada.pojo.TempBillFrasDetails;
import sampada.pojo.TempBillPayableCorp;
import sampada.pojo.TempBillPayableEntityDsm;
import sampada.pojo.TempBillPayableEntityRras;
import sampada.pojo.TempBillReceiveCorp;
import sampada.pojo.TempBillReceiveEntityDsm;
import sampada.pojo.TempBillReceiveEntityRras;
import sampada.pojo.TempBillRrasDetails;
import sampada.pojo.TempBillSrasDetails;
import sampada.pojo.TempBillTrasEDetails;
import sampada.pojo.TempBillTrasMDetails;
import sampada.pojo.TempBillTrasSDetails;
import sampada.pojo.TempPaymentDisbursement;
import sampada.pojo.TempRefundBillCorp;

/**
 *
 * @author shubham
 */
public class ImportController extends MultiActionController {

    public ModelAndView importDSMTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillDSMDetailsDAO tempbildsmdetdao = new TempBillDSMDetailsDAO();
        TempBillPayableEntityDSMDAO tempbilpayentdsmdao = new TempBillPayableEntityDSMDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbildsmdetdao.deleteTempBillDSMDetailsbystatus();
        tempbilpayentdsmdao.deleteTempBillPayableEntityDsmbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("DSM");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("DSM");
        System.out.println("Inside importExcelController DSM ");
        ModelAndView mv = new ModelAndView("BillUpload/excelDSMUpload");
        return mv;
    }

    public ModelAndView importREVDSMTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillDSMDetailsDAO tempbildsmdetdao = new TempBillDSMDetailsDAO();
        TempBillPayableEntityDSMDAO tempbilpayentdsmdao = new TempBillPayableEntityDSMDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbildsmdetdao.deleteTempBillDSMDetailsbystatus();
        tempbilpayentdsmdao.deleteTempBillPayableEntityDsmbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("DSM");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("DSM");
        System.out.println("Inside importExcelController DSM ");
        ModelAndView mv = new ModelAndView("BillUpload/excelREVDSMUpload");
        return mv;
    }

    public ModelAndView importREVFRASTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillFRASDetailsDAO tempbilfrasdetdao = new TempBillFRASDetailsDAO();
        TempBillEntityFrasDAO tempbilentfrasdao = new TempBillEntityFrasDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilfrasdetdao.deleteTempBillFRASDetailsbystatus();
        tempbilentfrasdao.deleteTempBillEntityFrasbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("FRAS");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("FRAS");
        System.out.println("Inside importExcelController FRAS ");
        ModelAndView mv = new ModelAndView("BillUpload/excelREVFRASUpload");
        return mv;
    }

    public ModelAndView importFRASTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillFRASDetailsDAO tempbilfrasdetdao = new TempBillFRASDetailsDAO();
        TempBillEntityFrasDAO tempbilentfrasdao = new TempBillEntityFrasDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilfrasdetdao.deleteTempBillFRASDetailsbystatus();
        tempbilentfrasdao.deleteTempBillEntityFrasbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("FRAS");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("FRAS");
        System.out.println("Inside importExcelController FRAS ");
        ModelAndView mv = new ModelAndView("BillUpload/excelFRASUpload");
        return mv;
    }

    public ModelAndView importREVSRASTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillAGCDetailsDAO tempbilagcdetdao = new TempBillAGCDetailsDAO();
        TempBillEntityAgcDAO tempbilentityagcdao = new TempBillEntityAgcDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilagcdetdao.deleteTempBillSRASDetailsbystatus();
        tempbilentityagcdao.deleteTempBillEntitySrasbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("SRAS");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("SRAS");
        System.out.println("Inside importExcelController AGC ");
        ModelAndView mv = new ModelAndView("BillUpload/excelREVSRASUpload");
        return mv;
    }

    public ModelAndView importTRASSTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillTRASSDetailsDAO tempbilagcdetdao = new TempBillTRASSDetailsDAO();
        TempBillEntityTRASSDAO tempbilentityagcdao = new TempBillEntityTRASSDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilagcdetdao.deleteTempBillTRASSDetailsbystatus();
        tempbilentityagcdao.deleteTempBillEntityTRASSbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("TRASS");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("TRASS");
        System.out.println("Inside importExcelController TRASS ");
        ModelAndView mv = new ModelAndView("BillUpload/excelTRASSUpload");
        return mv;
    }

    public ModelAndView importTRASETemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillTRASEDetailsDAO tempbilagcdetdao = new TempBillTRASEDetailsDAO();
        TempBillEntityTRASEDAO tempbilentityagcdao = new TempBillEntityTRASEDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilagcdetdao.deleteTempBillTRASEDetailsbystatus();
        tempbilentityagcdao.deleteTempBillEntityTRASEbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("TRASE");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("TRASE");
        System.out.println("Inside importExcelController TRASE ");
        ModelAndView mv = new ModelAndView("BillUpload/excelTRASEUpload");
        return mv;
    }

    public ModelAndView importTRASMTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillTRASMDetailsDAO tempbilagcdetdao = new TempBillTRASMDetailsDAO();
        TempBillEntityTRASMDAO tempbilentityagcdao = new TempBillEntityTRASMDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilagcdetdao.deleteTempBillTRASMDetailsbystatus();
        tempbilentityagcdao.deleteTempBillEntityTRASMbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("TRASM");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("TRASM");
        System.out.println("Inside importExcelController TRASM ");
        ModelAndView mv = new ModelAndView("BillUpload/excelTRASMUpload");
        return mv;
    }

    public ModelAndView importSRASTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillAGCDetailsDAO tempbilagcdetdao = new TempBillAGCDetailsDAO();
        TempBillEntityAgcDAO tempbilentityagcdao = new TempBillEntityAgcDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilagcdetdao.deleteTempBillSRASDetailsbystatus();
        tempbilentityagcdao.deleteTempBillEntitySrasbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("SRAS");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("SRAS");
        System.out.println("Inside importExcelController AGC ");
        ModelAndView mv = new ModelAndView("BillUpload/excelSRASUpload");
        return mv;
    }

    public ModelAndView importAGCTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillAGCDetailsDAO tempbilagcdetdao = new TempBillAGCDetailsDAO();
        TempBillEntityAgcDAO tempbilentityagcdao = new TempBillEntityAgcDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilagcdetdao.deleteTempBillAGCDetailsbystatus();
        tempbilentityagcdao.deleteTempBillEntityAgcbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("AGC");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("AGC");
        System.out.println("Inside importExcelController AGC ");
        ModelAndView mv = new ModelAndView("BillUpload/excelAGCUpload");
        return mv;
    }

    public ModelAndView importREVAGCTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillAGCDetailsDAO tempbilagcdetdao = new TempBillAGCDetailsDAO();
        TempBillEntityAgcDAO tempbilentityagcdao = new TempBillEntityAgcDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilagcdetdao.deleteTempBillAGCDetailsbystatus();
        tempbilentityagcdao.deleteTempBillEntityAgcbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("AGC");
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("AGC");
        System.out.println("Inside importExcelController AGC ");
        ModelAndView mv = new ModelAndView("BillUpload/excelREVAGCUpload");
        return mv;
    }

    public ModelAndView importRRASReceivableTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillRRASDetailsDAO tempbilrrasdetdao = new TempBillRRASDetailsDAO();
        TempBillReceiveEntityRRASDAO tempbilrecentrrasdao = new TempBillReceiveEntityRRASDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilrrasdetdao.deleteTempBillRRASDetailsbystatus("RECEIVABLE");
        tempbilrecentrrasdao.deleteTempBillRecEntityRrasbystatus();
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("RRAS");
        System.out.println("Inside importExcelController excelRRASReceivableUpload");
        ModelAndView mv = new ModelAndView("BillUpload/excelRRASReceivableUpload");
        return mv;
    }

    public ModelAndView importREVRRASReceivableTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillRRASDetailsDAO tempbilrrasdetdao = new TempBillRRASDetailsDAO();
        TempBillReceiveEntityRRASDAO tempbilrecentrrasdao = new TempBillReceiveEntityRRASDAO();
        TempBillReceiveCorpDAO tempbillrecdao = new TempBillReceiveCorpDAO();

        tempbilrrasdetdao.deleteTempBillRRASDetailsbystatus("RECEIVABLE");
        tempbilrecentrrasdao.deleteTempBillRecEntityRrasbystatus();
        tempbillrecdao.deleteTempBillReceiveCorpbystatus("RRAS");
        System.out.println("Inside importExcelController excelREVRRASReceivableUpload");
        ModelAndView mv = new ModelAndView("BillUpload/excelREVRRASReceivableUpload");
        return mv;
    }

    public ModelAndView importRRASPayableTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillRRASDetailsDAO tempbilrrasdetdao = new TempBillRRASDetailsDAO();
        TempBillPayableEntityRRASDAO tempbilpayentrrasdao = new TempBillPayableEntityRRASDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();

        tempbilrrasdetdao.deleteTempBillRRASDetailsbystatus("PAYABLE");
        tempbilpayentrrasdao.deleteTempBillPayEntityRrasbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("RRAS");
        System.out.println("Inside importExcelController excelRRASPayableUpload");
        ModelAndView mv = new ModelAndView("BillUpload/excelRRASPayableUpload");
        return mv;
    }

    public ModelAndView importREVRRASPayableTemplate(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }

        TempBillRRASDetailsDAO tempbilrrasdetdao = new TempBillRRASDetailsDAO();
        TempBillPayableEntityRRASDAO tempbilpayentrrasdao = new TempBillPayableEntityRRASDAO();
        TempBillPayableCorpDAO tempbillpaydao = new TempBillPayableCorpDAO();

        tempbilrrasdetdao.deleteTempBillRRASDetailsbystatus("PAYABLE");
        tempbilpayentrrasdao.deleteTempBillPayEntityRrasbystatus();
        tempbillpaydao.deleteTempBillPayableCorpbystatus("RRAS");
        System.out.println("Inside importExcelController excelREVRRASPayableUpload");
        ModelAndView mv = new ModelAndView("BillUpload/excelREVRRASPayableUpload");
        return mv;
    }

    public ModelAndView downloadREVDSMTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "dsm_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("REV_DSM_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadDSMTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "dsm_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("DSM_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadAGCTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "agc_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("AGC_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadTRASMTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "trasm_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("TRASM_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadTRASSTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "trass_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("TRASS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadTRASETemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "trase_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("TRASE_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadSRASTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "sras_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("SRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadREVSRASTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "sras_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("REV_SRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadREVAGCTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "agc_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("REV_AGC_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadREVFRASTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel fras Method");
        String filename = "fras_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("REV_FRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadFRASTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel fras Method");
        String filename = "fras_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("FRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
        response.setContentType("application/xls");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView downloadREVRRASReceivableTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "rras_up_regulation_bill_excel";
// String filepath=Constants.ATC_SDNDA_FILEPATH;
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("REV_RRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
// System.out.println("filepath obtained is"+filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
// if(file.exists()){
        response.setContentType("application/xls");
// response.setContentType("image/jpeg");
// response.setHeader("Content-Length", String.valueOf(file.length()));
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
// }
// else{
// ModelAndView mv=new ModelAndView("errorMsg");
// String msg="file is not there in the specified location";
// mv.addObject("msg", msg);
// return mv;
// }
        return null;
    }

    public ModelAndView downloadRRASReceivableTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "rras_up_regulation_bill_excel";
// String filepath=Constants.ATC_SDNDA_FILEPATH;
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("RRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
// System.out.println("filepath obtained is"+filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
// if(file.exists()){
        response.setContentType("application/xls");
// response.setContentType("image/jpeg");
// response.setHeader("Content-Length", String.valueOf(file.length()));
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
// }
// else{
// ModelAndView mv=new ModelAndView("errorMsg");
// String msg="file is not there in the specified location";
// mv.addObject("msg", msg);
// return mv;
// }
        return null;
    }

    public ModelAndView downloadREVRRASPayableTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "rras_down_regulation_bill_excel";
// String filepath=Constants.ATC_SDNDA_FILEPATH;
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("REV_RRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
// System.out.println("filepath obtained is"+filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
// if(file.exists()){
        response.setContentType("application/xls");
// response.setContentType("image/jpeg");
// response.setHeader("Content-Length", String.valueOf(file.length()));
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
// }
// else{
// ModelAndView mv=new ModelAndView("errorMsg");
// String msg="file is not there in the specified location";
// mv.addObject("msg", msg);
// return mv;
// }
        return null;
    }

    public ModelAndView downloadRRASPayableTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println("Inside download Excel Method");
        String filename = "rras_down_regulation_bill_excel";
// String filepath=Constants.ATC_SDNDA_FILEPATH;
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("RRAS_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
// System.out.println("filepath obtained is"+filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
// if(file.exists()){
        response.setContentType("application/xls");
// response.setContentType("image/jpeg");
// response.setHeader("Content-Length", String.valueOf(file.length()));
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
// }
// else{
// ModelAndView mv=new ModelAndView("errorMsg");
// String msg="file is not there in the specified location";
// mv.addObject("msg", msg);
// return mv;
// }
        return null;
    }

    public static boolean isCellEmpty(final Cell cell) {
        if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
            return true;
        }
        if (cell.getCellType() == Cell.CELL_TYPE_STRING && cell.getStringCellValue().isEmpty()) {
            return true;
        }
        return false;
    }

    public ModelAndView uploadDSM(HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelDSMUpload");
        HttpSession session = request.getSession();
        System.out.println("inside upload DSM sheet");
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "DSM";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        TempBillDSMDetailsDAO tempBillDSMDAO = new TempBillDSMDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillDsmDetails tempBillDetails = new TempBillDsmDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillcorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillDSMDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillDSMDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payList = new ArrayList<Object[]>();
        List<Object[]> recList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<Double>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                Double a, b, c, d, e, f, g, h, k, j;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                Double capping_Charges = 0.0;
                Double addl_Charges = null;
                Double sign_Charges = null;
                Double payable_Charges = 0.0;
                Double recievable_Charges = 0.0;
                Double wr_Net_Dsm = 0.0;
                String billing_Date = null;
                String bill_No = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String netDSM = null;
                Date bbdate = null;
                String bill_due_date_pay = null;
                String bill_due_date_recv = null;

                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillDsmDetailsDAO billDSMDAO = new BillDsmDetailsDAO();
                BillDsmDetails billDsm = new BillDsmDetails();
                TempBillPayableEntityDSMDAO tempBillPayableEntityDsmDAO = new TempBillPayableEntityDSMDAO();
                TempBillPayableEntityDsm tempBillPayableEntityDsm = new TempBillPayableEntityDsm();
                Corporates corp = new Corporates();
                TempBillReceivableEntityDAO tempbillreceiveDAO = new TempBillReceivableEntityDAO();
                TempBillReceiveEntityDsm TempBillReceive = new TempBillReceiveEntityDsm();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billDSMDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;

                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 9;

                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Name of Entity";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Recievable DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Capping DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Addl. DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Sign Violation Addl. Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC NET DSM";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WR Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 7;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("successMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }
                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "PAYABLE", sdf.parse(fromdate));
                List<BillPaymentDuedate> list1000 = null;
                list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "RECEIVABLE", sdf.parse(fromdate));

                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    String pay_charges = cell.getStringCellValue().trim();
                                    payable_Charges = Double.parseDouble(pay_charges);
                                    System.out.println("Payable Charges is : " + payable_Charges);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    String recievable_Charge = cell.getStringCellValue().trim();
                                    recievable_Charges = Double.parseDouble(recievable_Charge);
                                    System.out.println("Receivable Charges is : " + recievable_Charges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    String capping_Charge = cell.getStringCellValue().trim();
                                    capping_Charges = Double.parseDouble(capping_Charge);
                                    System.out.println("Capping Charges is : " + capping_Charges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    String addl_Charge = cell.getStringCellValue().trim();
                                    addl_Charges = Double.parseDouble(addl_Charge);
                                    System.out.println("Additional Charges is : " + addl_Charges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    String sign_Charge = cell.getStringCellValue().trim();
                                    sign_Charges = Double.parseDouble(sign_Charge);
                                    System.out.println("Sign Charges is : " + sign_Charges);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
//                                    wr_remarks = "No Remarks!!";
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    String wrNetDsm = cell.getStringCellValue().trim();
                                    wr_Net_Dsm = Double.parseDouble(wrNetDsm);
                                    System.out.println("wr_Net_Dsm is : " + wr_Net_Dsm);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date_pay = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date_pay);

                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    payable_Charges = cell.getNumericCellValue();
                                    System.out.println("Payable Charges is : " + payable_Charges);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    recievable_Charges = cell.getNumericCellValue();
                                    System.out.println("Receivable Charges is : " + recievable_Charges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    capping_Charges = cell.getNumericCellValue();
                                    System.out.println("Capping Charges is : " + capping_Charges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    addl_Charges = cell.getNumericCellValue();
                                    System.out.println("Additional Charges is : " + addl_Charges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    sign_Charges = cell.getNumericCellValue();
                                    System.out.println("Sign Charges is : " + sign_Charges);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date_pay = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date_pay);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    wr_Net_Dsm = cell.getNumericCellValue();
                                    System.out.println("wr_Net_Dsm is : " + wr_Net_Dsm);
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<Double> valSetOne = new ArrayList<>();
                        entityId = new Double(entity_id);
                        remarksDetail.put(entity_id, wr_remarks);
                        wr_remarks = "No Remarks!!";
                        corporateId = new Double(corporate_id);
                        yearId = new Double(year);
                        valSetOne.add(entityId);
                        valSetOne.add(corporateId);
                        valSetOne.add(payable_Charges);
                        valSetOne.add(recievable_Charges);
                        valSetOne.add(capping_Charges);
                        valSetOne.add(addl_Charges);
                        valSetOne.add(sign_Charges);
                        valSetOne.add(yearId);
                        valSetOne.add(wr_Net_Dsm);
                        retMap.put(entity_id, (ArrayList<Double>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date_pay);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                System.out.println("###########remarksDetail size is " + remarksDetail.size());
                for (Map.Entry<Integer, ArrayList<Double>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<Double> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    j = values.get(8);
                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("payable_Charges is " + c);
                    System.out.println("recievable_Charges is " + d);
                    System.out.println("capping_Charges is " + e);
                    System.out.println("addl_Charges is " + f);
                    System.out.println("sign_Charges is " + g);
                    System.out.println("yearId is " + h);
                    System.out.println("WR Net DSM is " + j);

//                    if (d.equals(0.0)) {
                    System.out.println("*****DSM Payble Entity Entry*****");
                    tempuniqueId = tempBillPayableEntityDsmDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = (int) Math.round(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillPayableEntityDsm.setUniqueId(new BigDecimal(tempunqId));
                    tempBillPayableEntityDsm.setEntites(ent);
                    tempBillPayableEntityDsm.setCorporates(corp);
                    tempBillPayableEntityDsm.setPayableCharges(new BigDecimal(c));
                    tempBillPayableEntityDsm.setReceivableCharges(new BigDecimal(d));
                    tempBillPayableEntityDsm.setAdditionalCharges(new BigDecimal(f));
                    tempBillPayableEntityDsm.setCappingCharges(new BigDecimal(e));
                    tempBillPayableEntityDsm.setWeekId(new BigDecimal(weekid));
                    tempBillPayableEntityDsm.setSignCharges(new BigDecimal(g));
                    tempBillPayableEntityDsm.setRevisionNo(revno);

                    tempBillPayableEntityDsm.setBillStatus("Pending");

                    tempBillPayableEntityDsm.setBillYear(new BigDecimal(h));
                    tempBillPayableEntityDsm.setNetDsm(new BigDecimal(c).subtract(new BigDecimal(d)).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e)))));
                    System.out.println("Net DSM is: " + (new BigDecimal(c).subtract(new BigDecimal(d)).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e))))));
                    tempBillPayableEntityDsm.setWrNetDsm(new BigDecimal(j));
                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    if (remarksDetail.containsKey(key)) {
                        String remark = remarksDetail.get(key);
                        tempBillPayableEntityDsm.setRemarks(remark);
                    }
                    try {
                        if (tempBillPayableEntityDsmDAO.NewTempBillDSMEntries(tempBillPayableEntityDsm)) {
                            System.out.println("New DSM entities entires added successfully");
                            String msg = "New DSM entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
//                    }

                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("j is " + j);
                    System.out.println("j bg is " + new BigDecimal(j));

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillDSMDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    System.out.println("@@@@@@@@@ currentTimestamp is " + currentTimestamp);
                    tempBillDetails.setEntryDate(currentTimestamp);
                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date_pay));

                    tempBillDetails.setBillStatus("Pending");

                    tempBillDSMDAO.NewTempBillDSMDetails(tempBillDetails);
                }

                list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "RECEIVABLE", sdf.parse(fromdate));
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
//                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());
                System.out.println("$$$$$$$$$$$$$$bill_due_date_recv is " + bill_due_date_recv);

                if (revno.intValue() == 0) {

                    payList = tempBillPayableCorpDao.getTempBillPayableDSM(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$$$$payList size is " + payList.size());
                    for (Object[] listMW1 : payList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        System.out.println(" tempBillPayablecorp revno is " + revno);
                        if (net.compareTo(BigDecimal.ZERO) == 1) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillcorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillcorp.setWeekId(weekId);
                            tempBillcorp.setBillType("DSM");
                            tempBillcorp.setBillYear(byear);
                            tempBillcorp.setBillingDate(bdate);
                            tempBillcorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillcorp.setCorporates(corp);
                            tempBillcorp.setTotalnet(net);
                            tempBillcorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillcorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");

                        } else {

                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("DSM");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }
                    }
                } else {

                    payList = tempBillPayableCorpDao.getTempBillPayableDSM(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$$$$payList size is " + payList.size());
                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();

                    List<BillPayableCorp> listPay = new ArrayList<>();
                    List<BillReceiveCorp> listRecv = new ArrayList<>();

                    for (Object[] listMW1 : payList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
                        BigDecimal mul = new BigDecimal("-1");
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        prerevno = revNo.subtract(BigDecimal.ONE);

                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "DSM", new BigDecimal(year), corpInt);
                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "DSM", byear, corpInt);
                        if (listPay != null && listPay.size() > 0) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillcorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillcorp.setWeekId(weekId);
                            tempBillcorp.setBillType("DSM");
                            tempBillcorp.setBillYear(byear);
                            tempBillcorp.setBillingDate(bdate);
                            tempBillcorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillcorp.setCorporates(corp);
                            tempBillcorp.setTotalnet(net);

                            tempBillcorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillcorp);
                            System.out.println("###Inserted data in Temp Payable Corp Table");

                        }

                        if (listRecv != null && listRecv.size() > 0) {
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("DSM");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);

                            tempBillReceivecorp.setBillStatus("Pending");
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }

                    }
                }
                String msg = "DSM Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));

                return new ModelAndView(new RedirectView("verifyUploadDSM.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadREVDSM(HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelREVDSMUpload");
        HttpSession session = request.getSession();
        System.out.println("inside upload REV  ---DSM sheet");
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "DSM";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        TempBillDSMDetailsDAO tempBillDSMDAO = new TempBillDSMDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillDsmDetails tempBillDetails = new TempBillDsmDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillcorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillDSMDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillDSMDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payList = new ArrayList<Object[]>();
        List<Object[]> recList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<Double>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                Double a, b, c, d, e, f, g, h, k, j;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                Double capping_Charges = 0.0;
                Double addl_Charges = null;
                Double sign_Charges = null;
                Double payable_Charges = 0.0;
                Double recievable_Charges = 0.0;
                Double wr_Net_Dsm = 0.0;
                Double Prev_Net_Dsm = 0.0;
                String billing_Date = null;
                String bill_No = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String netDSM = null;
                Date bbdate = null;
                String bill_due_date_pay = null;
                String bill_due_date_recv = null;

                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillDsmDetailsDAO billDSMDAO = new BillDsmDetailsDAO();
                BillDsmDetails billDsm = new BillDsmDetails();
                TempBillPayableEntityDSMDAO tempBillPayableEntityDsmDAO = new TempBillPayableEntityDSMDAO();
                TempBillPayableEntityDsm tempBillPayableEntityDsm = new TempBillPayableEntityDsm();
                Corporates corp = new Corporates();
                TempBillReceivableEntityDAO tempbillreceiveDAO = new TempBillReceivableEntityDAO();
                TempBillReceiveEntityDsm TempBillReceive = new TempBillReceiveEntityDsm();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billDSMDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;

                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 12;

                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Name of Entity";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Recievable DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Capping DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Addl. DSM Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Sign Violation Addl. Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC NET DSM";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WR Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 10) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "PREVIOUS NET DSM";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 11");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 11) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Revision No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 12");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (cellNo != 9) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    } else {
                        cellNum = 11;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (cellNo != 7 && cellNo != 8 && cellNo != 9) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    }

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }
                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "PAYABLE", sdf.parse(fromdate));
                List<BillPaymentDuedate> list1000 = null;
                list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "RECEIVABLE", sdf.parse(fromdate));

                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    String pay_charges = cell.getStringCellValue().trim();
                                    payable_Charges = Double.parseDouble(pay_charges);
                                    System.out.println("Payable Charges is : " + payable_Charges);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    String recievable_Charge = cell.getStringCellValue().trim();
                                    recievable_Charges = Double.parseDouble(recievable_Charge);
                                    System.out.println("Receivable Charges is : " + recievable_Charges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    String capping_Charge = cell.getStringCellValue().trim();
                                    capping_Charges = Double.parseDouble(capping_Charge);
                                    System.out.println("Capping Charges is : " + capping_Charges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    String addl_Charge = cell.getStringCellValue().trim();
                                    addl_Charges = Double.parseDouble(addl_Charge);
                                    System.out.println("Additional Charges is : " + addl_Charges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    String sign_Charge = cell.getStringCellValue().trim();
                                    sign_Charges = Double.parseDouble(sign_Charge);
                                    System.out.println("Sign Charges is : " + sign_Charges);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
//                                    wr_remarks = "No Remarks!!";
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    String wrNetDsm = cell.getStringCellValue().trim();
                                    wr_Net_Dsm = Double.parseDouble(wrNetDsm);
                                    System.out.println("wr_Net_Dsm is : " + wr_Net_Dsm);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date_pay = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date_pay);

                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    String prevNetDsm = cell.getStringCellValue().trim();
                                    Prev_Net_Dsm = Double.parseDouble(prevNetDsm);
                                    System.out.println("Prev_Net_Dsm is : " + Prev_Net_Dsm);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getStringCellValue().trim());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillDSMDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    payable_Charges = cell.getNumericCellValue();
                                    System.out.println("Payable Charges is : " + payable_Charges);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    recievable_Charges = cell.getNumericCellValue();
                                    System.out.println("Receivable Charges is : " + recievable_Charges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    capping_Charges = cell.getNumericCellValue();
                                    System.out.println("Capping Charges is : " + capping_Charges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    addl_Charges = cell.getNumericCellValue();
                                    System.out.println("Additional Charges is : " + addl_Charges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    sign_Charges = cell.getNumericCellValue();
                                    System.out.println("Sign Charges is : " + sign_Charges);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date_pay = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date_pay);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    wr_Net_Dsm = cell.getNumericCellValue();
                                    System.out.println("wr_Net_Dsm is : " + wr_Net_Dsm);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    Prev_Net_Dsm = cell.getNumericCellValue();
                                    System.out.println("Prev_Net_Dsm is : " + Prev_Net_Dsm);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getNumericCellValue());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillDSMDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<Double> valSetOne = new ArrayList<>();
                        entityId = new Double(entity_id);
                        remarksDetail.put(entity_id, wr_remarks);
                        wr_remarks = "No Remarks!!";
                        corporateId = new Double(corporate_id);
                        yearId = new Double(year);
                        valSetOne.add(entityId);
                        valSetOne.add(corporateId);
                        valSetOne.add(payable_Charges);
                        valSetOne.add(recievable_Charges);
                        valSetOne.add(capping_Charges);
                        valSetOne.add(addl_Charges);
                        valSetOne.add(sign_Charges);
                        valSetOne.add(yearId);
                        valSetOne.add(wr_Net_Dsm);
                        valSetOne.add(Prev_Net_Dsm);
                        retMap.put(entity_id, (ArrayList<Double>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date_pay);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                System.out.println("###########remarksDetail size is " + remarksDetail.size());
                for (Map.Entry<Integer, ArrayList<Double>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<Double> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    j = values.get(8);
                    k = values.get(9);
                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("payable_Charges is " + c);
                    System.out.println("recievable_Charges is " + d);
                    System.out.println("capping_Charges is " + e);
                    System.out.println("addl_Charges is " + f);
                    System.out.println("sign_Charges is " + g);
                    System.out.println("yearId is " + h);
                    System.out.println("WR Net DSM is " + j);
                    System.out.println("PREV Net DSM is " + k);

//                    if (d.equals(0.0)) {
                    System.out.println("*****DSM Payble Entity Entry*****");
                    tempuniqueId = tempBillPayableEntityDsmDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = (int) Math.round(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillPayableEntityDsm.setUniqueId(new BigDecimal(tempunqId));
                    tempBillPayableEntityDsm.setEntites(ent);
                    tempBillPayableEntityDsm.setCorporates(corp);
                    tempBillPayableEntityDsm.setPayableCharges(new BigDecimal(c));
                    tempBillPayableEntityDsm.setReceivableCharges(new BigDecimal(d));
                    tempBillPayableEntityDsm.setAdditionalCharges(new BigDecimal(f));
                    tempBillPayableEntityDsm.setCappingCharges(new BigDecimal(e));
                    tempBillPayableEntityDsm.setWeekId(new BigDecimal(weekid));
                    tempBillPayableEntityDsm.setSignCharges(new BigDecimal(g));
                    tempBillPayableEntityDsm.setRevisionNo(revno);
                    tempBillPayableEntityDsm.setPrevWrNetDsm(new BigDecimal(k));

                    tempBillPayableEntityDsm.setBillStatus("Pending");

                    tempBillPayableEntityDsm.setBillYear(new BigDecimal(h));
                    tempBillPayableEntityDsm.setNetDsm(new BigDecimal(c).subtract(new BigDecimal(d)).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e)))));
                    System.out.println("Net DSM is: " + (new BigDecimal(c).subtract(new BigDecimal(d)).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e))))));
                    tempBillPayableEntityDsm.setWrNetDsm(new BigDecimal(j));
                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    if (remarksDetail.containsKey(key)) {
                        String remark = remarksDetail.get(key);
                        tempBillPayableEntityDsm.setRemarks(remark);
                    }
                    try {
                        if (tempBillPayableEntityDsmDAO.NewTempBillDSMEntries(tempBillPayableEntityDsm)) {
                            System.out.println("New DSM entities entires added successfully");
                            String msg = "New DSM entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
//                    }

                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("j is " + j);
                    System.out.println("j bg is " + new BigDecimal(j));
                    System.out.println("k bg is " + new BigDecimal(k));

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillDSMDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    System.out.println("@@@@@@@@@ currentTimestamp is " + currentTimestamp);
                    tempBillDetails.setEntryDate(currentTimestamp);
                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date_pay));

                    tempBillDetails.setBillStatus("Pending");

                    tempBillDSMDAO.NewTempBillDSMDetails(tempBillDetails);
                }

                list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "RECEIVABLE", sdf.parse(fromdate));
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
//                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());
                System.out.println("$$$$$$$$$$$$$$bill_due_date_recv is " + bill_due_date_recv);

                if (revno.intValue() >= 0) {

                    payList = tempBillPayableCorpDao.getTempBillPayableDSM(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$$$$payList size is " + payList.size());
                    for (Object[] listMW1 : payList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        System.out.println(" tempBillPayablecorp revno is " + revno);
                        if (net.compareTo(BigDecimal.ZERO) == 1) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillcorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillcorp.setWeekId(weekId);
                            tempBillcorp.setBillType("DSM");
                            tempBillcorp.setBillYear(byear);
                            tempBillcorp.setBillingDate(bdate);
                            tempBillcorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillcorp.setCorporates(corp);
                            tempBillcorp.setTotalnet(net);
                            tempBillcorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillcorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");

                        } else {

                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("DSM");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }
                    }
                }
//                else {
//
//                    payList = tempBillPayableCorpDao.getTempBillPayableDSM(new BigDecimal(weekid), revno, new BigDecimal(year));
//                    System.out.println("$$$$$$$$$$$payList size is " + payList.size());
//                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
//                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();
//
//                    List<BillPayableCorp> listPay = new ArrayList<>();
//                    List<BillReceiveCorp> listRecv = new ArrayList<>();
//
//                    for (Object[] listMW1 : payList) {
//                        Object[] row = (Object[]) listMW1;
//                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
//                        BigDecimal mul = new BigDecimal("-1");
//                        Date bdate = null;
//                        weekId = (BigDecimal) row[0];
//                        corpId = (BigDecimal) row[1];
//                        net = (BigDecimal) row[2];
//                        bdate = (Date) row[3];
//                        byear = (BigDecimal) row[4];
//                        int corpInt = corpId.intValue();
//                        revNo = revno;
//                        prerevno = revNo.subtract(BigDecimal.ONE);
//
//                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "DSM", new BigDecimal(year), corpInt);
//                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "DSM", byear, corpInt);
//                        if (listPay != null && listPay.size() > 0) {
//
//                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillcorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillcorp.setWeekId(weekId);
//                            tempBillcorp.setBillType("DSM");
//                            tempBillcorp.setBillYear(byear);
//                            tempBillcorp.setBillingDate(bdate);
//                            tempBillcorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillcorp.setCorporates(corp);
//                            tempBillcorp.setTotalnet(net);
//
//                            tempBillcorp.setBillStatus("Pending");
//                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillcorp);
//                            System.out.println("###Inserted data in Temp Payable Corp Table");
//
//                        }
//
//                        if (listRecv != null && listRecv.size() > 0) {
//                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillReceivecorp.setWeekId(weekId);
//                            tempBillReceivecorp.setBillType("DSM");
//                            tempBillReceivecorp.setBillYear(byear);
//                            tempBillReceivecorp.setBillingDate(bdate);
//                            tempBillReceivecorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillReceivecorp.setCorporates(corp);
//                            tempBillReceivecorp.setToalnet(net);
//
//                            tempBillReceivecorp.setBillStatus("Pending");
//                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date_recv));
//
//                            System.out.println(" tempBillReceivecorp revno is " + revno);
//                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
//                            System.out.println("Inserted data in Temp Receive Corp Table");
//
//                        }
//
//                    }
//                }
                String msg = "DSM Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));

                return new ModelAndView(new RedirectView("verifyREVUploadDSM.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadAGC(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelAGCUpload");
        System.out.println("inside upload AGC sheet");

        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "AGC";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");

        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillAgcDetails tempBillDetails = new TempBillAgcDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo agc is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, h, k, j, l;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                String totalAgcUpDown = null;
                String totalNetAgc = null;
                String agcEnergyCharges = null;
                String totalPoolCharges = null;
                String markUpCharges = null;
                String payRecvFlag = null;
                String bill_No = null;
                String wr_markUpCharges = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                Date bbdate = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillAgcDetailsDAO billAgcDetlDAO = new BillAgcDetailsDAO();
                BillAgcDetails billAgcDet = new BillAgcDetails();
                TempBillEntityAgcDAO tempBillEntityAgcDAO = new TempBillEntityAgcDAO();
                TempBillEntityAgc tempBillEntityAgc = new TempBillEntityAgc();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billAgcDetlDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 8;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "AGC Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total AGC Up & Down Regulation based on 5 min schedule(MWh)(A)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Markup at the rate of 50p/unit for both positive and negative AGC from the DSM Pool (Mwh) (Rs) (B =A*1000*0.5)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total Net AGC (Mwh) (based on 15-Min schedule) (C)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "AGC Energy Charges (Rs) (D=C*Variable Cost)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Total Charges [Payable to Pool/ Receivable from Pool] (Rs) (B+D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable to Pool/Receivable from Pool";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 6;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }
                    //System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String agcFlag = entDAO.getAgcFlagByEntityId(new BigDecimal(entity_id));
                                        if (agcFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not AGC Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }

                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("AGC", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    totalAgcUpDown = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("totalAgcUpDown is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    markUpCharges = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    totalNetAgc = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    agcEnergyCharges = cell.getStringCellValue().trim();
//                                    agcEnergyCharges = Double.parseDouble(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    totalPoolCharges = cell.getStringCellValue().trim();
//                                    totalPoolCharges = Double.parseDouble(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    payRecvFlag = cell.getStringCellValue().trim();
                                    System.out.println("payRecvFlag is : " + payRecvFlag);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
//                               
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgcUp_Down = cell.getNumericCellValue();
                                    totalAgcUpDown = Double.toString(totalAgcUp_Down);
                                    System.out.println("totalAgcUpDown is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    markUpCharges = Double.toString(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    totalNetAgc = Double.toString(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    Double agcEnergy_Charges = cell.getNumericCellValue();
                                    agcEnergyCharges = Double.toString(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    totalPoolCharges = Double.toString(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }

                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(totalAgcUpDown);
                        valSetOne.add(markUpCharges);
                        valSetOne.add(totalNetAgc);
                        valSetOne.add(agcEnergyCharges);
                        valSetOne.add(totalPoolCharges);
                        valSetOne.add(payRecvFlag);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);

                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    k = values.get(8);
                    j = values.get(9);

                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("totalAgc is " + c);
                    System.out.println("markUpCharges is " + d);
                    System.out.println("totalNetCharges is " + e);
                    System.out.println("AGCEnergyCharges is " + f);
                    System.out.println("totalPoolcharges is " + g);
                    System.out.println("PayRecv is " + h);
                    System.out.println("wrRemarks is " + k);
                    System.out.println("yearId is " + j);

                    tempuniqueId = tempBillEntityAgcDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntityAgc.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntityAgc.setEntites(ent);
                    tempBillEntityAgc.setCorporates(corp);
                    tempBillEntityAgc.setTotalAgcUpdownMwh(new BigDecimal(c));
                    tempBillEntityAgc.setMarkupCharges(new BigDecimal(d));
                    tempBillEntityAgc.setTotalnetAgc(new BigDecimal(e));
                    tempBillEntityAgc.setAgcEnergycharges(new BigDecimal(f));
                    tempBillEntityAgc.setTotalcharges(new BigDecimal(d).add(new BigDecimal(f)));
                    tempBillEntityAgc.setPayRecvflag(h);
                    tempBillEntityAgc.setRemarks(k);
                    tempBillEntityAgc.setBillYear(new BigDecimal(j));
                    tempBillEntityAgc.setWeekId(new BigDecimal(weekid));
                    tempBillEntityAgc.setRevisionNo(revno);
                    tempBillEntityAgc.setWrTotalcharges(new BigDecimal(g));
                    tempBillEntityAgc.setBillStatus("Pending");

                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityAgcDAO.NewTempBillAGCEntries(tempBillEntityAgc)) {
                            System.out.println("New AGC entities entires added successfully");
                            String msg = "New AGC entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("k is " + k);
                    System.out.println("j is " + j);

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillAGCDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());

                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");
                    tempBillAGCDAO.NewTempBillAGCDetails(tempBillDetails);
                }
                if (revno.intValue() == 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillAGC(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, totalCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        totalCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (totalCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("totalCharges are -ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("AGC");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(totalCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("totalCharges are +ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("AGC");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(totalCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                } else {

                    payrecList = tempBillreceiveCorpDAO.getTempBillAGC(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();

                    List<BillPayableCorp> listPay = new ArrayList<>();
                    List<BillReceiveCorp> listRecv = new ArrayList<>();

                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
                        BigDecimal mul = new BigDecimal("-1");
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        prerevno = revNo.subtract(BigDecimal.ONE);

                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "AGC", new BigDecimal(year), corpInt);
                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "AGC", byear, corpInt);

                        if (listPay != null && listPay.size() > 0) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("AGC");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(net);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("###Inserted data in Temp Payable Corp Table");

                        }

                        if (listRecv != null && listRecv.size() > 0) {
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("AGC");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }

                    }
                }

                String msg = "AGC Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadAGC.htm"));

            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadSRAS(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelSRASUpload");
        System.out.println("inside upload SRAS sheet");

        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "SRAS";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");

        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillSrasDetails tempBillDetails = new TempBillSrasDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekIdsras(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo agc is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNosras(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, h, k, j, l;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                String totalAgcUpDown = null;
                String totalAgcDown = null;
                String totalNetAgc = null;
                String agcEnergyCharges = null;
                String totalPoolCharges = null;
                String markUpCharges = null;
                String payRecvFlag = null;
                String bill_No = null;
                String wr_markUpCharges = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                Date bbdate = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillAgcDetailsDAO billAgcDetlDAO = new BillAgcDetailsDAO();
                BillAgcDetails billAgcDet = new BillAgcDetails();
                TempBillEntityAgcDAO tempBillEntityAgcDAO = new TempBillEntityAgcDAO();
                TempBillEntitySras tempBillEntitySras = new TempBillEntitySras();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billAgcDetlDAO.getMaxUniqueIDsras();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 9;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "SRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total SRAS Up Regulation based on 5 min schedule(MWh)(A)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total SRAS Down Regulation based on 5 min schedule(MWh)(B)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Incentive (Rs.)(C)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total Net SRAS (Mwh) (based on 15-Min schedule) (D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "SRAS Energy Charges (Rs) (E=C*Variable Cost)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Total Charges [Payable to Pool/ Receivable from Pool] (Rs) (B+D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable to Pool/Receivable from Pool";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 10) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 7;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }
                    //System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String agcFlag = entDAO.getSrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (agcFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not SRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }

                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("SRAS", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    totalAgcUpDown = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("totalsrasUp is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    totalAgcDown = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("totalsrasDown is : " + totalAgcDown);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    markUpCharges = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    totalNetAgc = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    agcEnergyCharges = cell.getStringCellValue().trim();
//                                    agcEnergyCharges = Double.parseDouble(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    totalPoolCharges = cell.getStringCellValue().trim();
//                                    totalPoolCharges = Double.parseDouble(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    payRecvFlag = cell.getStringCellValue().trim();
                                    System.out.println("payRecvFlag is : " + payRecvFlag);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
//                               
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgcUp_Down = cell.getNumericCellValue();
                                    totalAgcUpDown = Double.toString(totalAgcUp_Down);
                                    System.out.println("totalAgcUpDown is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgc_Down = cell.getNumericCellValue();
                                    totalAgcDown = Double.toString(totalAgc_Down);
                                    System.out.println("totalAgcDown is : " + totalAgcDown);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    markUpCharges = Double.toString(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    totalNetAgc = Double.toString(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    Double agcEnergy_Charges = cell.getNumericCellValue();
                                    agcEnergyCharges = Double.toString(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    totalPoolCharges = Double.toString(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }

                                if (cell.getColumnIndex() == 9 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(totalAgcUpDown);
                        valSetOne.add(markUpCharges);
                        valSetOne.add(totalNetAgc);
                        valSetOne.add(agcEnergyCharges);
                        valSetOne.add(totalPoolCharges);
                        valSetOne.add(payRecvFlag);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);
                        valSetOne.add(totalAgcDown);

                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    k = values.get(8);
                    j = values.get(9);
                    l = values.get(10);

                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("totalAgcupdown is " + c);
                    System.out.println("markUpCharges is " + d);
                    System.out.println("totalNetCharges is " + e);
                    System.out.println("AGCEnergyCharges is " + f);
                    System.out.println("totalPoolcharges is " + g);
                    System.out.println("PayRecv is " + h);
                    System.out.println("wrRemarks is " + k);
                    System.out.println("yearId is " + j);
                    System.out.println("agcdown is " + l);

                    tempuniqueId = tempBillEntityAgcDAO.getMaxUniqueIDtempbillentitysras();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntitySras.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntitySras.setEntites(ent);
                    tempBillEntitySras.setCorporates(corp);
                    tempBillEntitySras.setTotalAgcUpdownMwh(new BigDecimal(c));
                    tempBillEntitySras.setMarkupCharges(new BigDecimal(d));
                    tempBillEntitySras.setTotalnetAgc(new BigDecimal(e));
                    tempBillEntitySras.setAgcEnergycharges(new BigDecimal(f));
                    tempBillEntitySras.setTotalcharges(new BigDecimal(d).add(new BigDecimal(f)));
                    tempBillEntitySras.setPayRecvflag(h);
                    tempBillEntitySras.setRemarks(k);
                    tempBillEntitySras.setBillYear(new BigDecimal(j));
                    tempBillEntitySras.setWeekId(new BigDecimal(weekid));
                    tempBillEntitySras.setRevisionNo(revno);
                    tempBillEntitySras.setWrTotalcharges(new BigDecimal(g));
                    tempBillEntitySras.setBillStatus("Pending");
                    tempBillEntitySras.setTotalAgcDownMwh(new BigDecimal(l));

                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityAgcDAO.NewTempBillSRASEntries(tempBillEntitySras)) {
                            System.out.println("New SRAS entities entires added successfully");
                            String msg = "New AGC entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("k is " + k);
                    System.out.println("j is " + j);
                    System.out.println("l is " + l);

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillAGCDAO.getMaxUniqueIDtempbillsrasdetails();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());

                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");
                    tempBillAGCDAO.NewTempBillSRASDetails(tempBillDetails);
                }
                if (revno.intValue() == 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillSRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, totalCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        totalCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (totalCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("totalCharges are -ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("SRAS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(totalCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("totalCharges are +ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("SRAS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(totalCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                } else {

                    payrecList = tempBillreceiveCorpDAO.getTempBillSRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();

                    List<BillPayableCorp> listPay = new ArrayList<>();
                    List<BillReceiveCorp> listRecv = new ArrayList<>();

                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
                        BigDecimal mul = new BigDecimal("-1");
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        prerevno = revNo.subtract(BigDecimal.ONE);

                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "SRAS", new BigDecimal(year), corpInt);
                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "SRAS", byear, corpInt);

                        if (listPay != null && listPay.size() > 0) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("SRAS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(net);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("###Inserted data in Temp Payable Corp Table");

                        }

                        if (listRecv != null && listRecv.size() > 0) {
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("SRAS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }

                    }
                }

                String msg = "SRAS Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadSRAS.htm"));

            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadTRASM(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelTRASMUpload");
        System.out.println("inside upload TRASM sheet");

        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "TRASM";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");

        TempBillTRASMDetailsDAO tempBillTRASMDAO = new TempBillTRASMDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillTrasMDetails tempBillDetails = new TempBillTrasMDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillTRASMDAO.getMaxRevNoByWeekIdTRASM(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo trasm is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillTRASMDAO.checkExistenceOfWeekIDandRevisionNoTRASM(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                String trasUpClearedAhead = null;
                String trasUpScheduledAhead = null;
                String trasUpEnergyChargesAhead = null;
                String trasUpComChargesAhead = null;
                String trasUpClearedReal = null;
                String trasUpScheduledReal = null;
                String trasUpEnergyChargesReal = null;
                String trasUpComChargesReal = null;
                String trasUpTotalCharges = null;
                String trasDownScheduledAhead = null;
                String trasDownEnergyChargesAhead = null;
                String trasDownScheduledReal = null;
                String trasDownEnergyChargesReal = null;
                String netTras = null;

                String bill_No = null;
                String wrNetTras = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                Date bbdate = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillTRASMDetailsDAO billtrasmDetlDAO = new BillTRASMDetailsDAO();
                BillTrasMDetails billtrasmDet = new BillTrasMDetails();
                TempBillEntityTRASMDAO tempBillEntityTrasmDAO = new TempBillEntityTRASMDAO();
                TempBillEntityTrasM tempBillEntityTrasm = new TempBillEntityTrasM();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billtrasmDetlDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();

                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 17;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "TRAS-Up Energy Cleared (Mwh) Ahead (A)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "TRAS-Up Energy Scheduled (Mwh) Ahead (B)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Up Energy Charges (Rs.) Ahead (C)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Up Commitment Charges (Rs.) Ahead (D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Up Energy Cleared (Mwh) Real Time (E)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Up Energy Scheduled (Mwh) Real Time (F)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Up Energy Charges (Rs.) Real Time (G)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Up Commitment Charges (Rs.) Real Time (H)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total Charges/Compensation Charges For TRAS-Up (Rs.) (I = C+D+G+H)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 10) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Down Energy Scheduled (Mwh) Ahead (J)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 11) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Down Charges to be paid back to Pool (Rs.) Ahead (K)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 11");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 12) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Down Energy Scheduled (Mwh) Real Time (L)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 12");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 13) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS-Down Charges to be paid back to Pool (Rs.) Real Time (M)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 13");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 14) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Net Charges (Rs.) (+) Payable From Pool To AS Provider (-) Receivable By Pool From AS Provider (N = I-K-M)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 14");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 15) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 15");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 16) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 16");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 17) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 17");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 14;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }
                    //System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String trasFlag = entDAO.getTrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (trasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not TRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }

                                }
                        }
                    }
                }

                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASM", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    trasUpClearedAhead = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("trasUpClearedAhead is : " + trasUpClearedAhead);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    trasUpScheduledAhead = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("trasUpScheduledAhead is : " + trasUpScheduledAhead);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    trasUpEnergyChargesAhead = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("trasUpEnergyChargesAhead is : " + trasUpEnergyChargesAhead);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    trasUpComChargesAhead = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("trasUpComChargesAhead Charges is : " + trasUpComChargesAhead);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    trasUpClearedReal = cell.getStringCellValue().trim();
//                                    agcEnergyCharges = Double.parseDouble(agcEnergy_Charges);
                                    System.out.println("trasUpClearedReal is : " + trasUpClearedReal);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    trasUpScheduledReal = cell.getStringCellValue().trim();
//                                    totalPoolCharges = Double.parseDouble(totalPool_Charges);
                                    System.out.println("trasUpScheduledReal is : " + trasUpScheduledReal);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    trasUpEnergyChargesReal = cell.getStringCellValue().trim();
                                    System.out.println("trasUpEnergyChargesReal is : " + trasUpEnergyChargesReal);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    trasUpComChargesReal = cell.getStringCellValue().trim();
                                    System.out.println("trasUpComChargesReal is : " + trasUpComChargesReal);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    trasUpTotalCharges = cell.getStringCellValue().trim();
                                    System.out.println("trasUpTotalCharges is : " + trasUpTotalCharges);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    trasDownScheduledAhead = cell.getStringCellValue().trim();
                                    System.out.println("trasDownScheduledAhead is : " + trasDownScheduledAhead);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    trasDownEnergyChargesAhead = cell.getStringCellValue().trim();
                                    System.out.println("trasDownEnergyChargesAhead is : " + trasDownEnergyChargesAhead);
                                }
                                if (cell.getColumnIndex() == 12 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    trasDownScheduledReal = cell.getStringCellValue().trim();
                                    System.out.println("trasDownScheduledReal is : " + trasDownScheduledReal);
                                }
                                if (cell.getColumnIndex() == 13 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    trasDownEnergyChargesReal = cell.getStringCellValue().trim();
                                    System.out.println("trasDownEnergyChargesReal is : " + trasDownEnergyChargesReal);
                                }
                                if (cell.getColumnIndex() == 14 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    wrNetTras = cell.getStringCellValue().trim();
                                    System.out.println("wrNetTras is : " + wrNetTras);
                                }
                                if (cell.getColumnIndex() == 15 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 16 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 17 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
//                               
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgcUp_Down = cell.getNumericCellValue();
                                    trasUpClearedAhead = Double.toString(totalAgcUp_Down);
                                    System.out.println("trasUpClearedAhead is : " + trasUpClearedAhead);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgc_Down = cell.getNumericCellValue();
                                    trasUpScheduledAhead = Double.toString(totalAgc_Down);
                                    System.out.println("trasUpScheduledAhead is : " + trasUpScheduledAhead);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    trasUpEnergyChargesAhead = Double.toString(markUp_Charges);
                                    System.out.println("trasUpEnergyChargesAhead is : " + trasUpEnergyChargesAhead);
                                }

                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    trasUpComChargesAhead = Double.toString(totalNet_Agc);
                                    System.out.println("trasUpComChargesAhead  is : " + trasUpComChargesAhead);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    trasUpClearedReal = Double.toString(totalNet_Agc);
                                    System.out.println("trasUpClearedReal  is : " + trasUpClearedReal);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    Double agcEnergy_Charges = cell.getNumericCellValue();
                                    trasUpScheduledReal = Double.toString(agcEnergy_Charges);
                                    System.out.println("trasUpScheduledReal is : " + trasUpScheduledReal);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    trasUpEnergyChargesReal = Double.toString(totalPool_Charges);
                                    System.out.println("trasUpEnergyChargesReal is : " + trasUpEnergyChargesReal);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    trasUpComChargesReal = Double.toString(totalPool_Charges);
                                    System.out.println("trasUpComChargesReal is : " + trasUpComChargesReal);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    trasUpTotalCharges = Double.toString(totalPool_Charges);
                                    System.out.println("trasUpTotalCharges is : " + trasUpTotalCharges);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 8");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    trasDownScheduledAhead = Double.toString(totalPool_Charges);
                                    System.out.println("trasDownScheduledAhead is : " + trasDownScheduledAhead);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    trasDownEnergyChargesAhead = Double.toString(totalPool_Charges);
                                    System.out.println("trasDownEnergyChargesAhead is : " + trasDownEnergyChargesAhead);
                                }
                                if (cell.getColumnIndex() == 12 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    trasDownScheduledReal = Double.toString(totalPool_Charges);
                                    System.out.println("trasDownScheduledReal is : " + trasDownScheduledReal);
                                }
                                if (cell.getColumnIndex() == 13 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 11");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    trasDownEnergyChargesReal = Double.toString(totalPool_Charges);
                                    System.out.println("trasDownEnergyChargesReal is : " + trasDownEnergyChargesReal);
                                }
                                if (cell.getColumnIndex() == 14 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 12");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    wrNetTras = Double.toString(totalPool_Charges);
                                    System.out.println("wrNetTras is : " + wrNetTras);
                                }

                                if (cell.getColumnIndex() == 16 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(trasUpClearedAhead);
                        valSetOne.add(trasUpScheduledAhead);
                        valSetOne.add(trasUpEnergyChargesAhead);
                        valSetOne.add(trasUpComChargesAhead);
                        valSetOne.add(trasUpClearedReal);
                        valSetOne.add(trasUpScheduledReal);
                        valSetOne.add(trasUpEnergyChargesReal);
                        valSetOne.add(trasUpComChargesReal);
                        valSetOne.add(trasUpTotalCharges);
                        valSetOne.add(trasDownScheduledAhead);
                        valSetOne.add(trasDownEnergyChargesAhead);
                        valSetOne.add(trasDownScheduledReal);
                        valSetOne.add(trasDownEnergyChargesReal);
                        valSetOne.add(wrNetTras);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);

                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }

                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());

                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    i = values.get(8);
                    j = values.get(9);
                    k = values.get(10);
                    l = values.get(11);
                    m = values.get(12);
                    n = values.get(13);
                    o = values.get(14);
                    p = values.get(15);
                    q = values.get(16);
                    r = values.get(17);

                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("trasUpClearedAhead is " + c);
                    System.out.println("trasUpScheduledAhead is " + d);
                    System.out.println("trasUpEnergyChargesAhead is " + e);
                    System.out.println("trasUpComChargesAhead is " + f);
                    System.out.println("trasUpClearedReal is " + g);
                    System.out.println("trasUpScheduledReal is " + h);
                    System.out.println("trasUpEnergyChargesReal is " + i);
                    System.out.println("trasUpComChargesReal is " + j);
                    System.out.println("trasUpTotalCharges is " + k);
                    System.out.println("trasDownScheduledAhead is " + l);
                    System.out.println("trasDownEnergyChargesAhead is " + m);
                    System.out.println("trasDownScheduledReal is " + n);
                    System.out.println("trasDownEnergyChargesReal is " + o);
                    System.out.println("wrNetTras is " + p);
                    System.out.println("wr_remarks is " + q);
                    System.out.println("year is " + r);

                    tempuniqueId = tempBillEntityTrasmDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntityTrasm.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntityTrasm.setEntites(ent);
                    tempBillEntityTrasm.setCorporates(corp);
                    tempBillEntityTrasm.setTrasUpClearedAhead(new BigDecimal(c));
                    tempBillEntityTrasm.setTrasUpScheduledAhead(new BigDecimal(d));
                    tempBillEntityTrasm.setTrasUpEnergyChargesAhead(new BigDecimal(e));
                    tempBillEntityTrasm.setTrasUpComChargesAhead(new BigDecimal(f));
                    tempBillEntityTrasm.setTrasUpClearedReal(new BigDecimal(g));
                    tempBillEntityTrasm.setTrasUpScheduledReal(new BigDecimal(h));
                    tempBillEntityTrasm.setTrasUpEnergyChargesReal(new BigDecimal(i));
                    tempBillEntityTrasm.setTrasUpComChargesReal(new BigDecimal(j));
                    tempBillEntityTrasm.setTrasUpTotalCharges(new BigDecimal(k));
                    tempBillEntityTrasm.setTrasDownScheduledAhead(new BigDecimal(l));
                    tempBillEntityTrasm.setTrasDownEnergyChargesAhead(new BigDecimal(m));
                    tempBillEntityTrasm.setTrasDownScheduledReal(new BigDecimal(n));
                    tempBillEntityTrasm.setTrasDownEnergyChargesReal(new BigDecimal(o));
                    tempBillEntityTrasm.setRemarks(q);
                    tempBillEntityTrasm.setBillYear(new BigDecimal(r));
                    tempBillEntityTrasm.setWeekId(new BigDecimal(weekid));
                    tempBillEntityTrasm.setRevisionNo(revno);
                    tempBillEntityTrasm.setWrNetTras(new BigDecimal(p));
                    tempBillEntityTrasm.setNetTras(new BigDecimal(e).add(new BigDecimal(f)).add(new BigDecimal(i)).add(new BigDecimal(j)).subtract(new BigDecimal(m)).subtract(new BigDecimal(o)));

                    tempBillEntityTrasm.setBillStatus("Pending");

                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityTrasmDAO.NewTempBillEntityTRASM(tempBillEntityTrasm)) {
                            System.out.println("New TRASM entities entires added successfully");
                            String msg = "New TRASM entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("i is " + i);
                    System.out.println("j is " + j);
                    System.out.println("k is " + k);
                    System.out.println("l is " + l);
                    System.out.println("m is " + m);
                    System.out.println("n is " + n);
                    System.out.println("o is " + o);
                    System.out.println("p is " + p);
                    System.out.println("q is " + q);
                    System.out.println("r is " + r);

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillTRASMDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());

                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");
                    tempBillTRASMDAO.NewTempBillTRASMDetails(tempBillDetails);
                }

                if (revno.intValue() == 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillTRASM(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, totalCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        totalCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (totalCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("totalCharges are -ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("TRASM");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(totalCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("totalCharges are +ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("TRASM");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(totalCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                } else {

                    payrecList = tempBillreceiveCorpDAO.getTempBillTRASM(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();

                    List<BillPayableCorp> listPay = new ArrayList<>();
                    List<BillReceiveCorp> listRecv = new ArrayList<>();

                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
                        BigDecimal mul = new BigDecimal("-1");
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        prerevno = revNo.subtract(BigDecimal.ONE);

                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "TRASM", new BigDecimal(year), corpInt);
                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "TRASM", byear, corpInt);

                        if (listPay != null && listPay.size() > 0) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("TRASM");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(net);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("###Inserted data in Temp Payable Corp Table");

                        }

                        if (listRecv != null && listRecv.size() > 0) {
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("TRASM");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }

                    }
                }

                String msg = "TRASM Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadTRASM.htm"));

            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadTRASS(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelTRASSUpload");
        System.out.println("inside upload TRASS sheet");

        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "TRASS";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");

        TempBillTRASSDetailsDAO tempBillTRASSDAO = new TempBillTRASSDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillTrasSDetails tempBillDetails = new TempBillTrasSDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillTRASSDAO.getMaxRevNoByWeekIdTRASS(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo trasm is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillTRASSDAO.checkExistenceOfWeekIDandRevisionNoTRASS(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                String trasUpEnergyShort = null;
                String trasUpCharges = null;
                String trasDownEnergyShort = null;
                String trasDownCharges = null;
                String payRecvflag = null;
                String netTras = null;

                String bill_No = null;
                String wrNetTras = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                Date bbdate = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillTRASSDetailsDAO billtrassDetlDAO = new BillTRASSDetailsDAO();
                BillTrasSDetails billtrassDet = new BillTrasSDetails();
                TempBillEntityTRASSDAO tempBillEntityTrassDAO = new TempBillEntityTRASSDAO();
                TempBillEntityTrasS tempBillEntityTrass = new TempBillEntityTrasS();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billtrassDetlDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();

                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 9;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Energy scheduled under Shortfall TRAS-Up (MWh) (A)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total charges/ Compensation charges for shortfall TRAS-Up (Rs) (B)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Energy scheduled under Shortfall TRAS- Down (MWh) (C)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total charges/Compensation charges for shortfall TRAS-Down to be paid back to Pool(Rs) (D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Net Charges (Rs) (E)=(B)-(D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable by TRAS Providers (-) or Receivable to TRAS Providers (+)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 17");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 6;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }
                    //System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String trasFlag = entDAO.getTrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (trasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not TRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }

                                }
                        }
                    }
                }

                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASS", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    trasUpEnergyShort = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("trasUpEnergyShort is : " + trasUpEnergyShort);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    trasUpCharges = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("trasUpCharges is : " + trasUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    trasDownEnergyShort = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("trasDownEnergyShort is : " + trasDownEnergyShort);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    trasDownCharges = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("trasDownCharges  is : " + trasDownCharges);
                                }

                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    wrNetTras = cell.getStringCellValue().trim();
                                    System.out.println("wrNetTras is : " + wrNetTras);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    payRecvflag = cell.getStringCellValue().trim();
                                    System.out.println("payRecvflag is : " + payRecvflag);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
//                               
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgcUp_Down = cell.getNumericCellValue();
                                    trasUpEnergyShort = Double.toString(totalAgcUp_Down);
                                    System.out.println("trasUpEnergyShort is : " + trasUpEnergyShort);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgc_Down = cell.getNumericCellValue();
                                    trasUpCharges = Double.toString(totalAgc_Down);
                                    System.out.println("trasUpCharges is : " + trasUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    trasDownEnergyShort = Double.toString(markUp_Charges);
                                    System.out.println("trasDownEnergyShort is : " + trasDownEnergyShort);
                                }

                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    trasDownCharges = Double.toString(totalNet_Agc);
                                    System.out.println("trasDownCharges  is : " + trasDownCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    wrNetTras = Double.toString(totalNet_Agc);
                                    System.out.println("wrNetTras  is : " + wrNetTras);
                                }

                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(trasUpEnergyShort);
                        valSetOne.add(trasUpCharges);
                        valSetOne.add(trasDownEnergyShort);
                        valSetOne.add(trasDownCharges);
                        valSetOne.add(wrNetTras);
                        valSetOne.add(payRecvflag);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);

                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }

                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());

                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    i = values.get(8);
                    j = values.get(9);

                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("trasUpEnergyShort is " + c);
                    System.out.println("trasUpCharges is " + d);
                    System.out.println("trasDownEnergyShort is " + e);
                    System.out.println("trasDownCharges is " + f);
                    System.out.println("wrNetTras is " + g);
                    System.out.println("payRecvflag is " + h);
                    System.out.println("wr_remarks is " + i);
                    System.out.println("year is " + j);

                    tempuniqueId = tempBillEntityTrassDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntityTrass.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntityTrass.setEntites(ent);
                    tempBillEntityTrass.setCorporates(corp);
                    tempBillEntityTrass.setTrasUpEnergyShort(new BigDecimal(c));
                    tempBillEntityTrass.setTrasUpCharges(new BigDecimal(d));
                    tempBillEntityTrass.setTrasDownEnergyShort(new BigDecimal(e));
                    tempBillEntityTrass.setTrasDownCharges(new BigDecimal(f));
                    tempBillEntityTrass.setPayRecvflag(h);
                    tempBillEntityTrass.setRemarks(i);
                    tempBillEntityTrass.setBillYear(new BigDecimal(j));
                    tempBillEntityTrass.setWeekId(new BigDecimal(weekid));
                    tempBillEntityTrass.setRevisionNo(revno);
                    tempBillEntityTrass.setWrNetTras(new BigDecimal(g));
                    tempBillEntityTrass.setNetTras(new BigDecimal(d).subtract(new BigDecimal(f)));

                    tempBillEntityTrass.setBillStatus("Pending");

                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityTrassDAO.NewTempBillEntityTRASS(tempBillEntityTrass)) {
                            System.out.println("New TRASS entities entires added successfully");
                            String msg = "New TRASS entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("i is " + i);
                    System.out.println("j is " + j);

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillTRASSDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());

                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");
                    tempBillTRASSDAO.NewTempBillTRASSDetails(tempBillDetails);
                }

                if (revno.intValue() == 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillTRASS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, totalCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        totalCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (totalCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("totalCharges are -ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("TRASS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(totalCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("totalCharges are +ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("TRASS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(totalCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                } else {

                    payrecList = tempBillreceiveCorpDAO.getTempBillTRASS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();

                    List<BillPayableCorp> listPay = new ArrayList<>();
                    List<BillReceiveCorp> listRecv = new ArrayList<>();

                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
                        BigDecimal mul = new BigDecimal("-1");
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        prerevno = revNo.subtract(BigDecimal.ONE);

                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "TRASS", new BigDecimal(year), corpInt);
                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "TRASS", byear, corpInt);

                        if (listPay != null && listPay.size() > 0) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("TRASS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(net);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("###Inserted data in Temp Payable Corp Table");

                        }

                        if (listRecv != null && listRecv.size() > 0) {
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("TRASS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }

                    }
                }

                String msg = "TRASS Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadTRASS.htm"));

            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadTRASE(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelTRASEUpload");
        System.out.println("inside upload TRASE sheet");

        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "TRASE";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");

        TempBillTRASEDetailsDAO tempBillTRASEDAO = new TempBillTRASEDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillTrasEDetails tempBillDetails = new TempBillTrasEDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillTRASEDAO.getMaxRevNoByWeekIdTRASE(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo trasm is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillTRASEDAO.checkExistenceOfWeekIDandRevisionNoTRASE(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                String trasUpEnergyShort = null;
                String trasUpCharges = null;
                String trasDownEnergyShort = null;
                String trasDownCharges = null;
                String payRecvflag = null;
                String netTras = null;

                String bill_No = null;
                String wrNetTras = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                Date bbdate = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillTRASEDetailsDAO billtraseDetlDAO = new BillTRASEDetailsDAO();
                BillTrasEDetails billtraseDet = new BillTrasEDetails();
                TempBillEntityTRASEDAO tempBillEntityTraseDAO = new TempBillEntityTRASEDAO();
                TempBillEntityTrasE tempBillEntityTrase = new TempBillEntityTrasE();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billtraseDetlDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();

                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 9;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "TRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Energy scheduled under Emergency TRAS-Up (MWh) (A)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total charges/ Compensation charges for Emergency TRAS-Up (Rs) (B)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Energy scheduled under Emergency TRAS- Down (MWh) (C)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total charges/Compensation charges for Emergency TRAS-Down to be paid back to Pool(Rs) (D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Net Charges (Rs) (E)=(B)-(D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable by TRAS Providers (-) or Receivable to TRAS Providers (+)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 17");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 6;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }
                    //System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String trasFlag = entDAO.getTrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (trasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not TRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }

                                }
                        }
                    }
                }

                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASE", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    trasUpEnergyShort = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("trasUpEnergyemer is : " + trasUpEnergyShort);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    trasUpCharges = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("trasUpCharges is : " + trasUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    trasDownEnergyShort = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("trasDownEnergyemer is : " + trasDownEnergyShort);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    trasDownCharges = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("trasDownCharges  is : " + trasDownCharges);
                                }

                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    wrNetTras = cell.getStringCellValue().trim();
                                    System.out.println("wrNetTras is : " + wrNetTras);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    payRecvflag = cell.getStringCellValue().trim();
                                    System.out.println("payRecvflag is : " + payRecvflag);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
//                               
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgcUp_Down = cell.getNumericCellValue();
                                    trasUpEnergyShort = Double.toString(totalAgcUp_Down);
                                    System.out.println("trasUpEnergyemer is : " + trasUpEnergyShort);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgc_Down = cell.getNumericCellValue();
                                    trasUpCharges = Double.toString(totalAgc_Down);
                                    System.out.println("trasUpCharges is : " + trasUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    trasDownEnergyShort = Double.toString(markUp_Charges);
                                    System.out.println("trasDownEnergyemer is : " + trasDownEnergyShort);
                                }

                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    trasDownCharges = Double.toString(totalNet_Agc);
                                    System.out.println("trasDownCharges  is : " + trasDownCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    wrNetTras = Double.toString(totalNet_Agc);
                                    System.out.println("wrNetTras  is : " + wrNetTras);
                                }

                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(trasUpEnergyShort);
                        valSetOne.add(trasUpCharges);
                        valSetOne.add(trasDownEnergyShort);
                        valSetOne.add(trasDownCharges);
                        valSetOne.add(wrNetTras);
                        valSetOne.add(payRecvflag);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);

                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }

                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());

                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    i = values.get(8);
                    j = values.get(9);

                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("trasUpEnergyShort is " + c);
                    System.out.println("trasUpCharges is " + d);
                    System.out.println("trasDownEnergyShort is " + e);
                    System.out.println("trasDownCharges is " + f);
                    System.out.println("wrNetTras is " + g);
                    System.out.println("payRecvflag is " + h);
                    System.out.println("wr_remarks is " + i);
                    System.out.println("year is " + j);

                    tempuniqueId = tempBillEntityTraseDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntityTrase.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntityTrase.setEntites(ent);
                    tempBillEntityTrase.setCorporates(corp);
                    tempBillEntityTrase.setTrasUpEnergyEmer(new BigDecimal(c));
                    tempBillEntityTrase.setTrasUpCharges(new BigDecimal(d));
                    tempBillEntityTrase.setTrasDownEnergyEmer(new BigDecimal(e));
                    tempBillEntityTrase.setTrasDownCharges(new BigDecimal(f));
                    tempBillEntityTrase.setPayRecvflag(h);
                    tempBillEntityTrase.setRemarks(i);
                    tempBillEntityTrase.setBillYear(new BigDecimal(j));
                    tempBillEntityTrase.setWeekId(new BigDecimal(weekid));
                    tempBillEntityTrase.setRevisionNo(revno);
                    tempBillEntityTrase.setWrNetTras(new BigDecimal(g));
                    tempBillEntityTrase.setNetTras(new BigDecimal(d).subtract(new BigDecimal(f)));

                    tempBillEntityTrase.setBillStatus("Pending");

                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityTraseDAO.NewTempBillEntityTRASE(tempBillEntityTrase)) {
                            System.out.println("New TRASE entities entires added successfully");
                            String msg = "New TRASS entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("i is " + i);
                    System.out.println("j is " + j);

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillTRASEDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());

                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");
                    tempBillTRASEDAO.NewTempBillTRASEDetails(tempBillDetails);
                }

                if (revno.intValue() == 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillTRASE(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, totalCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        totalCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (totalCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("totalCharges are -ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("TRASE");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(totalCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("totalCharges are +ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("TRASE");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(totalCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                } else {

                    payrecList = tempBillreceiveCorpDAO.getTempBillTRASE(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();

                    List<BillPayableCorp> listPay = new ArrayList<>();
                    List<BillReceiveCorp> listRecv = new ArrayList<>();

                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
                        BigDecimal mul = new BigDecimal("-1");
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        prerevno = revNo.subtract(BigDecimal.ONE);

                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "TRASE", new BigDecimal(year), corpInt);
                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "TRASE", byear, corpInt);

                        if (listPay != null && listPay.size() > 0) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("TRASE");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(net);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("###Inserted data in Temp Payable Corp Table");

                        }

                        if (listRecv != null && listRecv.size() > 0) {
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("TRASE");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }

                    }
                }

                String msg = "TRASE Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadTRASE.htm"));

            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadREVAGC(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelREVAGCUpload");
        System.out.println("inside Revised upload AGC sheet");

        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("loginid") == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "AGC";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");

        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillAgcDetails tempBillDetails = new TempBillAgcDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo agc is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, h, k, j, l;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                String totalAgcUpDown = null;
                String totalNetAgc = null;
                String agcEnergyCharges = null;
                String totalPoolCharges = null;
                String prevtotalPoolCharges = null;
                String markUpCharges = null;
                String payRecvFlag = null;
                String bill_No = null;
                String wr_markUpCharges = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                Date bbdate = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillAgcDetailsDAO billAgcDetlDAO = new BillAgcDetailsDAO();
                BillAgcDetails billAgcDet = new BillAgcDetails();
                TempBillEntityAgcDAO tempBillEntityAgcDAO = new TempBillEntityAgcDAO();
                TempBillEntityAgc tempBillEntityAgc = new TempBillEntityAgc();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billAgcDetlDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 12;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "AGC Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total AGC Up & Down Regulation based on 5 min schedule(MWh)(A)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Markup at the rate of 50p/unit for both positive and negative AGC from the DSM Pool (Mwh) (Rs) (B =A*1000*0.5)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total Net AGC (Mwh) (based on 15-Min schedule) (C)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "AGC Energy Charges (Rs) (D=C*Variable Cost)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Total Charges [Payable to Pool/ Receivable from Pool] (Rs) (B+D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable to Pool/Receivable from Pool";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 10) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "PREVIOUS WRLDC Total Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 11");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 11) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Revision No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 12");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (cellNo != 9) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    } else {
                        cellNum = 11;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (cellNo != 7 && cellNo != 8 && cellNo != 9) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    }
                    //System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String agcFlag = entDAO.getAgcFlagByEntityId(new BigDecimal(entity_id));
                                        if (agcFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not AGC Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }

                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("AGC", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    totalAgcUpDown = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("totalAgcUpDown is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    markUpCharges = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    totalNetAgc = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    agcEnergyCharges = cell.getStringCellValue().trim();
//                                    agcEnergyCharges = Double.parseDouble(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    totalPoolCharges = cell.getStringCellValue().trim();
//                                    totalPoolCharges = Double.parseDouble(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    payRecvFlag = cell.getStringCellValue().trim();
                                    System.out.println("payRecvFlag is : " + payRecvFlag);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    prevtotalPoolCharges = cell.getStringCellValue().trim();
//                                    totalPoolCharges = Double.parseDouble(totalPool_Charges);
                                    System.out.println("prevtotalPoolCharges is : " + prevtotalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getStringCellValue().trim());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                                break;

                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgcUp_Down = cell.getNumericCellValue();
                                    totalAgcUpDown = Double.toString(totalAgcUp_Down);
                                    System.out.println("totalAgcUpDown is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    markUpCharges = Double.toString(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    totalNetAgc = Double.toString(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    Double agcEnergy_Charges = cell.getNumericCellValue();
                                    agcEnergyCharges = Double.toString(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    totalPoolCharges = Double.toString(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }

                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    Double prevtotalPool_Charges = cell.getNumericCellValue();
                                    prevtotalPoolCharges = Double.toString(prevtotalPool_Charges);
                                    System.out.println("prevtotalPoolCharges is : " + prevtotalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getNumericCellValue());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(totalAgcUpDown);
                        valSetOne.add(markUpCharges);
                        valSetOne.add(totalNetAgc);
                        valSetOne.add(agcEnergyCharges);
                        valSetOne.add(totalPoolCharges);
                        valSetOne.add(payRecvFlag);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);
                        valSetOne.add(prevtotalPoolCharges);

                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    k = values.get(8);
                    j = values.get(9);
                    l = values.get(10);

                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("totalAgc is " + c);
                    System.out.println("markUpCharges is " + d);
                    System.out.println("totalNetCharges is " + e);
                    System.out.println("AGCEnergyCharges is " + f);
                    System.out.println("totalPoolcharges is " + g);
                    System.out.println("PayRecv is " + h);
                    System.out.println("wrRemarks is " + k);
                    System.out.println("yearId is " + j);
                    System.out.println("prevtotalPoolcharges is " + l);

                    tempuniqueId = tempBillEntityAgcDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntityAgc.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntityAgc.setEntites(ent);
                    tempBillEntityAgc.setCorporates(corp);
                    tempBillEntityAgc.setTotalAgcUpdownMwh(new BigDecimal(c));
                    tempBillEntityAgc.setMarkupCharges(new BigDecimal(d));
                    tempBillEntityAgc.setTotalnetAgc(new BigDecimal(e));
                    tempBillEntityAgc.setAgcEnergycharges(new BigDecimal(f));
                    tempBillEntityAgc.setTotalcharges(new BigDecimal(d).add(new BigDecimal(f)));
                    tempBillEntityAgc.setPayRecvflag(h);
                    tempBillEntityAgc.setRemarks(k);
                    tempBillEntityAgc.setBillYear(new BigDecimal(j));
                    tempBillEntityAgc.setWeekId(new BigDecimal(weekid));
                    tempBillEntityAgc.setRevisionNo(revno);
                    tempBillEntityAgc.setWrTotalcharges(new BigDecimal(g));
                    tempBillEntityAgc.setBillStatus("Pending");
                    tempBillEntityAgc.setPrevWrTotalcharges(new BigDecimal(l));

                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityAgcDAO.NewTempBillAGCEntries(tempBillEntityAgc)) {
                            System.out.println("New AGC entities entires added successfully");
                            String msg = "New AGC entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("k is " + k);
                    System.out.println("j is " + j);

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillAGCDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());

                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");
                    tempBillAGCDAO.NewTempBillAGCDetails(tempBillDetails);
                }
                if (revno.intValue() >= 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillAGC(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, totalCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        totalCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (totalCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("totalCharges are -ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("AGC");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(totalCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("totalCharges are +ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("AGC");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(totalCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                }
//                else {
//
//                    payrecList = tempBillreceiveCorpDAO.getTempBillAGC(new BigDecimal(weekid), revno, new BigDecimal(year));
//                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
//                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
//                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();
//
//                    List<BillPayableCorp> listPay = new ArrayList<>();
//                    List<BillReceiveCorp> listRecv = new ArrayList<>();
//
//                    for (Object[] listMW1 : payrecList) {
//                        Object[] row = (Object[]) listMW1;
//                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
//                        BigDecimal mul = new BigDecimal("-1");
//                        Date bdate = null;
//                        weekId = (BigDecimal) row[0];
//                        corpId = (BigDecimal) row[1];
//                        net = (BigDecimal) row[2];
//                        bdate = (Date) row[3];
//                        byear = (BigDecimal) row[4];
//                        int corpInt = corpId.intValue();
//                        revNo = revno;
//                        prerevno = revNo.subtract(BigDecimal.ONE);
//
//                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "AGC", new BigDecimal(year), corpInt);
//                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "AGC", byear, corpInt);
//
//                        if (listPay != null && listPay.size() > 0) {
//
//                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillPayablecorp.setWeekId(weekId);
//                            tempBillPayablecorp.setBillType("AGC");
//                            tempBillPayablecorp.setBillYear(byear);
//                            tempBillPayablecorp.setBillingDate(bdate);
//                            tempBillPayablecorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillPayablecorp.setCorporates(corp);
//                            tempBillPayablecorp.setTotalnet(net);
//                            tempBillPayablecorp.setBillStatus("Pending");
//                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
//                            System.out.println("###Inserted data in Temp Payable Corp Table");
//
//                        }
//
//                        if (listRecv != null && listRecv.size() > 0) {
//                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillReceivecorp.setWeekId(weekId);
//                            tempBillReceivecorp.setBillType("AGC");
//                            tempBillReceivecorp.setBillYear(byear);
//                            tempBillReceivecorp.setBillingDate(bdate);
//                            tempBillReceivecorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillReceivecorp.setCorporates(corp);
//                            tempBillReceivecorp.setToalnet(net);
//                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
//                            tempBillReceivecorp.setBillStatus("Pending");
//                            System.out.println(" tempBillReceivecorp revno is " + revno);
//                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
//                            System.out.println("Inserted data in Temp Receive Corp Table");
//
//                        }
//
//                    }
//                }

                String msg = "AGC Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyREVUploadAGC.htm"));

            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadREVSRAS(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelREVAGCUpload");
        System.out.println("inside Revised upload AGC sheet");

        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "SRAS";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");

        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillSrasDetails tempBillDetails = new TempBillSrasDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekIdsras(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo agc is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNosras(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, h, k, j, l, m;
                int entity_id = 0;
                Double entityId = 0.0;
                Double corporateId = 0.0;
                Double yearId = 0.0;
                int corporate_id = 0;
                String totalAgcUpDown = null;
                String totalAgcDown = null;

                String totalNetAgc = null;
                String agcEnergyCharges = null;
                String totalPoolCharges = null;
                String prevtotalPoolCharges = null;
                String markUpCharges = null;
                String payRecvFlag = null;
                String bill_No = null;
                String wr_markUpCharges = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                Date bbdate = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillAgcDetailsDAO billAgcDetlDAO = new BillAgcDetailsDAO();
                BillAgcDetails billAgcDet = new BillAgcDetails();
                TempBillEntityAgcDAO tempBillEntityAgcDAO = new TempBillEntityAgcDAO();
                TempBillEntitySras tempBillEntitySras = new TempBillEntitySras();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billAgcDetlDAO.getMaxUniqueIDsras();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 13;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "SRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total SRAS Up Regulation based on 5 min schedule(MWh)(A)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();

//                                                String str2 = "Total AGC Up & Down Regulation(MWh)(based on 5 min schedule)(A)";
                                                String str2 = "Total SRAS Down Regulation based on 5 min schedule(MWh)(B)";

                                                if (str2.equalsIgnoreCase(colName)) {
                                                    System.out.println("colName match");
                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("@@@inside column 2");
                                                    System.out.println("column 2 is " + colName);
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Incentive (Rs.)(C)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total Net SRAS (Mwh) (based on 15-Min schedule) (D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "SRAS Energy Charges (Rs) (E=C*Variable Cost)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Total Charges [Payable to Pool/ Receivable from Pool] (Rs) (B+D)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Payable to Pool/Receivable from Pool";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Billing Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 10) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 11) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "PREVIOUS WRLDC Total Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 11");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 12) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Revision No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("successMsg");
                                                    System.out.println("inside column 12");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (cellNo != 10) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    } else {
                        cellNum = 12;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (cellNo != 8 && cellNo != 9 && cellNo != 10) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    }
                    //System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String agcFlag = entDAO.getSrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (agcFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not SRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }

                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("SRAS", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                //System.out.print("string case");
                                // System.out.print("Inside col : "+cell.getColumnIndex()+" and value is : "+cell.getStringCellValue());
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    totalAgcUpDown = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("totalsrasUp is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    totalAgcDown = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("totalsrasDown is : " + totalAgcDown);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    markUpCharges = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    totalNetAgc = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    agcEnergyCharges = cell.getStringCellValue().trim();
//                                    agcEnergyCharges = Double.parseDouble(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    totalPoolCharges = cell.getStringCellValue().trim();
//                                    totalPoolCharges = Double.parseDouble(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    payRecvFlag = cell.getStringCellValue().trim();
                                    System.out.println("payRecvFlag is : " + payRecvFlag);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 7");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 9 && (rowNum == 1)) {
                                    System.out.println("#### inside column 8 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 9");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    prevtotalPoolCharges = cell.getStringCellValue().trim();
//                                    totalPoolCharges = Double.parseDouble(totalPool_Charges);
                                    System.out.println("prevtotalPoolCharges is : " + prevtotalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 12 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getStringCellValue().trim());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNosras(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                                break;

                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgcUp_Down = cell.getNumericCellValue();
                                    totalAgcUpDown = Double.toString(totalAgcUp_Down);
                                    System.out.println("totalAgcUpDown is : " + totalAgcUpDown);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double totalAgc_Down = cell.getNumericCellValue();
                                    totalAgcDown = Double.toString(totalAgc_Down);
                                    System.out.println("totalAgcDown is : " + totalAgcDown);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    markUpCharges = Double.toString(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double totalNet_Agc = cell.getNumericCellValue();
                                    totalNetAgc = Double.toString(totalNet_Agc);
                                    System.out.println("totalNetAgc Charges is : " + totalNetAgc);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    Double agcEnergy_Charges = cell.getNumericCellValue();
                                    agcEnergyCharges = Double.toString(agcEnergy_Charges);
                                    System.out.println("agcEnergyCharges is : " + agcEnergyCharges);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    Double totalPool_Charges = cell.getNumericCellValue();
                                    totalPoolCharges = Double.toString(totalPool_Charges);
                                    System.out.println("totalPoolCharges is : " + totalPoolCharges);
                                }

                                if (cell.getColumnIndex() == 9 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 11 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    Double prevtotalPool_Charges = cell.getNumericCellValue();
                                    prevtotalPoolCharges = Double.toString(prevtotalPool_Charges);
                                    System.out.println("prevtotalPoolCharges is : " + prevtotalPoolCharges);
                                }
                                if (cell.getColumnIndex() == 12 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getNumericCellValue());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillAGCDAO.checkExistenceOfWeekIDandRevisionNosras(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(totalAgcUpDown);
                        valSetOne.add(markUpCharges);
                        valSetOne.add(totalNetAgc);
                        valSetOne.add(agcEnergyCharges);
                        valSetOne.add(totalPoolCharges);
                        valSetOne.add(payRecvFlag);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);
                        valSetOne.add(prevtotalPoolCharges);
                        valSetOne.add(totalAgcDown);

                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    k = values.get(8);
                    j = values.get(9);
                    l = values.get(10);
                    m = values.get(11);

                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println("totalAgc is " + c);
                    System.out.println("markUpCharges is " + d);
                    System.out.println("totalNetCharges is " + e);
                    System.out.println("AGCEnergyCharges is " + f);
                    System.out.println("totalPoolcharges is " + g);
                    System.out.println("PayRecv is " + h);
                    System.out.println("wrRemarks is " + k);
                    System.out.println("yearId is " + j);
                    System.out.println("prevtotalPoolcharges is " + l);
                    System.out.println("agcdown is " + m);

                    tempuniqueId = tempBillEntityAgcDAO.getMaxUniqueIDtempbillentitysras();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntitySras.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntitySras.setEntites(ent);
                    tempBillEntitySras.setCorporates(corp);
                    tempBillEntitySras.setTotalAgcUpdownMwh(new BigDecimal(c));
                    tempBillEntitySras.setMarkupCharges(new BigDecimal(d));
                    tempBillEntitySras.setTotalnetAgc(new BigDecimal(e));
                    tempBillEntitySras.setAgcEnergycharges(new BigDecimal(f));
                    tempBillEntitySras.setTotalcharges(new BigDecimal(d).add(new BigDecimal(f)));
                    tempBillEntitySras.setPayRecvflag(h);
                    tempBillEntitySras.setRemarks(k);
                    tempBillEntitySras.setBillYear(new BigDecimal(j));
                    tempBillEntitySras.setWeekId(new BigDecimal(weekid));
                    tempBillEntitySras.setRevisionNo(revno);
                    tempBillEntitySras.setWrTotalcharges(new BigDecimal(g));
                    tempBillEntitySras.setBillStatus("Pending");
                    tempBillEntitySras.setPrevWrTotalcharges(new BigDecimal(l));
                    tempBillEntitySras.setTotalAgcDownMwh(new BigDecimal(m));

                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityAgcDAO.NewTempBillSRASEntries(tempBillEntitySras)) {
                            System.out.println("New SRAS entities entires added successfully");
                            String msg = "New SRAS entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                    System.out.println("k is " + k);
                    System.out.println("j is " + j);
                    System.out.println("l is " + l);
                    System.out.println("m is " + m);

                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillAGCDAO.getMaxUniqueIDtempbillsrasdetails();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());

                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");
                    tempBillAGCDAO.NewTempBillSRASDetails(tempBillDetails);
                }
                if (revno.intValue() >= 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillSRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, totalCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        totalCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (totalCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("totalCharges are -ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("SRAS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(totalCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("totalCharges are +ve");
                            System.out.println("totalCharges is " + totalCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("SRAS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(totalCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                }
//                else {
//
//                    payrecList = tempBillreceiveCorpDAO.getTempBillAGC(new BigDecimal(weekid), revno, new BigDecimal(year));
//                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
//                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
//                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();
//
//                    List<BillPayableCorp> listPay = new ArrayList<>();
//                    List<BillReceiveCorp> listRecv = new ArrayList<>();
//
//                    for (Object[] listMW1 : payrecList) {
//                        Object[] row = (Object[]) listMW1;
//                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
//                        BigDecimal mul = new BigDecimal("-1");
//                        Date bdate = null;
//                        weekId = (BigDecimal) row[0];
//                        corpId = (BigDecimal) row[1];
//                        net = (BigDecimal) row[2];
//                        bdate = (Date) row[3];
//                        byear = (BigDecimal) row[4];
//                        int corpInt = corpId.intValue();
//                        revNo = revno;
//                        prerevno = revNo.subtract(BigDecimal.ONE);
//
//                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "AGC", new BigDecimal(year), corpInt);
//                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "AGC", byear, corpInt);
//
//                        if (listPay != null && listPay.size() > 0) {
//
//                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillPayablecorp.setWeekId(weekId);
//                            tempBillPayablecorp.setBillType("AGC");
//                            tempBillPayablecorp.setBillYear(byear);
//                            tempBillPayablecorp.setBillingDate(bdate);
//                            tempBillPayablecorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillPayablecorp.setCorporates(corp);
//                            tempBillPayablecorp.setTotalnet(net);
//                            tempBillPayablecorp.setBillStatus("Pending");
//                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
//                            System.out.println("###Inserted data in Temp Payable Corp Table");
//
//                        }
//
//                        if (listRecv != null && listRecv.size() > 0) {
//                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillReceivecorp.setWeekId(weekId);
//                            tempBillReceivecorp.setBillType("AGC");
//                            tempBillReceivecorp.setBillYear(byear);
//                            tempBillReceivecorp.setBillingDate(bdate);
//                            tempBillReceivecorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillReceivecorp.setCorporates(corp);
//                            tempBillReceivecorp.setToalnet(net);
//                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
//                            tempBillReceivecorp.setBillStatus("Pending");
//                            System.out.println(" tempBillReceivecorp revno is " + revno);
//                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
//                            System.out.println("Inserted data in Temp Receive Corp Table");
//
//                        }
//
//                    }
//                }

                String msg = "SRAS Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyREVUploadSRAS.htm"));

            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadFRAS(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelAGCUpload");
        System.out.println("inside upload FRAS sheet");
        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "FRAS";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        TempBillFRASDetailsDAO tempBillFRASDAO = new TempBillFRASDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillFrasDetails tempBillDetails = new TempBillFrasDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillFRASDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo agc is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillFRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                String a, b, c, d, e, f, g, h, k, j;
                int entity_id = 0;
                int corporate_id = 0;
                String UpRegulation = null;
                String DownRegulation = null;
                String markUpCharges = null;
                String bill_No = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillFrasDetailsDAO billFrasDetlDAO = new BillFrasDetailsDAO();
                BillFrasDetails billFrasDet = new BillFrasDetails();
                TempBillEntityFrasDAO tempBillEntityFrasDAO = new TempBillEntityFrasDAO();
                TempBillEntityFras tempBillEntityFras = new TempBillEntityFras();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billFrasDetlDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {

                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 5;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "FRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Up Regulation due to FRAS (MWh)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Down Regulation due to FRAS (MWh)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Markup Charges as per CERC order (Rs)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct RRAS UP excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill Issue Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 3;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }
                    System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String frasFlag = entDAO.getFrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (frasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not FRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("FRAS", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    UpRegulation = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("UpRegulation is : " + UpRegulation);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    DownRegulation = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("DownRegulation Charges is : " + DownRegulation);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    markUpCharges = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum == 1)) {
                                    System.out.println("inside column 4");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("#### inside column 5 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double Up_Regulation = cell.getNumericCellValue();
                                    UpRegulation = Double.toString(Up_Regulation);
                                    System.out.println("UpRegulation is : " + UpRegulation);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double Down_Regulation = cell.getNumericCellValue();
                                    DownRegulation = Double.toString(Down_Regulation);
                                    System.out.println("totalNetAgc Charges is : " + DownRegulation);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    markUpCharges = Double.toString(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("inside column 5");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(UpRegulation);
                        valSetOne.add(DownRegulation);
                        valSetOne.add(markUpCharges);
                        System.out.println("wr_remarks is " + wr_remarks);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);
                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println(" upRegulation is " + c);
                    System.out.println("downRegulation is " + d);
                    System.out.println("markUpCharges is " + e);
                    System.out.println("wr_remarks is " + f);
                    System.out.println("year is " + g);
                    tempuniqueId = tempBillEntityFrasDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntityFras.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntityFras.setEntites(ent);
                    tempBillEntityFras.setCorporates(corp);
                    tempBillEntityFras.setDownRegulation(new BigDecimal(d));
                    tempBillEntityFras.setUpRegulation(new BigDecimal(c));
                    tempBillEntityFras.setWrMarkupCharges(new BigDecimal(e));
                    tempBillEntityFras.setMarkupCharges(new BigDecimal(c).add(new BigDecimal(d)).multiply(new BigDecimal(100)));
                    tempBillEntityFras.setRemarks(f);
                    tempBillEntityFras.setBillYear(new BigDecimal(g));
                    tempBillEntityFras.setWeekId(new BigDecimal(weekid));
                    tempBillEntityFras.setRevisionNo(revno);

                    tempBillEntityFras.setBillStatus("Pending");
                    //tempBillEntityAgc.setTotalcharges(new BigDecimal(d).add(new BigDecimal(f)));
//                        tempBillEntityAgc.setNetDsm(new BigDecimal(c).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e)))));
//                        System.out.println("Net DSM is: " + (new BigDecimal(c).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e))))));
                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityFrasDAO.NewTempBillFRASEntries(tempBillEntityFras)) {
                            System.out.println("New FRAS entities entires added successfully");
                            String msg = "New FRAS entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillFRASDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");

                    tempBillFRASDAO.NewTempBillFRASDetails(tempBillDetails);
                }

                if (revno.intValue() == 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillFRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, markupCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        markupCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (markupCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("markupCharges are -ve");
                            System.out.println("markupCharges is " + markupCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("FRAS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(markupCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("markupCharges are +ve");
                            System.out.println("markupCharges is " + markupCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("FRAS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(markupCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                } else {
                    payrecList = tempBillreceiveCorpDAO.getTempBillFRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();

                    List<BillPayableCorp> listPay = new ArrayList<>();
                    List<BillReceiveCorp> listRecv = new ArrayList<>();

                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
                        BigDecimal mul = new BigDecimal("-1");
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        net = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        int corpInt = corpId.intValue();
                        revNo = revno;
                        prerevno = revNo.subtract(BigDecimal.ONE);

                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "FRAS", new BigDecimal(year), corpInt);
                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "FRAS", byear, corpInt);

                        if (listPay != null && listPay.size() > 0) {

                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("FRAS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(net);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("###Inserted data in Temp Payable Corp Table");

                        }

                        if (listRecv != null && listRecv.size() > 0) {
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("FRAS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpId.intValue());
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(net);
                            tempBillReceivecorp.setBillStatus("Pending");
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));

                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");

                        }

                    }

                }
                String msg = "FRAS Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadFRAS.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadREVFRAS(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelREVFRASUpload");
        System.out.println("inside Revised upload FRAS sheet");
        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
//        String billType = request.getParameter("billType");
        String billType = "FRAS";
        System.out.println("billType is " + billType);
        int weekIdFlag = 0;
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        TempBillFRASDetailsDAO tempBillFRASDAO = new TempBillFRASDetailsDAO();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillFrasDetails tempBillDetails = new TempBillFrasDetails();
        TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillPayablecorp = new TempBillPayableCorp();
        TempBillReceiveCorpDAO tempBillreceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceivecorp = new TempBillReceiveCorp();
        BigDecimal maxRevNo = tempBillFRASDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year));
        System.out.println("maxRevNo agc is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillFRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
        System.out.println("##########weekIdFlag " + weekIdFlag);
        List<Object[]> payrecList = new ArrayList<Object[]>();
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            if (fromdate != null) {
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<>();
                String a, b, c, d, e, f, g, h, k, j;
                int entity_id = 0;
                int corporate_id = 0;
                String UpRegulation = null;
                String DownRegulation = null;
                String markUpCharges = null;
                String prevmarkUpCharges = null;
                String bill_No = null;
                int uniqueId = 0;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String billing_Date = null;
                String bill_due_date = null;
                String wr_remarks = "No Remarks!!";
                int rowNum = 0;
                BillFrasDetailsDAO billFrasDetlDAO = new BillFrasDetailsDAO();
                BillFrasDetails billFrasDet = new BillFrasDetails();
                TempBillEntityFrasDAO tempBillEntityFrasDAO = new TempBillEntityFrasDAO();
                TempBillEntityFras tempBillEntityFras = new TempBillEntityFras();
                Corporates corp = new Corporates();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                uniqueId = billFrasDetlDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                System.out.println("rows are " + rows);
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {

                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 8;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "FRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Up Regulation due to FRAS (MWh)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Down Regulation due to FRAS (MWh)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Markup Charges as per CERC order (Rs)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct RRAS UP excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill Issue Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "PREVIOUS Markup Charges as per CERC order (Rs)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Revision No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                    }
                                }

                            }
                            if (cellNo != 6) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    } else {
                        cellNum = 8;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (cellNo != 4 && cellNo != 5 && cellNo != 6) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    }
                    System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                String entityName = null;
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String frasFlag = entDAO.getFrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (frasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not FRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("FRAS", "PAYABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    wr_remarks = "No Remarks!!";
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        System.out.println("Empty cell");
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        //Check the cell type and format accordingly
                        System.out.println("cell.getCellType() is " + cell.getCellType() + " @@@@cell.getColumnIndex() " + cell.getColumnIndex());
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    //System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corporate_id = entDAO.getCorporateIDbyName(entityName);
                                    System.out.println("Entity Id obtained:" + entity_id + " Corporate ID obtained : " + corporate_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    UpRegulation = cell.getStringCellValue().trim();
//                                    totalAgcUpDown = Double.parseDouble(agcUpDown);
                                    System.out.println("UpRegulation is : " + UpRegulation);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    DownRegulation = cell.getStringCellValue().trim();
//                                    totalNetAgc = Double.parseDouble(totalNet_Agc);
                                    System.out.println("DownRegulation Charges is : " + DownRegulation);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    markUpCharges = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum == 1)) {
                                    System.out.println("inside column 4");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("#### inside column 5 DATE STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
//                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@@@@@@@@@@@@@@ wr_remarks is @@@@@@@@@@@@@@@@@@@: " + wr_remarks);
                                }

                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    prevmarkUpCharges = cell.getStringCellValue().trim();
//                                    markUpCharges = Double.parseDouble(markUp_Charges);
                                    System.out.println("prevmarkUpCharges is : " + prevmarkUpCharges);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    revno = new BigDecimal(cell.getStringCellValue().trim());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillFRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double Up_Regulation = cell.getNumericCellValue();
                                    UpRegulation = Double.toString(Up_Regulation);
                                    System.out.println("UpRegulation is : " + UpRegulation);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double Down_Regulation = cell.getNumericCellValue();
                                    DownRegulation = Double.toString(Down_Regulation);
                                    System.out.println("totalNetAgc Charges is : " + DownRegulation);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double markUp_Charges = cell.getNumericCellValue();
                                    markUpCharges = Double.toString(markUp_Charges);
                                    System.out.println("markUpCharges is : " + markUpCharges);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("inside column 5");
                                    Date date = cell.getDateCellValue();
                                    System.out.println("@@@@@@ date is " + date);
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 7");
                                    Double prev_markUp_Charges = cell.getNumericCellValue();
                                    prevmarkUpCharges = Double.toString(prev_markUp_Charges);
                                    System.out.println("prevmarkUpCharges is : " + prevmarkUpCharges);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 8");
                                    revno = new BigDecimal(cell.getNumericCellValue());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillFRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year));
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                        }
                    }
                    //Date after adding the days to the given date
                    if (rowNum != 0) {
                        List<String> valSetOne = new ArrayList<>();
                        valSetOne.add(String.valueOf(entity_id));
                        valSetOne.add(String.valueOf(corporate_id));
                        valSetOne.add(UpRegulation);
                        valSetOne.add(DownRegulation);
                        valSetOne.add(markUpCharges);
                        System.out.println("wr_remarks is " + wr_remarks);
                        valSetOne.add(wr_remarks);
                        valSetOne.add(year);
                        valSetOne.add(prevmarkUpCharges);
                        retMap.put(entity_id, (ArrayList<String>) valSetOne);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                System.out.println("retMap size is " + retMap.size());
                System.out.println("retMap1 size is " + retMap1.size());
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    h = values.get(7);
                    System.out.println("entityId is " + a);
                    System.out.println("corporateId is " + b);
                    System.out.println(" upRegulation is " + c);
                    System.out.println("downRegulation is " + d);
                    System.out.println("markUpCharges is " + e);
                    System.out.println("wr_remarks is " + f);
                    System.out.println("year is " + g);
                    System.out.println("prevmarkUpCharges is " + h);
                    tempuniqueId = tempBillEntityFrasDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
//                        Corporates corp = new Corporates();
                    int corporate = Integer.parseInt(b);
                    corp.setCorporateId(corporate);
                    ent.setEntityId(new BigDecimal(key));
                    tempBillEntityFras.setUniqueId(new BigDecimal(tempunqId));
                    tempBillEntityFras.setEntites(ent);
                    tempBillEntityFras.setCorporates(corp);
                    tempBillEntityFras.setDownRegulation(new BigDecimal(d));
                    tempBillEntityFras.setUpRegulation(new BigDecimal(c));
                    tempBillEntityFras.setWrMarkupCharges(new BigDecimal(e));
                    tempBillEntityFras.setMarkupCharges(new BigDecimal(c).add(new BigDecimal(d)).multiply(new BigDecimal(100)));
                    tempBillEntityFras.setRemarks(f);
                    tempBillEntityFras.setBillYear(new BigDecimal(g));
                    tempBillEntityFras.setWeekId(new BigDecimal(weekid));
                    tempBillEntityFras.setRevisionNo(revno);
                    tempBillEntityFras.setPrevWrMarkupCharges(new BigDecimal(h));
                    tempBillEntityFras.setBillStatus("Pending");
                    //tempBillEntityAgc.setTotalcharges(new BigDecimal(d).add(new BigDecimal(f)));
//                        tempBillEntityAgc.setNetDsm(new BigDecimal(c).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e)))));
//                        System.out.println("Net DSM is: " + (new BigDecimal(c).add(new BigDecimal(g).add(new BigDecimal(f).add(new BigDecimal(e))))));
                    System.out.println("@@@@@@@@key is @@@@@" + key);
                    try {
                        if (tempBillEntityFrasDAO.NewTempBillFRASEntries(tempBillEntityFras)) {
                            System.out.println("New FRAS entities entires added successfully");
                            String msg = "New FRAS entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                    System.out.println("a is " + a);
                    System.out.println("b is " + b);
                    System.out.println("c is " + c);
                    System.out.println("d is " + d);
                    System.out.println("e is " + e);
                    System.out.println("f is " + f);
                    System.out.println("g is " + g);
                    System.out.println("h is " + h);
                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    //System.out.println("Values = " + values + "n");
                    String a1 = values.get(0);
                    String b1 = values.get(1);
                    String c1 = values.get(2);
                    String d1 = values.get(3);
                    String e1 = values.get(4);
                    String f1 = values.get(5);
                    String g1 = values.get(6);
                    tempBillUniqueId = tempBillFRASDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillDetails.setBillNo(a1);
                    tempBillDetails.setWeekId(new BigDecimal(b1));
                    tempBillDetails.setBillYear(new BigDecimal(g1));
                    tempBillDetails.setRevisionNo(revno);
                    System.out.println(" tempBillDetails revno is " + revno);
                    tempBillDetails.setWeekFromdate(sdf.parse(c1));
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());
                    tempBillDetails.setWeekTodate(sdf.parse(d1));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    System.out.println("##### billingDate is " + billingDate);
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));

                    tempBillDetails.setBillStatus("Pending");

                    tempBillFRASDAO.NewTempBillFRASDetails(tempBillDetails);
                }

                if (revno.intValue() >= 0) {
                    payrecList = tempBillreceiveCorpDAO.getTempBillFRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
                    for (Object[] listMW1 : payrecList) {
                        Object[] row = (Object[]) listMW1;
                        BigDecimal weekId, corpId, markupCharges, byear, revNo = null;
                        Date bdate = null;
                        weekId = (BigDecimal) row[0];
                        corpId = (BigDecimal) row[1];
                        markupCharges = (BigDecimal) row[2];
                        bdate = (Date) row[3];
                        byear = (BigDecimal) row[4];
                        revNo = revno;
                        int corpInt = corpId.intValue();
                        if (markupCharges.compareTo(BigDecimal.ZERO) == -1) {
                            System.out.println("markupCharges are -ve");
                            System.out.println("markupCharges is " + markupCharges);
                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillPayablecorp.setWeekId(weekId);
                            tempBillPayablecorp.setBillType("FRAS");
                            tempBillPayablecorp.setBillYear(byear);
                            tempBillPayablecorp.setBillingDate(bdate);
                            tempBillPayablecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillPayablecorp.setCorporates(corp);
                            tempBillPayablecorp.setTotalnet(markupCharges);
                            tempBillPayablecorp.setBillStatus("Pending");
                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
                            System.out.println("Inserted data in Temp Payable Corp Table");
                        } else {
                            System.out.println("markupCharges are +ve");
                            System.out.println("markupCharges is " + markupCharges);
                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
                            tempuniqueId = tempuniqueId + 1;
                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
                            tempBillReceivecorp.setWeekId(weekId);
                            tempBillReceivecorp.setBillType("FRAS");
                            tempBillReceivecorp.setBillYear(byear);
                            tempBillReceivecorp.setBillingDate(bdate);
                            tempBillReceivecorp.setRevisionNo(revNo);
                            corp.setCorporateId(corpInt);
                            tempBillReceivecorp.setCorporates(corp);
                            tempBillReceivecorp.setToalnet(markupCharges);
                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
                            tempBillReceivecorp.setBillStatus("Pending");
                            System.out.println(" tempBillReceivecorp revno is " + revno);
                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
                            System.out.println("Inserted data in Temp Receive Corp Table");
                        }
                    }
                }
//                else {
//                    payrecList = tempBillreceiveCorpDAO.getTempBillFRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
//                    System.out.println("$$$$$$$$ payRecList size is " + payrecList.size());
//                    BillPayableCorpDAO billpaucadao = new BillPayableCorpDAO();
//                    BillReceiveCorpDAO billRecvCorpDao = new BillReceiveCorpDAO();
//
//                    List<BillPayableCorp> listPay = new ArrayList<>();
//                    List<BillReceiveCorp> listRecv = new ArrayList<>();
//
//                    for (Object[] listMW1 : payrecList) {
//                        Object[] row = (Object[]) listMW1;
//                        BigDecimal weekId, corpId, net, byear, revNo, prerevno = null;
//                        BigDecimal mul = new BigDecimal("-1");
//                        Date bdate = null;
//                        weekId = (BigDecimal) row[0];
//                        corpId = (BigDecimal) row[1];
//                        net = (BigDecimal) row[2];
//                        bdate = (Date) row[3];
//                        byear = (BigDecimal) row[4];
//                        int corpInt = corpId.intValue();
//                        revNo = revno;
//                        prerevno = revNo.subtract(BigDecimal.ONE);
//
//                        listPay = billpaucadao.getBillPayableCorpDetailsbyWeekId(new BigDecimal(weekid), prerevno, "FRAS", new BigDecimal(year), corpInt);
//                        listRecv = billRecvCorpDao.getBillRecvCorpDetailsbyWeekId(weekId, prerevno, "FRAS", byear, corpInt);
//
//                        if (listPay != null && listPay.size() > 0) {
//
//                            tempuniqueId = tempBillPayableCorpDao.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillPayablecorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillPayablecorp.setWeekId(weekId);
//                            tempBillPayablecorp.setBillType("FRAS");
//                            tempBillPayablecorp.setBillYear(byear);
//                            tempBillPayablecorp.setBillingDate(bdate);
//                            tempBillPayablecorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillPayablecorp.setCorporates(corp);
//                            tempBillPayablecorp.setTotalnet(net);
//                            tempBillPayablecorp.setBillStatus("Pending");
//                            tempBillPayableCorpDao.NewTempBillRRASDetails(tempBillPayablecorp);
//                            System.out.println("###Inserted data in Temp Payable Corp Table");
//
//                        }
//
//                        if (listRecv != null && listRecv.size() > 0) {
//                            tempuniqueId = tempBillreceiveCorpDAO.getMaxUniqueID();
//                            tempuniqueId = tempuniqueId + 1;
//                            tempBillReceivecorp.setUniqueId(new BigDecimal(tempuniqueId));
//                            tempBillReceivecorp.setWeekId(weekId);
//                            tempBillReceivecorp.setBillType("FRAS");
//                            tempBillReceivecorp.setBillYear(byear);
//                            tempBillReceivecorp.setBillingDate(bdate);
//                            tempBillReceivecorp.setRevisionNo(revNo);
//                            corp.setCorporateId(corpId.intValue());
//                            tempBillReceivecorp.setCorporates(corp);
//                            tempBillReceivecorp.setToalnet(net);
//                            tempBillReceivecorp.setBillStatus("Pending");
//                            tempBillReceivecorp.setBillDueDate(sdf.parse(bill_due_date));
//
//                            System.out.println(" tempBillReceivecorp revno is " + revno);
//                            tempBillreceiveCorpDAO.NewTempBillRRASDetails(tempBillReceivecorp);
//                            System.out.println("Inserted data in Temp Receive Corp Table");
//
//                        }
//
//                    }
//
//                }
                String msg = "FRAS Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                System.out.println("!@#!@#weekid is " + weekid);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyREVUploadFRAS.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID!! ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView verifyREVUploadFRAS(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadFRAS");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillFRASDetailsDAO tempBillFRASDAO = new TempBillFRASDetailsDAO();
        BigDecimal maxRevNo = tempBillFRASDAO.getMaxRevNoByWeekId(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillFrasDetails> tempbilfrasdetls = tempBillFRASDAO.gettempfrasdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityFrasDAO tempbillEntityFrasDAO = new TempBillEntityFrasDAO();
        BillEntityFrasDAO billEntityFrasDAO = new BillEntityFrasDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillFrasDetailsDAO billFrasDetailsDAO = new BillFrasDetailsDAO();
        BillEntityFras billEntFRAS = new BillEntityFras();
        BillFrasDetails billFrasDetails = new BillFrasDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billFrasList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillFRASDAO.getBillNobyWeekIdandRevisionNo(weekid, rev, yearid);
        Date billingDate = tempBillFRASDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date fromDate = tempBillFRASDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date toDate = tempBillFRASDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityFrasDAO.getTempFRASBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            //if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            payRecList = billEntityFrasDAO.getTempFRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payRecList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal uId, entityId, markUpCharges, upRegulation, downRegulation, billYear, revNo, weekId, corpId = null;
                String remarks = null;
                uId = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                entityId = (BigDecimal) row[2];
                corpId = (BigDecimal) row[3];
                upRegulation = (BigDecimal) row[4];
                downRegulation = (BigDecimal) row[5];
//                markUpCharges = (BigDecimal) row[6];
                markUpCharges = (BigDecimal) row[7];

                billYear = (BigDecimal) row[8];
                revNo = (BigDecimal) row[9];
                remarks = (String) row[10];
                uniqueId = billEntityFrasDAO.getMaxUniqueIDFras();
                uniqueId = uniqueId + 1;
                billEntFRAS.setUniqueId(new BigDecimal(uniqueId));
                billEntFRAS.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntFRAS.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntFRAS.setCorporates(corp);
                billEntFRAS.setUpRegulation(upRegulation);
                billEntFRAS.setDownRegulation(downRegulation);
                billEntFRAS.setMarkupCharges(markUpCharges);
                billEntFRAS.setRevisionNo(revNo);
                billEntFRAS.setBillYear(billYear);
                billEntFRAS.setRemarks(remarks);
                billEntityFrasDAO.NewBillFRASEntries(billEntFRAS);

                tempbillEntityFrasDAO.updatetempbillentityfrasstatus();
                System.out.println("Entries successfully added in Bill FRAS Entites table");
            }
            billFrasList = billFrasDetailsDAO.getTempFRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billFrasList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billFrasDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billFrasDetails.setUniqueId(new BigDecimal(uniqueId));
                billFrasDetails.setWeekId(weekId);
                billFrasDetails.setWeekFromdate(weekFromDate);
                billFrasDetails.setWeekTodate(weekToDate);
                billFrasDetails.setBillingDate(bDate);
                billFrasDetails.setRevisionNo(revNo);
                billFrasDetails.setBillYear(year);
                billFrasDetails.setBillDueDate(billDueDate);
                billFrasDetails.setRemarks((String) row[8]);
                billFrasDetails.setBillNo((String) row[9]);
                billFrasDetails.setEntryDate((Timestamp) row[10]);

                billFrasDetailsDAO.NewBillFRASDetailsEntries(billFrasDetails);

                tempBillFRASDAO.updatetempbillfrasdetailsstatus();
                System.out.println("Entries successfully added in Bill FRAS Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("FRAS", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("FRAS", "RECEIVABLE", fromDate);
            String billType = "FRAS";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;
                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableFRASforprevnet(weekId, revNo, year, corporateId);
                    System.out.println("prevtotalnet is " + prevtotalnet);

                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();
                        BigDecimal prevnetTotal = prevtotalnet;
                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.multiply(mul).subtract(prevnetTotal.multiply(mul));

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);

                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "FRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "FRAS");
                        billEntityFrasDAO.deleteBillEntityFRASbyWeekIdRevNoYear(weekId, revNo, year);
                        billFrasDetailsDAO.deleteBillFRASDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("FRAS");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);

                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);
                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;
                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableFRASforprevnet(weekId, revNo, year, corpId.intValue());

                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                        prevnetTotal = listprebillcorp.get(0).getToalnet();
                        prevnetTotal = prevtotalnet;

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "FRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "FRAS");
                        billEntityFrasDAO.deleteBillEntityFRASbyWeekIdRevNoYear(weekId, revNo, year);
                        billFrasDetailsDAO.deleteBillFRASDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());
                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

//                    if (revNo.compareTo(BigDecimal.ZERO) == 1) {
//                        BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
//                        System.out.println("$$$$$$preRevNo is " + preRevNo);
//
//                        List<BillReceiveCorp> listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());
//
//                        BigDecimal orgPendingamt = null;
//
//                        BigDecimal prevnetTotal = null;
//
////                        prevnetTotal=listprebillcorp.get(0).getToalnet();
//                        if (listprebillcorp != null && listprebillcorp.size() > 0) {
//                            prevnetTotal = listprebillcorp.get(0).getToalnet();
//
//                        } else {
//                            String msg = "Please check the Entities and upload again for Week ID: " + weekId;
//                            tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
//                            tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
//                            tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "FRAS");
//                            tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "FRAS");
//                            billEntityFrasDAO.deleteBillEntityFRASbyWeekIdRevNoYear(weekId, revNo, year);
//                            billFrasDetailsDAO.deleteBillFRASDetailsbyWeekIdRevNoYear(weekId, revNo, year);
//                            billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
//                            billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
//
//                            mav2.addObject("Msg", msg);
//                            return mav2;
//
//                        }
//
//                        orgPendingamt = (net).subtract(prevnetTotal);
//                        BigDecimal totadisamt = billRecieveCorpDAO.getTotalDisbursedAmtByCorpWeekYearRevNo(weekId, year, corpId.intValue(), BillType);
//
//                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
//                        BigDecimal pendingAmt = net;
//                        System.out.println("%%%%%pendingAmt is " + pendingAmt);
//                        if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
//                            System.out.println("@@@@@pendingAmt > BigDecimal.ZERO @@@");
//                            billRecieveCorp.setRevisedpaybale(orgPendingamt);
//                            billRecieveCorp.setPendingAmount(orgPendingamt);
//                            billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                            billRecieveCorp.setDisburseStatus("NOT PAID");
//
//                        } else if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
//                            System.out.println("@@@@@pendingAmt < BigDecimal.ZERO @@@");
//
//                            System.out.println("Total sum disbused amount@" + totadisamt);
//
//                            BigDecimal diffnetpaid = (net).subtract(totadisamt);
//
//                            if (diffnetpaid.intValue() > 0) {
//
//                                billRecieveCorp.setRevisedpaybale(diffnetpaid);
//                                billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                                billRecieveCorp.setPendingAmount(diffnetpaid);
//                                billRecieveCorp.setDisburseStatus("NOT PAID");
//                                billRecieveCorp.setDisburseAmount(totadisamt);
//
////                                for (int i = 0; i < revNo.intValue(); i++) {
////                                    List<BillReceiveCorp> listrecv = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, new BigDecimal(i), BillType, year, corpId.intValue());
////                                    BigDecimal bgupdatedis = listrecv.get(0).getDisburseAmount().add(listrecv.get(0).getPendingAmount());
////                                    billRecieveCorpDAO.getUpdatePaidAmtbyCorpWeekYearRevNoOnupload(weekId, year, corpId.intValue(), BillType, i, bgupdatedis);
////                                }
//                            }
//
//                            if (diffnetpaid.intValue() < 0) {
//                                billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
//                                billRecieveCorp.setRevisedrefund(diffnetpaid.negate());
//                                billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
//                                billRecieveCorp.setDisburseStatus("REFUND");
//                                billRecieveCorp.setDisburseAmount(totadisamt);
////                                for (int i = 0; i < revNo.intValue(); i++) {
////                                    List<BillReceiveCorp> listrecv = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, new BigDecimal(i), BillType, year, corpId.intValue());
////                                    BigDecimal bgupdatedis = listrecv.get(0).getDisburseAmount().add(listrecv.get(0).getPendingAmount());
////                                    billRecieveCorpDAO.getUpdatePaidAmtbyCorpWeekYearRevNoOnupload(weekId, year, corpId.intValue(), BillType, i, bgupdatedis);
////                                }
//
//                            }
//
//                            if (diffnetpaid.intValue() == 0) {
//                                billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
//                                billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                                billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
//                                billRecieveCorp.setDisburseStatus("PAID");
//                                billRecieveCorp.setDisburseAmount(totadisamt);
//
//                            }
//
//                        } else {
//                            System.out.println("@@@@@ pendingAmt = BigDecimal.ZERO @@@");
//                            billRecieveCorp.setDisburseStatus("PAID");
//                            billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
//                            billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                            billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
//                            billRecieveCorp.setDisburseAmount(totadisamt);
//                        }
//                    }
                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("FRAS");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("FRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }

        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("saveBtn" + saveBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from FRAS ENTITY TEMP TABLE");
            if (tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "FRAS"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "FRAS"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempbilfrasdetls", tempbilfrasdetls);
        return mav1;
    }

    public ModelAndView uploadRRASReceivable(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelRRASReceivableUpload");
        HttpSession session = request.getSession();
        System.out.println("inside upload RRAS receivable sheet");
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        String billType = request.getParameter("billType");
        System.out.println("billType is " + billType);
        String wr_net_rras = null;
//        String wr_remarks = "No Remarks!!";
        int weekIdFlag = 0;
        List<Object[]> recList = new ArrayList<Object[]>();
        TempBillRRASDetailsDAO tempBillRRASDAO = new TempBillRRASDetailsDAO();
        TempBillReceiveCorpDAO tempBillReceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceiveCorp = new TempBillReceiveCorp();
        Corporates corp = new Corporates();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillRrasDetails tempBillDetails = new TempBillRrasDetails();
        BigDecimal maxRevNo = tempBillRRASDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year), "RECEIVABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "RECEIVABLE");
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            System.out.println("New record !!");
            if (fromdate != null) {
//                System.out.println("year obtained is " + year);
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<Integer, ArrayList<String>>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<Integer, ArrayList<String>>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, j = null;
                int entity_id = 0;
                int corpotare_id = 0;
                String entityId = null;
                String corporateId = null;
                String energy_vae = null;
                String variable_Charges = null;
                String fixed_Charges = null;
                String markup_Charges = null;
                String billing_Date = null;
                String bill_No = null;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String bill_due_date = null;
                int rowNum = 0;
                String wr_remarks = "No Remarks!!";
                TempBillReceiveEntityRRASDAO tempbillDAO = new TempBillReceiveEntityRRASDAO();
                TempBillReceiveEntityRras TempBill = new TempBillReceiveEntityRras();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 7;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "RRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Energy Scheduled to VAE under RRAS";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Fixed Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Variable Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "MarkUp as per CERC order";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Total Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill Issue Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 5;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }

                    System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        int t = 1;
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);

                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String rrasFlag = entDAO.getRrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (rrasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not RRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                System.out.println("rows are " + rows);
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "RECEIVABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corpotare_id = entDAO.getCorporateIDbyName(entityName);
                                    entityId = Integer.toString(entity_id);
                                    corporateId = Integer.toString(corpotare_id);
                                    System.out.println("Entity Id obtained:" + entityId + " Corporate ID obtained : " + corpotare_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    energy_vae = cell.getStringCellValue().trim();
                                    System.out.println("energy_vae is : " + energy_vae);
                                    if (energy_vae == null) {
                                        energy_vae = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    fixed_Charges = cell.getStringCellValue().trim();
                                    System.out.println("fixed_Charges is : " + fixed_Charges);
                                    if (fixed_Charges == null) {
                                        fixed_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    variable_Charges = cell.getStringCellValue().trim();
                                    System.out.println("variable_Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    markup_Charges = cell.getStringCellValue();
                                    System.out.println("markup_Charges is : " + markup_Charges);
                                    if (markup_Charges == null) {
                                        markup_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= 1) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                    if (bill_No == null) {
                                        bill_No = "Bill_No";
                                    }
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("#### inside column 7 STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ Billing date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println("##### STRING DATE #####  UPLOAD PAYABLE RRAS bill_due_date " + bill_due_date);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 8");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("wr_remarks is : " + wr_remarks);
                                    if (wr_remarks == null) {
                                        wr_remarks = "No Remarks!!";
                                    }
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    wr_net_rras = cell.getStringCellValue().trim();
                                    System.out.println("wr_net_rras is : " + wr_net_rras);

                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double energyVae = cell.getNumericCellValue();
                                    energy_vae = String.valueOf(energyVae);
                                    System.out.println("energy_vae is : " + energy_vae);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double fixedCharges = cell.getNumericCellValue();
                                    fixed_Charges = String.valueOf(fixedCharges);
                                    System.out.println("fixed_Charges is : " + fixed_Charges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double variableCharges = cell.getNumericCellValue();
                                    variable_Charges = String.valueOf(variableCharges);
                                    System.out.println("variable_Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    Double markupCharges = cell.getNumericCellValue();
                                    markup_Charges = String.valueOf(markupCharges);
                                    System.out.println("markup_Charges is : " + markup_Charges);
                                    if (markup_Charges == null) {
                                        markup_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 6");
                                    Date date = cell.getDateCellValue();
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 8");
                                    Double wrNetRras = cell.getNumericCellValue();
                                    wr_net_rras = String.valueOf(wrNetRras);
                                    System.out.println("wr_net_rras is : " + wr_net_rras);

                                }
                        }
                    }
                    if (rowNum != 0) {
                        ArrayList<String> valSetOne = new ArrayList<String>();
                        valSetOne.add(entityId);
                        remarksDetail.put(entity_id, wr_remarks);
                        wr_remarks = "No Remarks !!";
                        System.out.println("corporate id inside arraylist :" + Integer.parseInt(corporateId));
                        valSetOne.add(corporateId);
                        valSetOne.add(energy_vae);
                        valSetOne.add(fixed_Charges);
                        valSetOne.add(variable_Charges);
                        valSetOne.add(markup_Charges);
                        valSetOne.add(year);
                        valSetOne.add(wr_net_rras);
                        retMap.put(entity_id, valSetOne);
                        //remarksDetail.put(entity_id, wr_remarks);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    j = values.get(7);
                    tempuniqueId = tempbillDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
                    System.out.println("cororate id is:" + Integer.parseInt(corporateId));
                    ent.setEntityId(new BigDecimal(key));
                    TempBill.setUniqueId(new BigDecimal(tempunqId));
                    TempBill.setEntites(ent);
                    corp.setCorporateId(Integer.parseInt(b));
                    TempBill.setCorporates(corp);
                    TempBill.setEnergyVae(new BigDecimal(c));
                    TempBill.setFixedCharges(new BigDecimal(d));
                    TempBill.setVariableCharges(new BigDecimal(e));
                    TempBill.setWeekId(new BigDecimal(weekid));
                    TempBill.setMarkupCharges(new BigDecimal(f));
                    TempBill.setRevisionNo(revno);
                    TempBill.setBillYear(new BigDecimal(g));
                    TempBill.setWrNetRras(new BigDecimal(j));
                    TempBill.setNetRras(new BigDecimal(d).add(new BigDecimal(e).add(new BigDecimal(f))));

                    TempBill.setBillStatus("Pending");
                    System.out.println("Net RRSA RECV is: " + (new BigDecimal(d).add(new BigDecimal(e).add(new BigDecimal(f)))));
//                    TempBill.setRemarks("Original");
                    if (remarksDetail.containsKey(key)) {
                        String remark = remarksDetail.get(key);
                        TempBill.setRemarks(remark);
                    }
                    try {
                        if (tempbillDAO.NewTempBillReceiveRRASEntries(TempBill)) {
                            System.out.println("New RRAS receive entires added successfully");
                            String msg = "New RRAS receive entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                }
                if (weekIdFlag == 0) {
                    for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                        Integer key = entry.getKey();
                        List<String> values = entry.getValue();
                        System.out.println("Key = " + key);
                        a = values.get(0);
                        b = values.get(1);
                        c = values.get(2);
                        d = values.get(3);
                        e = values.get(4);
                        f = values.get(5);
                        g = values.get(6);
                        tempBillUniqueId = tempBillRRASDAO.getMaxUniqueID();
                        tempBillUniqueId = tempBillUniqueId + 1;
                        tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                        tempBillDetails.setBillNo(a);
                        tempBillDetails.setWeekId(new BigDecimal(b));
                        tempBillDetails.setBillYear(new BigDecimal(g));
                        tempBillDetails.setRevisionNo(revno);
                        tempBillDetails.setWeekFromdate(sdf.parse(c));
                        tempBillDetails.setWeekTodate(sdf.parse(d));
                        if (remarksDetail.containsKey(key)) {
                            String remark = remarksDetail.get(key);
                            System.out.println("value for key" + key + " is:- " + remark);
                            TempBill.setRemarks(remark);
                        }
                        if (revno == BigDecimal.ZERO) {
                            tempBillDetails.setRemarks("Original");
                        } else {
                            tempBillDetails.setRemarks("Revised");
                        }
                        tempBillDetails.setBillCategory("RECEIVABLE");
                        tempBillDetails.setBillingDate(billingDate);
                        tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));
                        Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                        tempBillDetails.setEntryDate(currentTimestamp);
                        tempBillDetails.setBillStatus("Pending");
//                        tempBillDetails.setEntryDate(new Date());
                        tempBillRRASDAO.NewTempBillRRASDetails(tempBillDetails);
                    }
                }
                recList = tempBillReceiveCorpDAO.getTempBillReceiveRRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                System.out.println("%%%%%%%%%% recList size is " + recList.size());
                int count = 1;
                for (Object[] listMW1 : recList) {
                    System.out.println("count is " + count);
                    count = count + 1;
                    Object[] row = (Object[]) listMW1;
                    BigDecimal weekId, corpId, net, byear, revNo = null;
                    Date bdate = null;
                    weekId = (BigDecimal) row[0];
                    corpId = (BigDecimal) row[1];
                    net = (BigDecimal) row[2];
                    System.out.println("@@@@@@@ ##### net recv amount is " + net);
                    bdate = (Date) row[3];
                    byear = (BigDecimal) row[4];
                    revNo = (BigDecimal) row[5];
//                    System.out.println("revno is " + revno + " and revNo is " + revNo);
                    tempBillUniqueId = tempBillReceiveCorpDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillReceiveCorp.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillReceiveCorp.setWeekId(weekId);
                    tempBillReceiveCorp.setBillType("RRAS");
                    tempBillReceiveCorp.setBillYear(byear);
                    tempBillReceiveCorp.setBillingDate(bdate);
                    tempBillReceiveCorp.setRevisionNo(revno);
                    corp.setCorporateId(corpId.intValue());
                    tempBillReceiveCorp.setCorporates(corp);
                    tempBillReceiveCorp.setToalnet(net);
                    tempBillReceiveCorp.setBillStatus("Pending");
                    tempBillReceiveCorpDAO.NewTempBillRRASDetails(tempBillReceiveCorp);
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                String msg = "RRAS Receivable Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadRRASReceivable.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadRRASPayable(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelRRASPayableUpload");
        System.out.println("inside upload RRAS payable sheet");
        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        BigDecimal revno = BigDecimal.ZERO;
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        String billType = request.getParameter("billType");
        System.out.println("billType is " + billType);
        BigDecimal yearid = new BigDecimal(year);
        System.out.println("yearid in Upload method is " + yearid);
        int weekIdFlag = 0;
        int entityFlag = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Corporates corp = new Corporates();
        TempBillRrasDetails tempBillDetails = new TempBillRrasDetails();
        TempBillPayableCorpDAO tempBillRRASCorp = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillcorp = new TempBillPayableCorp();
        List<Object[]> payList = new ArrayList<Object[]>();
        EntityDAO entDAO = new EntityDAO();
        TempBillPayableEntityRRASDAO tempbillDAO = new TempBillPayableEntityRRASDAO();
        TempBillRRASDetailsDAO tempBillRRASDAO = new TempBillRRASDetailsDAO();
        Map<Integer, ArrayList<String>> retMap1 = new HashMap<Integer, ArrayList<String>>();
        String a, b, c, d, e, f, g, j, bill_No = null;
        String bill_due_date = null;
        String billing_Date = null;
        Date billingDate = null;
        BigDecimal maxRevNo = tempBillRRASDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year), "PAYABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("revno+1 is " + revno);
        weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "PAYABLE");
        System.out.println("weekIdFlag is " + weekIdFlag);
        if (weekIdFlag == 0) {
            System.out.println("New record !!");
            if (fromdate != null) {
                System.out.println("year obtained is " + year);
                int Year = Integer.parseInt(year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<Integer, ArrayList<String>>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                int entity_id = 0;
                int corpotare_id = 0;
                String entityId = null;
                String corporateId = null;
                String energy_vae = null;
                String variable_Charges = null;
                String wr_remarks = "No Remarks !!";
                int tempuniqueId = 0;
                String wr_net_rras = null;
                String tempunqId = null;
                BigDecimal mul = new BigDecimal("0.75");
                int rowNum = 0;
                TempBillPayableEntityRras TempBill = new TempBillPayableEntityRras();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 5;

                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            System.out.println("cell no is  " + cellNo);
                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();
                                    System.out.println("cell.getColumnIndex() s  " + cell.getColumnIndex());

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "RRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Energy Scheduled to VAE under RRAS(MWh)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total Variable Charges for generation reduced (Rs) (A)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC NET RRAS";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill Issue Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }

                                    }
                                }

                            }

                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    } else {
                        cellNum = 3;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                    }
                    System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String rrasFlag = entDAO.getRrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (rrasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not RRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }

                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                System.out.println("sdf.parse(fromdate)=" + sdf.parse(fromdate));
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "PAYABLE", sdf.parse(fromdate));
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    entityFlag = entDAO.checkExistenceOfEntityName(entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corpotare_id = entDAO.getCorporateIDbyName(entityName);
                                    entityId = Integer.toString(entity_id);
                                    corporateId = Integer.toString(corpotare_id);
                                    System.out.println("Entity Id obtained:" + entityId + " Corporate ID obtained : " + corpotare_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    energy_vae = cell.getStringCellValue().trim();
                                    System.out.println("energy vae scheduled is : " + energy_vae);
                                    if (energy_vae == null) {
                                        energy_vae = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    variable_Charges = cell.getStringCellValue().trim();
                                    System.out.println("Variable Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= 1) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                    if (bill_No == null) {
                                        bill_No = "Bill_No";
                                    }
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("#### inside column 5 STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ Billing date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println("##### STRING DATE #####  UPLOAD PAYABLE RRAS bill_due_date " + bill_due_date);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("wr_remarks is : " + wr_remarks);
                                    if (wr_remarks == null) {
                                        wr_remarks = "No Remarks!!";
                                    }
                                }

                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    wr_net_rras = cell.getStringCellValue().trim();
                                    System.out.println("wr_net_rras is : " + wr_net_rras);

                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double energyVae = cell.getNumericCellValue();
                                    energy_vae = String.valueOf(energyVae);
                                    System.out.println("energy vae scheduled is : " + energy_vae);
                                    if (energy_vae == null) {
                                        energy_vae = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double variableCharges = cell.getNumericCellValue();
                                    variable_Charges = String.valueOf(variableCharges);
                                    System.out.println("Variable Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("inside column 5");
                                    Date date = cell.getDateCellValue();
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(" ##### DATE ##### UPLOAD PAYABLE RRAS bill_due_date " + bill_due_date);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double wrNetRras = cell.getNumericCellValue();
                                    wr_net_rras = String.valueOf(wrNetRras);
                                    System.out.println("################wr_net_rras is #############: " + wr_net_rras);

                                }
                        }
                    }
                    if (rowNum != 0) {
                        ArrayList<String> valSetOne = new ArrayList<String>();
                        remarksDetail.put(entity_id, wr_remarks);
                        wr_remarks = "No Remarks !!";
                        valSetOne.add(entityId);
                        valSetOne.add(corporateId);
                        valSetOne.add(energy_vae);
                        valSetOne.add(variable_Charges);
                        valSetOne.add(year);
                        valSetOne.add(wr_net_rras);
                        retMap.put(entity_id, valSetOne);
                        System.out.println(" @@@@@@@@@@@@@@@@entity_id is " + entity_id + "and wr_remarks is " + wr_remarks);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    j = values.get(5);
                    System.out.println("setWrNetRras is " + j);
                    tempuniqueId = tempbillDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
                    corp.setCorporateId(Integer.parseInt(b));
                    ent.setEntityId(new BigDecimal(key));
                    TempBill.setUniqueId(new BigDecimal(tempunqId));
                    TempBill.setEntites(ent);
                    TempBill.setCorporates(corp);
                    TempBill.setEnergyVae(new BigDecimal(c));
                    TempBill.setVariableCharges(new BigDecimal(d));
                    TempBill.setWeekId(new BigDecimal(weekid));
                    TempBill.setNetRras(new BigDecimal(d).multiply(mul));
                    if (remarksDetail.containsKey(key)) {
                        String remark = remarksDetail.get(key);
                        TempBill.setRemarks(remark);
                    }
                    TempBill.setRevisionNo(revno);
                    TempBill.setBillYear(new BigDecimal(e));
                    TempBill.setWrNetRras(new BigDecimal(j));
                    TempBill.setBillStatus("Pending");
                    System.out.println("Net RRAS is: " + (new BigDecimal(d).multiply(mul)));
                    try {
                        if (tempbillDAO.NewTempBillPayableRRASEntries(TempBill)) {
                            System.out.println("New RRAS Payable entires added successfully");
                            String msg = "New RRAS Payable entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    tempuniqueId = tempBillRRASDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempuniqueId));
                    tempBillDetails.setBillNo(a);
                    tempBillDetails.setWeekId(new BigDecimal(b));
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());
                    tempBillDetails.setBillYear(new BigDecimal(g));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    tempBillDetails.setRevisionNo(revno);
//                    tempBillDetails.setRevisionNo(new BigDecimal("0"));
                    tempBillDetails.setWeekFromdate(sdf.parse(c));
                    tempBillDetails.setWeekTodate(sdf.parse(d));
//                    tempBillDetails.setRemarks("original");
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));
                    tempBillDetails.setBillCategory("PAYABLE");
                    tempBillDetails.setBillStatus("Pending");
                    tempBillRRASDAO.NewTempBillRRASDetails(tempBillDetails);
                }
                payList = tempBillRRASCorp.getTempBillPayableRRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
//                System.out.println("$$$$$$$payList size is " + payList.size());
                for (Object[] listMW1 : payList) {
                    Object[] row = (Object[]) listMW1;
                    BigDecimal weekId, corpId, net, byear, revNo = null;
                    Date bdate = null;
                    weekId = (BigDecimal) row[0];
                    corpId = (BigDecimal) row[1];
                    net = (BigDecimal) row[2];
                    bdate = (Date) row[3];
                    byear = (BigDecimal) row[4];
                    revNo = (BigDecimal) row[5];
                    tempuniqueId = tempBillRRASCorp.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempBillcorp.setUniqueId(new BigDecimal(tempuniqueId));
                    tempBillcorp.setWeekId(weekId);
                    tempBillcorp.setBillType("RRAS");
                    tempBillcorp.setBillYear(byear);
                    tempBillcorp.setBillingDate(bdate);
                    tempBillcorp.setRevisionNo(revNo);
                    corp.setCorporateId(corpId.intValue());
                    tempBillcorp.setCorporates(corp);
                    tempBillcorp.setTotalnet(net);
                    tempBillcorp.setBillStatus("Pending");
                    if (revno == BigDecimal.ZERO) {
                        tempBillcorp.setRemarks("Original");
                    } else {
                        tempBillcorp.setRemarks("Revised");
                    }
                    tempBillRRASCorp.NewTempBillRRASDetails(tempBillcorp);
                }
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyUploadRRASPayable.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadREVRRASReceivable(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelREVRRASReceivableUpload");
        HttpSession session = request.getSession();
        System.out.println("inside upload REV RRAS receivable sheet");
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        String billType = request.getParameter("billType");
        System.out.println("billType is " + billType);
        String wr_net_rras = null;
//        String wr_remarks = "No Remarks!!";
        int weekIdFlag = 0;
        List<Object[]> recList = new ArrayList<Object[]>();
        TempBillRRASDetailsDAO tempBillRRASDAO = new TempBillRRASDetailsDAO();
        TempBillReceiveCorpDAO tempBillReceiveCorpDAO = new TempBillReceiveCorpDAO();
        TempBillReceiveCorp tempBillReceiveCorp = new TempBillReceiveCorp();
        Corporates corp = new Corporates();
        BigDecimal revno = BigDecimal.ZERO;
        TempBillRrasDetails tempBillDetails = new TempBillRrasDetails();
        BigDecimal maxRevNo = tempBillRRASDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year), "RECEIVABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("DAO revno+1 is " + revno);
        weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "RECEIVABLE");
        Date billingDate = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (weekIdFlag == 0) {
            System.out.println("New record !!");
            if (fromdate != null) {
//                System.out.println("year obtained is " + year);
                int Year = Integer.parseInt(year);
                System.out.println(" year obained is " + Year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<Integer, ArrayList<String>>();
                Map<Integer, ArrayList<String>> retMap1 = new HashMap<Integer, ArrayList<String>>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                String a, b, c, d, e, f, g, j, k = null;
                int entity_id = 0;
                int corpotare_id = 0;
                String entityId = null;
                String corporateId = null;
                String energy_vae = null;
                String variable_Charges = null;
                String fixed_Charges = null;
                String markup_Charges = null;
                String prev_net_rras = null;
                String billing_Date = null;
                String bill_No = null;
                int tempuniqueId = 0;
                int tempBillUniqueId = 0;
                String tempunqId = null;
                String bill_due_date = null;
                int rowNum = 0;
                String wr_remarks = "No Remarks!!";
                TempBillReceiveEntityRRASDAO tempbillDAO = new TempBillReceiveEntityRRASDAO();
                TempBillReceiveEntityRras TempBill = new TempBillReceiveEntityRras();
                EntityDAO entDAO = new EntityDAO();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 11;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "RRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Energy Scheduled to VAE under RRAS";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Fixed Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Variable Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "MarkUp as per CERC order";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Total Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill Issue Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 9) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "PREVIOUS Total Charges";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 9");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 10) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Revision No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 10");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }
                            if (cellNo != 8) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    } else {
                        cellNum = 10;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (cellNo != 6 && cellNo != 7 && cellNo != 8) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    }

                    System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        int t = 1;
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);

                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String rrasFlag = entDAO.getRrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (rrasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not RRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }
                rowIterator = sheet.iterator();
                System.out.println("rows are " + rows);
                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "RECEIVABLE", sdf.parse(fromdate));
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corpotare_id = entDAO.getCorporateIDbyName(entityName);
                                    entityId = Integer.toString(entity_id);
                                    corporateId = Integer.toString(corpotare_id);
                                    System.out.println("Entity Id obtained:" + entityId + " Corporate ID obtained : " + corpotare_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    energy_vae = cell.getStringCellValue().trim();
                                    System.out.println("energy_vae is : " + energy_vae);
                                    if (energy_vae == null) {
                                        energy_vae = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    fixed_Charges = cell.getStringCellValue().trim();
                                    System.out.println("fixed_Charges is : " + fixed_Charges);
                                    if (fixed_Charges == null) {
                                        fixed_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    variable_Charges = cell.getStringCellValue().trim();
                                    System.out.println("variable_Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    markup_Charges = cell.getStringCellValue();
                                    System.out.println("markup_Charges is : " + markup_Charges);
                                    if (markup_Charges == null) {
                                        markup_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= 1) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                    if (bill_No == null) {
                                        bill_No = "Bill_No";
                                    }
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("#### inside column 7 STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ Billing date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println("##### STRING DATE #####  UPLOAD PAYABLE RRAS bill_due_date " + bill_due_date);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 8");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("wr_remarks is : " + wr_remarks);
                                    if (wr_remarks == null) {
                                        wr_remarks = "No Remarks!!";
                                    }
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 5");
                                    wr_net_rras = cell.getStringCellValue().trim();
                                    System.out.println("wr_net_rras is : " + wr_net_rras);

                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    prev_net_rras = cell.getStringCellValue().trim();
//                                    Prev_Net_Rras = Double.parseDouble(prevNetDsm);
                                    System.out.println("Prev_Net_Rras is : " + prev_net_rras);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getStringCellValue().trim());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "RECEIVABLE");
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double energyVae = cell.getNumericCellValue();
                                    energy_vae = String.valueOf(energyVae);
                                    System.out.println("energy_vae is : " + energy_vae);
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double fixedCharges = cell.getNumericCellValue();
                                    fixed_Charges = String.valueOf(fixedCharges);
                                    System.out.println("fixed_Charges is : " + fixed_Charges);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double variableCharges = cell.getNumericCellValue();
                                    variable_Charges = String.valueOf(variableCharges);
                                    System.out.println("variable_Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    Double markupCharges = cell.getNumericCellValue();
                                    markup_Charges = String.valueOf(markupCharges);
                                    System.out.println("markup_Charges is : " + markup_Charges);
                                    if (markup_Charges == null) {
                                        markup_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 7 && (rowNum == 1)) {
                                    System.out.println("inside column 6");
                                    Date date = cell.getDateCellValue();
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(bill_due_date);
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 8");
                                    Double wrNetRras = cell.getNumericCellValue();
                                    wr_net_rras = String.valueOf(wrNetRras);
                                    System.out.println("wr_net_rras is : " + wr_net_rras);

                                }
                                if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    Double prevNetRras = cell.getNumericCellValue();
                                    prev_net_rras = String.valueOf(prevNetRras);
                                    System.out.println("Prev_Net_Rras is : " + prev_net_rras);
                                }
                                if (cell.getColumnIndex() == 10 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getNumericCellValue());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "RECEIVABLE");
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                        }
                    }
                    if (rowNum != 0) {
                        ArrayList<String> valSetOne = new ArrayList<String>();
                        valSetOne.add(entityId);
                        remarksDetail.put(entity_id, wr_remarks);
                        wr_remarks = "No Remarks !!";
                        System.out.println("corporate id inside arraylist :" + Integer.parseInt(corporateId));
                        valSetOne.add(corporateId);
                        valSetOne.add(energy_vae);
                        valSetOne.add(fixed_Charges);
                        valSetOne.add(variable_Charges);
                        valSetOne.add(markup_Charges);
                        valSetOne.add(year);
                        valSetOne.add(wr_net_rras);
                        valSetOne.add(prev_net_rras);
                        retMap.put(entity_id, valSetOne);
                        remarksDetail.put(entity_id, wr_remarks);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    j = values.get(7);
                    k = values.get(8);
                    tempuniqueId = tempbillDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
                    System.out.println("cororate id is:" + Integer.parseInt(corporateId));
                    ent.setEntityId(new BigDecimal(key));
                    TempBill.setUniqueId(new BigDecimal(tempunqId));
                    TempBill.setEntites(ent);
                    corp.setCorporateId(Integer.parseInt(b));
                    TempBill.setCorporates(corp);
                    TempBill.setEnergyVae(new BigDecimal(c));
                    TempBill.setFixedCharges(new BigDecimal(d));
                    TempBill.setVariableCharges(new BigDecimal(e));
                    TempBill.setWeekId(new BigDecimal(weekid));
                    TempBill.setMarkupCharges(new BigDecimal(f));
                    TempBill.setRevisionNo(revno);
                    TempBill.setBillYear(new BigDecimal(g));
                    TempBill.setWrNetRras(new BigDecimal(j));
                    TempBill.setPrevWrNetRras(new BigDecimal(k));
                    TempBill.setNetRras(new BigDecimal(d).add(new BigDecimal(e).add(new BigDecimal(f))));

                    TempBill.setBillStatus("Pending");
                    System.out.println("Net RRSA RECV is: " + (new BigDecimal(d).add(new BigDecimal(e).add(new BigDecimal(f)))));
//                    TempBill.setRemarks("Original");
                    if (remarksDetail.containsKey(key)) {
                        String remark = remarksDetail.get(key);
                        TempBill.setRemarks(remark);
                    }
                    try {
                        if (tempbillDAO.NewTempBillReceiveRRASEntries(TempBill)) {
                            System.out.println("New RRAS receive entires added successfully");
                            String msg = "New RRAS receive entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                }
                if (weekIdFlag == 0) {
                    for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                        Integer key = entry.getKey();
                        List<String> values = entry.getValue();
                        System.out.println("Key = " + key);
                        a = values.get(0);
                        b = values.get(1);
                        c = values.get(2);
                        d = values.get(3);
                        e = values.get(4);
                        f = values.get(5);
                        g = values.get(6);
                        tempBillUniqueId = tempBillRRASDAO.getMaxUniqueID();
                        tempBillUniqueId = tempBillUniqueId + 1;
                        tempBillDetails.setUniqueId(new BigDecimal(tempBillUniqueId));
                        tempBillDetails.setBillNo(a);
                        tempBillDetails.setWeekId(new BigDecimal(b));
                        tempBillDetails.setBillYear(new BigDecimal(g));
                        tempBillDetails.setRevisionNo(revno);
                        tempBillDetails.setWeekFromdate(sdf.parse(c));
                        tempBillDetails.setWeekTodate(sdf.parse(d));
                        if (remarksDetail.containsKey(key)) {
                            String remark = remarksDetail.get(key);
                            System.out.println("value for key" + key + " is:- " + remark);
                            TempBill.setRemarks(remark);
                        }
                        if (revno == BigDecimal.ZERO) {
                            tempBillDetails.setRemarks("Original");
                        } else {
                            tempBillDetails.setRemarks("Revised");
                        }
                        tempBillDetails.setBillCategory("RECEIVABLE");
                        tempBillDetails.setBillingDate(billingDate);
                        tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));
                        Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                        tempBillDetails.setEntryDate(currentTimestamp);
                        tempBillDetails.setBillStatus("Pending");
//                        tempBillDetails.setEntryDate(new Date());
                        tempBillRRASDAO.NewTempBillRRASDetails(tempBillDetails);
                    }
                }
                recList = tempBillReceiveCorpDAO.getTempBillReceiveRRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
                System.out.println("%%%%%%%%%% recList size is " + recList.size());
                int count = 1;
                for (Object[] listMW1 : recList) {
                    System.out.println("count is " + count);
                    count = count + 1;
                    Object[] row = (Object[]) listMW1;
                    BigDecimal weekId, corpId, net, byear, revNo = null;
                    Date bdate = null;
                    weekId = (BigDecimal) row[0];
                    corpId = (BigDecimal) row[1];
                    net = (BigDecimal) row[2];
                    System.out.println("@@@@@@@ ##### net recv amount is " + net);
                    bdate = (Date) row[3];
                    byear = (BigDecimal) row[4];
                    revNo = (BigDecimal) row[5];
//                    System.out.println("revno is " + revno + " and revNo is " + revNo);
                    tempBillUniqueId = tempBillReceiveCorpDAO.getMaxUniqueID();
                    tempBillUniqueId = tempBillUniqueId + 1;
                    tempBillReceiveCorp.setUniqueId(new BigDecimal(tempBillUniqueId));
                    tempBillReceiveCorp.setWeekId(weekId);
                    tempBillReceiveCorp.setBillType("RRAS");
                    tempBillReceiveCorp.setBillYear(byear);
                    tempBillReceiveCorp.setBillingDate(bdate);
                    tempBillReceiveCorp.setRevisionNo(revno);
                    corp.setCorporateId(corpId.intValue());
                    tempBillReceiveCorp.setCorporates(corp);
                    tempBillReceiveCorp.setToalnet(net);
                    tempBillReceiveCorp.setBillStatus("Pending");
                    tempBillReceiveCorpDAO.NewTempBillRRASDetails(tempBillReceiveCorp);
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                String msg = "RRAS Receivable Entries Uploaded Successfully";
                mv.addObject("msg", msg);
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyREVUploadRRASReceivable.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView uploadREVRRASPayable(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        ModelAndView mv = new ModelAndView("BillUpload/excelREVRRASPayableUpload");
        System.out.println("inside upload RRAS payable sheet");
        HttpSession session = request.getSession();
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        BigDecimal revno = BigDecimal.ZERO;
        String weekid = request.getParameter("weeklynumber");
        String fromdate = request.getParameter("fromdate");
        String todate = request.getParameter("todate");
        System.out.println("from date is: " + fromdate + " and to date is : " + todate);
        String[] splitStr = fromdate.split("-");
        System.out.println(splitStr.length);
//        String year = splitStr[0];
        String year = request.getParameter("yearfin");
        String billType = request.getParameter("billType");
        System.out.println("billType is " + billType);
        BigDecimal yearid = new BigDecimal(year);
        System.out.println("yearid in Upload method is " + yearid);
        int weekIdFlag = 0;
        int entityFlag = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Corporates corp = new Corporates();
        TempBillRrasDetails tempBillDetails = new TempBillRrasDetails();
        TempBillPayableCorpDAO tempBillRRASCorp = new TempBillPayableCorpDAO();
        TempBillPayableCorp tempBillcorp = new TempBillPayableCorp();
        List<Object[]> payList = new ArrayList<Object[]>();
        EntityDAO entDAO = new EntityDAO();
        TempBillPayableEntityRRASDAO tempbillDAO = new TempBillPayableEntityRRASDAO();
        TempBillRRASDetailsDAO tempBillRRASDAO = new TempBillRRASDetailsDAO();
        Map<Integer, ArrayList<String>> retMap1 = new HashMap<Integer, ArrayList<String>>();
        String a, b, c, d, e, f, g, j, bill_No = null;
        String bill_due_date = null;
        String billing_Date = null;
        Date billingDate = null;
        BigDecimal maxRevNo = tempBillRRASDAO.getMaxRevNoByWeekId(new BigDecimal(weekid), new BigDecimal(year), "PAYABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            revno = maxRevNo.add(BigDecimal.ONE);
        }
        System.out.println("revno+1 is " + revno);
        weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "PAYABLE");
        System.out.println("weekIdFlag is " + weekIdFlag);
        if (weekIdFlag == 0) {
            System.out.println("New record !!");
            if (fromdate != null) {
                System.out.println("year obtained is " + year);
                int Year = Integer.parseInt(year);
                Workbook wb_xssf; //Declare XSSF WorkBook
                Sheet sheet = null; // sheet can be used as common for XSSF and HSSF
                Map<Integer, ArrayList<String>> retMap = new HashMap<Integer, ArrayList<String>>();
                HashMap<Integer, String> remarksDetail = new HashMap<>();
                int entity_id = 0;
                int corpotare_id = 0;
                String entityId = null;
                String corporateId = null;
                String energy_vae = null;
                String variable_Charges = null;
                String wr_remarks = "No Remarks !!";
                int tempuniqueId = 0;
                String wr_net_rras = null;
                String prev_net_rras = null;
                String tempunqId = null;
                BigDecimal mul = new BigDecimal("0.75");
                int rowNum = 0;
                TempBillPayableEntityRras TempBill = new TempBillPayableEntityRras();
                Entites ent = new Entites();
                if (fileExtn.equalsIgnoreCase("xlsx")) {
                    wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
                    sheet = wb_xssf.getSheetAt(0);
                }
                Iterator<Row> rowIterator = sheet.iterator();
                int rows = sheet.getLastRowNum();
                int entityCount = 0;
                List<String> entities = new ArrayList<>();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    //int cellNum = row.getLastCellNum();
                    int cellNum;
                    if (rowNum == 0 || rowNum == 1) {
                        cellNum = 9;

                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                            if (rowNum == 0) {
                                while (cellIterator.hasNext()) {
                                    Cell cell = cellIterator.next();

                                    switch (cell.getCellType()) {
                                        case Cell.CELL_TYPE_STRING:
                                            if (cell.getColumnIndex() == 0) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "RRAS Provider Name";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 1");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 1) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Energy Scheduled to VAE under RRAS(MWh)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 2");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 2) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Total Variable Charges for generation reduced (Rs) (A)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 3");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 3) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC NET RRAS";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 4");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 4) {

                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 5");
                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 5) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Bill Issue Date(dd-Mmm-yy)";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 6");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 6) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "WRLDC Remarks";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }
                                            }
                                            if (cell.getColumnIndex() == 7) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "PREVIOUS NET RRAS";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 7");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }
                                            if (cell.getColumnIndex() == 8) {
                                                String colName = cell.getStringCellValue().trim();
                                                String str2 = "Revision No.";
                                                if (str2.equalsIgnoreCase(colName)) {

                                                } else {
                                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                    System.out.println("inside column 8");

                                                    String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                    mv9.addObject("Msg", Msg);
                                                    return mv9;
                                                }

                                            }

                                    }
                                }

                            }

                            if (cellNo != 6) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    } else {
                        cellNum = 8;
                        for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                            if (cellNo != 4 && cellNo != 5 && cellNo != 6) {
                                if (isCellEmpty(row.getCell(cellNo))) {
                                    String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                    System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                    ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                    mv9.addObject("Msg", Msg);
                                    return mv9;
                                }
                            }
                        }
                    }
                    System.out.println("Max cellNum is " + cellNum);

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    System.out.println("entityName is " + entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    if (entity_id == 0) {
                                        entities.add(entityName);
                                        entityCount++;
                                    } else {
                                        String rrasFlag = entDAO.getRrasFlagByEntityId(new BigDecimal(entity_id));
                                        if (rrasFlag.equalsIgnoreCase("N")) {
                                            ModelAndView mv9 = new ModelAndView("successMsg");
                                            String Msg = "The Entity " + entityName + " is not RRAS Considerable. Kindly check and upload !";
                                            mv9.addObject("Msg", Msg);
                                            return mv9;
                                        }
                                    }
                                }
                        }
                    }
                }
                if (entityCount > 0) {
                    ModelAndView mv9 = new ModelAndView("BillUpload/displayUnregisterEntity");
                    mv9.addObject("entities", entities);
                    return mv9;
                }

                // Checking for comma in each cell
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                            if (cell.getStringCellValue().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in String cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }
                        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                            Double cellval = cell.getNumericCellValue();
                            if (cellval.toString().contains(",")) {
                                System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                                System.out.println(" Error in numeric cell type!!");
                                System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contains comma!! ";
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        }

                    }
                }

                BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
                List<BillPaymentDuedate> list999 = null;
                list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "PAYABLE", sdf.parse(fromdate));
                rowIterator = sheet.iterator();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    System.out.print("Inside row" + row.getRowNum());
                    Iterator<Cell> cellIterator = row.cellIterator();
                    rowNum = (row.getRowNum());
                    if (isCellEmpty(row.getCell(0))) {
                        break;
                    }
                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_STRING:
                                if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 0");
                                    String entityName = cell.getStringCellValue().trim();
                                    entityFlag = entDAO.checkExistenceOfEntityName(entityName);
                                    entity_id = entDAO.getEntityIDbyName(entityName);
                                    corpotare_id = entDAO.getCorporateIDbyName(entityName);
                                    entityId = Integer.toString(entity_id);
                                    corporateId = Integer.toString(corpotare_id);
                                    System.out.println("Entity Id obtained:" + entityId + " Corporate ID obtained : " + corpotare_id + " for entity name: " + entityName);
                                }
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    energy_vae = cell.getStringCellValue().trim();
                                    System.out.println("energy vae scheduled is : " + energy_vae);
                                    if (energy_vae == null) {
                                        energy_vae = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    variable_Charges = cell.getStringCellValue().trim();
                                    System.out.println("Variable Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 4 && (rowNum <= 1) && (rowNum != 0)) {
                                    System.out.println("inside column 4");
                                    bill_No = cell.getStringCellValue().trim();
                                    System.out.println("Bill No is : " + bill_No);
                                    if (bill_No == null) {
                                        bill_No = "Bill_No";
                                    }
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("#### inside column 5 STRING #####");
                                    String sdate = cell.getStringCellValue().trim();
                                    System.out.println("@@@@@@ Billing date is " + sdate);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(sdate);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println("##### STRING DATE #####  UPLOAD PAYABLE RRAS bill_due_date " + bill_due_date);
                                }
                                if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 6");
                                    wr_remarks = cell.getStringCellValue().trim();
                                    System.out.println("wr_remarks is : " + wr_remarks);
                                    if (wr_remarks == null) {
                                        wr_remarks = "No Remarks!!";
                                    }
                                }

                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    wr_net_rras = cell.getStringCellValue().trim();
                                    System.out.println("wr_net_rras is : " + wr_net_rras);

                                }
                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    prev_net_rras = cell.getStringCellValue().trim();
//                                    Prev_Net_Rras = Double.parseDouble(prevNetDsm);
                                    System.out.println("Prev_Net_Rras is : " + prev_net_rras);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getStringCellValue().trim());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "PAYABLE");
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                                break;
                            case Cell.CELL_TYPE_NUMERIC:
                                if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 1");
                                    Double energyVae = cell.getNumericCellValue();
                                    energy_vae = String.valueOf(energyVae);
                                    System.out.println("energy vae scheduled is : " + energy_vae);
                                    if (energy_vae == null) {
                                        energy_vae = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 2");
                                    Double variableCharges = cell.getNumericCellValue();
                                    variable_Charges = String.valueOf(variableCharges);
                                    System.out.println("Variable Charges is : " + variable_Charges);
                                    if (variable_Charges == null) {
                                        variable_Charges = "0";
                                    }
                                }
                                if (cell.getColumnIndex() == 5 && (rowNum == 1)) {
                                    System.out.println("inside column 5");
                                    Date date = cell.getDateCellValue();
                                    SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy");
                                    billing_Date = dateFormat2.format(date);
                                    System.out.println("Date is :" + billing_Date);
                                    billingDate = new SimpleDateFormat("dd-MMM-yy").parse(billing_Date);
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(billingDate);
                                    cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                                    System.out.println("Calender date is: " + cal);
                                    bill_due_date = sdf.format(cal.getTime());
                                    System.out.println(" ##### DATE ##### UPLOAD PAYABLE RRAS bill_due_date " + bill_due_date);
                                }
                                if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 3");
                                    Double wrNetRras = cell.getNumericCellValue();
                                    wr_net_rras = String.valueOf(wrNetRras);
                                    System.out.println("################wr_net_rras is #############: " + wr_net_rras);

                                }
                                if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                    System.out.println("inside column 10");
                                    Double prevNetRras = cell.getNumericCellValue();
                                    prev_net_rras = String.valueOf(prevNetRras);
                                    System.out.println("Prev_Net_Rras is : " + prev_net_rras);
                                }
                                if (cell.getColumnIndex() == 8 && (rowNum == 1)) {
                                    System.out.println("inside column 11");
                                    revno = new BigDecimal(cell.getNumericCellValue());
                                    System.out.println("REV No is : " + revno);
                                    if (revno.intValue() <= 0) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Revision should be greater than ZERO for uploading revised bills!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                    weekIdFlag = tempBillRRASDAO.checkExistenceOfWeekIDandRevisionNo(new BigDecimal(weekid), revno, new BigDecimal(year), "PAYABLE");
                                    if (weekIdFlag == 1) {
                                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                        String Msg = "Record already exists!!";
                                        mv9.addObject("Msg", Msg);
                                        return mv9;
                                    }
                                }
                        }
                    }
                    if (rowNum != 0) {
                        ArrayList<String> valSetOne = new ArrayList<String>();
                        remarksDetail.put(entity_id, wr_remarks);
                        wr_remarks = "No Remarks !!";
                        valSetOne.add(entityId);
                        valSetOne.add(corporateId);
                        valSetOne.add(energy_vae);
                        valSetOne.add(variable_Charges);
                        valSetOne.add(year);
                        valSetOne.add(wr_net_rras);
                        valSetOne.add(prev_net_rras);

                        retMap.put(entity_id, valSetOne);
                        System.out.println(" @@@@@@@@@@@@@@@@entity_id is " + entity_id + "and wr_remarks is " + wr_remarks);
                    }
                }
                ArrayList<String> valSetTwo = new ArrayList<String>();
                valSetTwo.add(bill_No);
                valSetTwo.add(weekid);
                valSetTwo.add(fromdate);
                valSetTwo.add(todate);
                valSetTwo.add(billing_Date);
                valSetTwo.add(bill_due_date);
                valSetTwo.add(year);
                retMap1.put(Integer.parseInt(weekid), valSetTwo);
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    j = values.get(5);
                    f = values.get(6);
                    System.out.println("setWrNetRras is " + j);
                    System.out.println("previous setWrNetRras is " + f);

                    tempuniqueId = tempbillDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempunqId = Integer.toString(tempuniqueId);
                    System.out.println("tempunqId " + tempunqId);
                    corp.setCorporateId(Integer.parseInt(b));
                    ent.setEntityId(new BigDecimal(key));
                    TempBill.setUniqueId(new BigDecimal(tempunqId));
                    TempBill.setEntites(ent);
                    TempBill.setCorporates(corp);
                    TempBill.setEnergyVae(new BigDecimal(c));
                    TempBill.setVariableCharges(new BigDecimal(d));
                    TempBill.setWeekId(new BigDecimal(weekid));
                    TempBill.setNetRras(new BigDecimal(d).multiply(mul));
                    if (remarksDetail.containsKey(key)) {
                        String remark = remarksDetail.get(key);
                        TempBill.setRemarks(remark);
                    }
                    TempBill.setRevisionNo(revno);
                    TempBill.setBillYear(new BigDecimal(e));
                    TempBill.setWrNetRras(new BigDecimal(j));
                    TempBill.setPrevWrNetRras(new BigDecimal(f));
                    TempBill.setBillStatus("Pending");
                    System.out.println("Net RRAS is: " + (new BigDecimal(d).multiply(mul)));
                    try {
                        if (tempbillDAO.NewTempBillPayableRRASEntries(TempBill)) {
                            System.out.println("New RRAS Payable entires added successfully");
                            String msg = "New RRAS Payable entires added successfully";
                            mv.addObject("sucessmsg", msg);
                        }
                    } catch (Exception t) {
                        System.out.println("Exception is" + t.getMessage());
                        t.printStackTrace();
                    }
                }
                for (Map.Entry<Integer, ArrayList<String>> entry : retMap1.entrySet()) {
                    Integer key = entry.getKey();
                    List<String> values = entry.getValue();
                    System.out.println("Key = " + key);
                    a = values.get(0);
                    b = values.get(1);
                    c = values.get(2);
                    d = values.get(3);
                    e = values.get(4);
                    f = values.get(5);
                    g = values.get(6);
                    tempuniqueId = tempBillRRASDAO.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempBillDetails.setUniqueId(new BigDecimal(tempuniqueId));
                    tempBillDetails.setBillNo(a);
                    tempBillDetails.setWeekId(new BigDecimal(b));
                    Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
                    tempBillDetails.setEntryDate(currentTimestamp);
//                    tempBillDetails.setEntryDate(new Date());
                    tempBillDetails.setBillYear(new BigDecimal(g));
                    if (revno == BigDecimal.ZERO) {
                        tempBillDetails.setRemarks("Original");
                    } else {
                        tempBillDetails.setRemarks("Revised");
                    }
                    tempBillDetails.setRevisionNo(revno);
//                    tempBillDetails.setRevisionNo(new BigDecimal("0"));
                    tempBillDetails.setWeekFromdate(sdf.parse(c));
                    tempBillDetails.setWeekTodate(sdf.parse(d));
//                    tempBillDetails.setRemarks("original");
                    tempBillDetails.setBillingDate(billingDate);
                    tempBillDetails.setBillDueDate(sdf.parse(bill_due_date));
                    tempBillDetails.setBillCategory("PAYABLE");
                    tempBillDetails.setBillStatus("Pending");
                    tempBillRRASDAO.NewTempBillRRASDetails(tempBillDetails);
                }
                payList = tempBillRRASCorp.getTempBillPayableRRAS(new BigDecimal(weekid), revno, new BigDecimal(year));
//                System.out.println("$$$$$$$payList size is " + payList.size());
                for (Object[] listMW1 : payList) {
                    Object[] row = (Object[]) listMW1;
                    BigDecimal weekId, corpId, net, byear, revNo = null;
                    Date bdate = null;
                    weekId = (BigDecimal) row[0];
                    corpId = (BigDecimal) row[1];
                    net = (BigDecimal) row[2];
                    bdate = (Date) row[3];
                    byear = (BigDecimal) row[4];
                    revNo = (BigDecimal) row[5];
                    tempuniqueId = tempBillRRASCorp.getMaxUniqueID();
                    tempuniqueId = tempuniqueId + 1;
                    tempBillcorp.setUniqueId(new BigDecimal(tempuniqueId));
                    tempBillcorp.setWeekId(weekId);
                    tempBillcorp.setBillType("RRAS");
                    tempBillcorp.setBillYear(byear);
                    tempBillcorp.setBillingDate(bdate);
                    tempBillcorp.setRevisionNo(revNo);
                    corp.setCorporateId(corpId.intValue());
                    tempBillcorp.setCorporates(corp);
                    tempBillcorp.setTotalnet(net);
                    tempBillcorp.setBillStatus("Pending");
                    if (revno == BigDecimal.ZERO) {
                        tempBillcorp.setRemarks("Original");
                    } else {
                        tempBillcorp.setRemarks("Revised");
                    }
                    tempBillRRASCorp.NewTempBillRRASDetails(tempBillcorp);
                }
                session.setAttribute("weekid", new BigDecimal(weekid));
                session.setAttribute("year", new BigDecimal(year));
                return new ModelAndView(new RedirectView("verifyREVUploadRRASPayable.htm"));
            }
        } else {
            String msg = "Record Already exist for this Week ID ";
            mv.addObject("msg", msg);
        }
        return mv;
    }

    public ModelAndView verifyREVUploadRRASReceivable(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadRRASReceivable");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("yearid is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillReceiveEntityRRASDAO tempBillDAO = new TempBillReceiveEntityRRASDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        TempBillRRASDetailsDAO tempRRASDAO = new TempBillRRASDetailsDAO();
        BillRrasDetailsDAO billRRASDAO = new BillRrasDetailsDAO();
        BillReceiveEntityRrasDAO billPayEntDAO = new BillReceiveEntityRrasDAO();
        BillReceiveCorpDAO billReceiveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveEntityRras billEntRras = new BillReceiveEntityRras();
        BillRrasDetails billRrasDet = new BillRrasDetails();
        BillReceiveCorp billReceiveCorp = new BillReceiveCorp();
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        BigDecimal maxRevNo = tempRRASDAO.getMaxRevNoByWeekId(weekid, yearid, "RECEIVABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        System.out.println("##### rev is " + rev);
        List<Object[]> tempReceiveList = tempBillDAO.getTempRRASReceiveBillDetailsbyWeekId(weekid, yearid, rev);
        System.out.println("tempReceiveList is " + tempReceiveList);
        int tempuniqueId = 0;
        int weekIdFlag = 0;
        String tempunqId = null;
        weekIdFlag = billRRASDAO.checkExistenceOfWeekIDandRevisionNo(weekid, rev, yearid, "RECEIVEBLE");
        System.out.println("In verifyUpload, weekIdFlag is " + weekIdFlag);
        List<Object[]> receiveList = new ArrayList<Object[]>();
        List<Object[]> rrasList = new ArrayList<Object[]>();
        List<Object[]> receiveCorpList = new ArrayList<Object[]>();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date billing_Date = tempRRASDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid, "RECEIVABLE");
        Date fromDate = tempRRASDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid, "RECEIVABLE");
        Date toDate = tempRRASDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid, "RECEIVABLE");
        List<TempBillRrasDetails> tempbillrrasdetlsrec = tempRRASDAO.gettemprrasdetilsbyweekyearrev(weekid, yearid, rev, "RECEIVABLE");

        String saveBtn = request.getParameter("saveBtn");
        System.out.println(" billing_Date is " + billing_Date);
        System.out.println(" fromDate is " + fromDate);
        System.out.println(" toDate is " + toDate);
        System.out.println("saveBtn" + saveBtn);
        if (saveBtn != null) {
            // if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            receiveList = billPayEntDAO.getTempRRASBillReceiveDetailsbyWeekId(weekid, rev, yearid);
            System.out.println("receiveList size is " + receiveList.size());
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "RECEIVABLE", fromDate);

            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "PAYABLE", fromDate);
            for (Object[] listMW1 : receiveList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, entityId, energy_vae, fixed_charges, var_charges, markup_char, net, year, revNo, weekId, corpId = null;
                String billDueDate = null;
                bg = (BigDecimal) row[0];
                entityId = (BigDecimal) row[2];
                weekId = (BigDecimal) row[1];
                energy_vae = (BigDecimal) row[4];
                fixed_charges = (BigDecimal) row[5];
                var_charges = (BigDecimal) row[6];
                markup_char = (BigDecimal) row[7];
                net = (BigDecimal) row[12];
                year = (BigDecimal) row[9];
                revNo = (BigDecimal) row[10];
                corpId = (BigDecimal) row[3];
                billEntRras.setUniqueId(bg);
                billEntRras.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntRras.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntRras.setCorporates(corp);
                billEntRras.setEnergyVae(energy_vae);
                billEntRras.setFixedCharges(fixed_charges);
                billEntRras.setVariableCharges(var_charges);
                billEntRras.setMarkupCharges(markup_char);
                billEntRras.setNetRras(net);
                billEntRras.setBillYear(year);
                billEntRras.setRevisionNo(revNo);
                billEntRras.setBillingDate(billing_Date);
                Calendar cal = Calendar.getInstance();
                cal.setTime(billing_Date);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                billDueDate = sdf.format(cal.getTime());
                billEntRras.setBillDueDate(sdf.parse(billDueDate));
                billEntRras.setRemarks((String) row[11]);
                billPayEntDAO.NewBillPayRrasEntries(billEntRras);

                tempBillDAO.updatetempbillreceivableentityrrasstatus();
                System.out.println("Entries successfully added in Bill Receive Entity RRAS table");
            }
            if (weekIdFlag == 0) {
                rrasList = billRRASDAO.getTempBillRRASDetailsbyWeekId(weekid, yearid, rev, "RECEIVABLE");
                for (Object[] listMW1 : rrasList) {
                    Object[] row = (Object[]) listMW1;
                    BigDecimal bg, weekId, year, revNo = null;
                    Date weekFromDate, weekToDate, bDate, billDueDate = null;
                    bg = (BigDecimal) row[0];
                    weekId = (BigDecimal) row[1];
                    weekFromDate = (Date) row[2];
                    weekToDate = (Date) row[3];
                    bDate = (Date) row[4];
                    billDueDate = (Date) row[6];
                    year = (BigDecimal) row[5];
                    revNo = (BigDecimal) row[7];
                    billRrasDet.setUniqueId(bg);
                    billRrasDet.setWeekId(weekId);
                    billRrasDet.setWeekFromdate(weekFromDate);
                    billRrasDet.setWeekTodate(weekToDate);
                    billRrasDet.setBillingDate(bDate);
                    billRrasDet.setRevisionNo(revNo);
                    billRrasDet.setBillYear(year);
                    billRrasDet.setBillDueDate(billDueDate);
                    billRrasDet.setRemarks((String) row[8]);
                    billRrasDet.setBillNo((String) row[9]);
                    billRrasDet.setEntryDate((Timestamp) row[11]);

                    billRrasDet.setBillCategory("RECEIVABLE");
                    billRRASDAO.NewBillRRASDetailsEntries(billRrasDet);

                    tempRRASDAO.updatetempbillrrasdetailsstatusbybillcategory("RECEIVABLE");
                    System.out.println("Entries successfully added in Bill RRAS Details table");
                }
            }
            receiveCorpList = billReceiveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, "RRAS");
            System.out.println("@@@@@@@@ receiveCorpList size is " + receiveCorpList.size());
            for (Object[] listMW1 : receiveCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null, billDueDate = null;
                String BillType, remarks = null;
                Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
                revNo = (BigDecimal) row[6];
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                tempuniqueId = billReceiveCorpDAO.getMaxUniqueID();
                tempuniqueId = tempuniqueId + 1;
                tempunqId = Integer.toString(tempuniqueId);
                billReceiveCorp.setUniqueId(new BigDecimal(tempunqId));
                billReceiveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billReceiveCorp.setCorporates(corp);
                billReceiveCorp.setToalnet(net);
                billReceiveCorp.setNetDsm(net);
                billReceiveCorp.setBillYear(year);
                billReceiveCorp.setRevisionNo(revNo);
                billReceiveCorp.setRemarks(remarks);
                billReceiveCorp.setBillType(BillType);
                billReceiveCorp.setBillingDate(billingDate);
                billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);
                billReceiveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billReceiveCorp.setAdjustmentflag("0");
                billReceiveCorp.setBillPriority("RRAS");

                cal.setTime(billing_Date);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                String billDueDate1 = sdf.format(cal.getTime());
                billReceiveCorp.setBillDueDate(sdf.parse(billDueDate1));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(billDueDate1));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal prevtotalnet = null;
                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillReceivableRRASforprevnet(weekId, revNo, year, corpId.intValue());

                    System.out.println("prevtotalnet is " + prevtotalnet);
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    List<BillReceiveCorp> listprebillcorp = billReceiveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;

//                        prevnetTotal=listprebillcorp.get(0).getToalnet();
//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                    prevnetTotal = listprebillcorp.get(0).getToalnet();
                        prevnetTotal = prevtotalnet;
                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempBillDAO.deleteTempBillReceiveEntityRRASbyWeekId(weekId, revNo, yearid);
                        tempRRASDAO.deleteTempBillEntityRRASbyWeekId(weekId, revNo, year, "RECEIVABLE");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "RRAS");
                        billPayEntDAO.deleteBillReceiveEntityRRASbyWeekIdRevNoYear(weekId, revNo, year);
                        billRRASDAO.deleteBillDetailsRRASbyWeekIdYearRevNoCategory(weekId, revNo, year, msg);
                        billReceiveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "RRAS");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }

                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billReceiveCorp.setRevisedpaybale(orgPendingamt);
                        billReceiveCorp.setPendingAmount(orgPendingamt);
                        billReceiveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billReceiveCorp.setDisburseStatus("NOT PAID");
                        billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billReceiveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billReceiveCorp.setRevisedrefund(orgPendingamt.negate());
                        billReceiveCorp.setPendingAmount(orgPendingamt.negate());
                        billReceiveCorp.setDisburseStatus("REFUND");
                        billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billing_Date);
                        cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        billDueDate1 = sdf.format(cal.getTime());
                        billReceiveCorp.setBillDueDate(sdf.parse(billDueDate1));

                        reconcorp.setBillDueDate(sdf.parse(billDueDate1));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billReceiveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billReceiveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billReceiveCorp.setPendingAmount(BigDecimal.ZERO);
                        billReceiveCorp.setDisburseStatus("PAID");
                        billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }
                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billReceiveCorp.setBillCategory("Original");
                    billReceiveCorp.setPendingAmount(net);
                    billReceiveCorp.setDisburseStatus("NOT PAID");
                    billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billReceiveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billReceiveCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billReceiveCorp.setBillCategory("Revised");
                }
                billReceiveCorpDAO.NewBillReceiveCorpEntries(billReceiveCorp);
                System.out.println("Entries successfully added in Bill Receive Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in Dyn Recon table");
            }

            tempBillcorpDAO.updatetempbillreceivablecorpstatus("RRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from payable");
            if (tempBillDAO.deleteTempBillReceiveEntityRRASbyWeekId(weekid, rev, yearid)) {
                if (tempRRASDAO.deleteTempBillEntityRRASbyWeekId(weekid, rev, yearid, "RECEIVABLE"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "RRAS"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billing_Date);
        mav1.addObject("tempReceiveList", tempReceiveList);
        mav1.addObject("tempbillrrasdetlsrec", tempbillrrasdetlsrec);

        return mav1;
    }

    public ModelAndView verifyREVUploadRRASPayable(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadRRASPayable");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("yearid is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillPayableEntityRRASDAO tempBillDAO = new TempBillPayableEntityRRASDAO();
        TempBillRRASDetailsDAO tempBillRRASDAO = new TempBillRRASDetailsDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        BillPayableEntityRrasDAO billPayEntDAO = new BillPayableEntityRrasDAO();
//        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        LetterOfCreditDAO letterDAO = new LetterOfCreditDAO();
        CorporatesDAO corpDAO = new CorporatesDAO();
        BillRrasDetailsDAO billRRASDAO = new BillRrasDetailsDAO();
        BillPayableEntityRras billEntRras = new BillPayableEntityRras();
        BillRrasDetails billRrasDet = new BillRrasDetails();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        BigDecimal maxRevNo = tempBillRRASDAO.getMaxRevNoByWeekId(weekid, yearid, "PAYABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        System.out.println("VERIFYRRAS rev+1 is " + rev);
        List<Object[]> tempPayList = tempBillDAO.getTempRRASBillDetailsbyWeekId(weekid, rev, yearid);
        System.out.println("In verifyRRAS tempPayList is  " + tempPayList);
        int tempuniqueId = 0;
        int weekIdFlag = 0;
        String tempunqId = null;
        weekIdFlag = billRRASDAO.checkExistenceOfWeekIDandRevisionNo(weekid, rev, yearid, "PAYABLE");
        System.out.println("In verifyRRAS weekIdFlag is " + weekIdFlag);
        List<Object[]> payList = new ArrayList<Object[]>();
        List<Object[]> rrasList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        Date billing_Date = null;
        Date fromDate = null;
        Date toDate = null;
        //if (weekIdFlag != 0) {

        List<TempBillRrasDetails> tempbilrrasdetilspay = tempBillRRASDAO.gettemprrasdetilsbyweekyearrev(weekid, yearid, rev, "PAYABLE");
        billing_Date = tempBillRRASDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid, "PAYABLE");
        fromDate = tempBillRRASDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid, "PAYABLE");
        toDate = tempBillRRASDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid, "PAYABLE");
        System.out.println("billing_Date is " + billing_Date);
        System.out.println("fromDate is " + fromDate);
        System.out.println("toDate is " + toDate);
        // }
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        if (saveBtn != null) {
            //if (submitBtn.equalsIgnoreCase("Save")) {

            List<String> corporates = new ArrayList<>();
            int corpCount = 0;

            List<String> corporatesNotPresent = new ArrayList<>();
            int corpNotPresentCount = 0;

            ModelAndView mav2 = new ModelAndView("successMsg_LoC");
            //ModelAndView mav2 = new ModelAndView("successMsg");
            payList = billPayEntDAO.getTempRRASBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, entityId, energy_vae, var_charges, net, year, revNo, weekId, corpId = null;
                bg = (BigDecimal) row[0];
                entityId = (BigDecimal) row[2];
                weekId = (BigDecimal) row[1];
                energy_vae = (BigDecimal) row[4];
                var_charges = (BigDecimal) row[5];
//                net = (BigDecimal) row[6];
                net = (BigDecimal) row[10];

                year = (BigDecimal) row[7];
                revNo = (BigDecimal) row[8];
                corpId = (BigDecimal) row[3];
                billEntRras.setUniqueId(bg);
                billEntRras.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntRras.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntRras.setCorporates(corp);
                billEntRras.setEnergyVae(energy_vae);
                billEntRras.setVariableCharges(var_charges);
                billEntRras.setNetRras(net);
                billEntRras.setBillYear(year);
                billEntRras.setRevisionNo(revNo);
                billEntRras.setRemarks((String) row[9]);
                billPayEntDAO.NewBillPayRrasEntries(billEntRras);

                tempBillDAO.updatetempbillpayableentityrrasstatus();
                System.out.println("Entries successfully added in Bill Payable Entity RRAS table");
            }
            if (weekIdFlag == 0) {
                rrasList = billRRASDAO.getTempBillRRASDetailsbyWeekId(weekid, yearid, rev, "PAYABLE");
                for (Object[] listMW1 : rrasList) {
                    Object[] row = (Object[]) listMW1;
                    BigDecimal bg, weekId, year, revNo = null;
                    Date weekFromDate, weekToDate, bDate, billDueDate = null;
                    bg = (BigDecimal) row[0];
                    weekId = (BigDecimal) row[1];
                    weekFromDate = (Date) row[2];
                    weekToDate = (Date) row[3];
                    bDate = (Date) row[4];
                    billDueDate = (Date) row[6];
                    year = (BigDecimal) row[5];
                    revNo = (BigDecimal) row[7];
                    billRrasDet.setUniqueId(bg);
                    billRrasDet.setWeekId(weekId);
                    billRrasDet.setWeekFromdate(weekFromDate);
                    billRrasDet.setWeekTodate(weekToDate);
                    billRrasDet.setBillingDate(bDate);
                    billRrasDet.setRevisionNo(revNo);
                    billRrasDet.setBillYear(year);
                    billRrasDet.setBillDueDate(billDueDate);
                    billRrasDet.setRemarks((String) row[8]);
                    billRrasDet.setBillNo((String) row[9]);

                    billRrasDet.setEntryDate((Timestamp) row[11]);

                    billRrasDet.setBillCategory("PAYABLE");
                    if (revNo == BigDecimal.ZERO) {
                        billRrasDet.setRemarks("Original");
                    } else {
                        billRrasDet.setRemarks("Revised");
                    }
                    billRRASDAO.NewBillRRASDetailsEntries(billRrasDet);

                    tempBillRRASDAO.updatetempbillrrasdetailsstatusbybillcategory("PAYABLE");
                    System.out.println("Entries successfully added in Bill RRAS Details table");
                }
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "PAYABLE", fromDate);

            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "RECEIVABLE", fromDate);
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, "RRAS", yearid);
            for (Object[] listMW1 : payCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks, bill_due_date = null;
                Date billingDate = null;
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
                revNo = (BigDecimal) row[6];
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal + "BillType IS " + BillType);
                bill_due_date = sdf.format(cal.getTime());
                int corporateId = corpId.intValue();
                tempuniqueId = billPayCorpDAO.getMaxUniqueID();
                tempuniqueId = tempuniqueId + 1;
                tempunqId = Integer.toString(tempuniqueId);
                billPayCorp.setUniqueId(new BigDecimal(tempunqId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net);
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillPriority("RRAS");
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date));

                BigDecimal lcAmount = letterDAO.getPresentLCAmountbyId(corporateId, year.toString());
                System.out.println(" lc amount fetched in controller for Corpid" + corporateId + " is: " + lcAmount);

                if (!(lcAmount != null)) {
                    String cropName = corpDAO.getCorporateNamebyID(corporateId);
                    System.out.println("LC amount not present for Corporate : " + cropName);

                    corporatesNotPresent.add(cropName);
                    corpNotPresentCount++;

                    if (corpNotPresentCount > 0) {

                        mav2.addObject("corporatesNotPresent", corporatesNotPresent);
                        //  mv9.addObject("corporates", corporates); 
                        //  return mv9; 
                    }
                } else {
                    BigDecimal lc_Max = BigDecimal.ZERO;
                    lc_Max = ((lcAmount).multiply(new BigDecimal(1.5)));
                    if (lc_Max != null) {

                        String cropName = corpDAO.getCorporateNamebyID(corporateId);
                        System.out.println("Max lc amount  150% for Corporate : " + cropName + "is : " + lc_Max);
                        if (net.compareTo(lc_Max) > 0) {
                            corporates.add(cropName);
                            corpCount++;

                        }

                        if (corpCount > 0) {

                            mav2.addObject("corporates", corporates);
                            //  mv9.addObject("corporates", corporates); 
                            //  return mv9; 
                        }
                    }

                }

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;

                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableRRASforprevnet(weekId, revNo, year, corporateId);

                    System.out.println("prevtotalnet is " + prevtotalnet);
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);
                    BigDecimal orgPendingamt = null;
                    BigDecimal prevnetTotal = null;

                    // prevnetTotal=listprebillcorp.get(0).getTotalnet();
                    if (prevtotalnet != null) {
//                        prevnetTotal = listprebillcorp.get(0).getTotalnet();
                        prevnetTotal = prevtotalnet;

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.subtract(prevnetTotal);
                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal + "BillType IS " + BillType);
                            bill_due_date = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempBillDAO.deleteTempBillPayableEntityRRASbyWeekId(weekid, rev, yearid);
                        tempBillRRASDAO.deleteTempBillEntityRRASbyWeekId(weekid, rev, yearid, "PAYABLE");
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "RRAS");
                        billPayEntDAO.deleteBillPayableEntityRRASbyWeekIdYearRevNo(weekId, rev, yearid);
                        billRRASDAO.deleteBillDetailsRRASbyWeekIdYearRevNoCategory(weekId, rev, yearid, "PAYABLE");
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, rev, "RRAS");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of rev geratethan 1
                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }
                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net);
                    reconcorp.setPayPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                }
                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setPendingAmount(net);
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in Dyn Recon table");
            }
            tempBillPayCorp.updatetempbillpayablecorpstatus("RRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from payable");
            if (tempBillDAO.deleteTempBillPayableEntityRRASbyWeekId(weekid, rev, yearid)) {
                tempBillRRASDAO.deleteTempBillEntityRRASbyWeekId(weekid, rev, yearid, "PAYABLE");
                tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "RRAS");
                String msg = "Record Deleted Successfully for Week ID: " + weekid;
                mav2.addObject("Msg", msg);
                return mav2;
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billing_Date);
        mav1.addObject("tempPayList", tempPayList);
        mav1.addObject("tempbilrrasdetilspay", tempbilrrasdetilspay);

        return mav1;
    }

    public ModelAndView verifyUploadRRASPayable(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadRRASPayable");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("yearid is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillPayableEntityRRASDAO tempBillDAO = new TempBillPayableEntityRRASDAO();
        TempBillRRASDetailsDAO tempBillRRASDAO = new TempBillRRASDetailsDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        BillPayableEntityRrasDAO billPayEntDAO = new BillPayableEntityRrasDAO();
//        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        LetterOfCreditDAO letterDAO = new LetterOfCreditDAO();
        CorporatesDAO corpDAO = new CorporatesDAO();
        BillRrasDetailsDAO billRRASDAO = new BillRrasDetailsDAO();
        BillPayableEntityRras billEntRras = new BillPayableEntityRras();
        BillRrasDetails billRrasDet = new BillRrasDetails();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        BigDecimal maxRevNo = tempBillRRASDAO.getMaxRevNoByWeekId(weekid, yearid, "PAYABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        System.out.println("VERIFYRRAS rev+1 is " + rev);
        List<Object[]> tempPayList = tempBillDAO.getTempRRASBillDetailsbyWeekId(weekid, rev, yearid);
        System.out.println("In verifyRRAS tempPayList is  " + tempPayList);
        int tempuniqueId = 0;
        int weekIdFlag = 0;
        String tempunqId = null;
        weekIdFlag = billRRASDAO.checkExistenceOfWeekIDandRevisionNo(weekid, rev, yearid, "PAYABLE");
        System.out.println("In verifyRRAS weekIdFlag is " + weekIdFlag);
        List<Object[]> payList = new ArrayList<Object[]>();
        List<Object[]> rrasList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        Date billing_Date = null;
        Date fromDate = null;
        Date toDate = null;
        //if (weekIdFlag != 0) {

        List<TempBillRrasDetails> tempbilrrasdetilspay = tempBillRRASDAO.gettemprrasdetilsbyweekyearrev(weekid, yearid, rev, "PAYABLE");
        billing_Date = tempBillRRASDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid, "PAYABLE");
        fromDate = tempBillRRASDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid, "PAYABLE");
        toDate = tempBillRRASDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid, "PAYABLE");
        System.out.println("billing_Date is " + billing_Date);
        System.out.println("fromDate is " + fromDate);
        System.out.println("toDate is " + toDate);
        // }
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        if (saveBtn != null) {
            //if (submitBtn.equalsIgnoreCase("Save")) {

            List<String> corporates = new ArrayList<>();
            int corpCount = 0;

            List<String> corporatesNotPresent = new ArrayList<>();
            int corpNotPresentCount = 0;

            ModelAndView mav2 = new ModelAndView("successMsg_LoC");
            //ModelAndView mav2 = new ModelAndView("successMsg");
            payList = billPayEntDAO.getTempRRASBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, entityId, energy_vae, var_charges, net, year, revNo, weekId, corpId = null;
                bg = (BigDecimal) row[0];
                entityId = (BigDecimal) row[2];
                weekId = (BigDecimal) row[1];
                energy_vae = (BigDecimal) row[4];
                var_charges = (BigDecimal) row[5];
//                net = (BigDecimal) row[6];
                net = (BigDecimal) row[10];

                year = (BigDecimal) row[7];
                revNo = (BigDecimal) row[8];
                corpId = (BigDecimal) row[3];
                billEntRras.setUniqueId(bg);
                billEntRras.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntRras.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntRras.setCorporates(corp);
                billEntRras.setEnergyVae(energy_vae);
                billEntRras.setVariableCharges(var_charges);
                billEntRras.setNetRras(net);
                billEntRras.setBillYear(year);
                billEntRras.setRevisionNo(revNo);
                billEntRras.setRemarks((String) row[9]);
                billPayEntDAO.NewBillPayRrasEntries(billEntRras);

                tempBillDAO.updatetempbillpayableentityrrasstatus();
                System.out.println("Entries successfully added in Bill Payable Entity RRAS table");
            }
            if (weekIdFlag == 0) {
                rrasList = billRRASDAO.getTempBillRRASDetailsbyWeekId(weekid, yearid, rev, "PAYABLE");
                for (Object[] listMW1 : rrasList) {
                    Object[] row = (Object[]) listMW1;
                    BigDecimal bg, weekId, year, revNo = null;
                    Date weekFromDate, weekToDate, bDate, billDueDate = null;
                    bg = (BigDecimal) row[0];
                    weekId = (BigDecimal) row[1];
                    weekFromDate = (Date) row[2];
                    weekToDate = (Date) row[3];
                    bDate = (Date) row[4];
                    billDueDate = (Date) row[6];
                    year = (BigDecimal) row[5];
                    revNo = (BigDecimal) row[7];
                    billRrasDet.setUniqueId(bg);
                    billRrasDet.setWeekId(weekId);
                    billRrasDet.setWeekFromdate(weekFromDate);
                    billRrasDet.setWeekTodate(weekToDate);
                    billRrasDet.setBillingDate(bDate);
                    billRrasDet.setRevisionNo(revNo);
                    billRrasDet.setBillYear(year);
                    billRrasDet.setBillDueDate(billDueDate);
                    billRrasDet.setRemarks((String) row[8]);
                    billRrasDet.setBillNo((String) row[9]);

                    billRrasDet.setEntryDate((Timestamp) row[11]);

                    billRrasDet.setBillCategory("PAYABLE");
                    if (revNo == BigDecimal.ZERO) {
                        billRrasDet.setRemarks("Original");
                    } else {
                        billRrasDet.setRemarks("Revised");
                    }
                    billRRASDAO.NewBillRRASDetailsEntries(billRrasDet);

                    tempBillRRASDAO.updatetempbillrrasdetailsstatusbybillcategory("PAYABLE");
                    System.out.println("Entries successfully added in Bill RRAS Details table");
                }
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "PAYABLE", fromDate);

            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "RECEIVABLE", fromDate);
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, "RRAS", yearid);
            for (Object[] listMW1 : payCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks, bill_due_date = null;
                Date billingDate = null;
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
                revNo = (BigDecimal) row[6];
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal + "BillType IS " + BillType);
                bill_due_date = sdf.format(cal.getTime());
                int corporateId = corpId.intValue();
                tempuniqueId = billPayCorpDAO.getMaxUniqueID();
                tempuniqueId = tempuniqueId + 1;
                tempunqId = Integer.toString(tempuniqueId);
                billPayCorp.setUniqueId(new BigDecimal(tempunqId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net);
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillPriority("RRAS");
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date));

                BigDecimal lcAmount = letterDAO.getPresentLCAmountbyId(corporateId, year.toString());
                System.out.println(" lc amount fetched in controller for Corpid" + corporateId + " is: " + lcAmount);

                if (!(lcAmount != null)) {
                    String cropName = corpDAO.getCorporateNamebyID(corporateId);
                    System.out.println("LC amount not present for Corporate : " + cropName);

                    corporatesNotPresent.add(cropName);
                    corpNotPresentCount++;

                    if (corpNotPresentCount > 0) {

                        mav2.addObject("corporatesNotPresent", corporatesNotPresent);
                        //  mv9.addObject("corporates", corporates); 
                        //  return mv9; 
                    }
                } else {
                    BigDecimal lc_Max = BigDecimal.ZERO;
                    lc_Max = ((lcAmount).multiply(new BigDecimal(1.5)));
                    if (lc_Max != null) {

                        String cropName = corpDAO.getCorporateNamebyID(corporateId);
                        System.out.println("Max lc amount  150% for Corporate : " + cropName + "is : " + lc_Max);
                        if (net.compareTo(lc_Max) > 0) {
                            corporates.add(cropName);
                            corpCount++;

                        }

                        if (corpCount > 0) {

                            mav2.addObject("corporates", corporates);
                            //  mv9.addObject("corporates", corporates); 
                            //  return mv9; 
                        }
                    }

                }

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);
                    BigDecimal orgPendingamt = null;
                    BigDecimal prevnetTotal = null;

                    // prevnetTotal=listprebillcorp.get(0).getTotalnet();
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.subtract(prevnetTotal);
                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal + "BillType IS " + BillType);
                            bill_due_date = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempBillDAO.deleteTempBillPayableEntityRRASbyWeekId(weekid, rev, yearid);
                        tempBillRRASDAO.deleteTempBillEntityRRASbyWeekId(weekid, rev, yearid, "PAYABLE");
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "RRAS");
                        billPayEntDAO.deleteBillPayableEntityRRASbyWeekIdYearRevNo(weekId, rev, yearid);
                        billRRASDAO.deleteBillDetailsRRASbyWeekIdYearRevNoCategory(weekId, rev, yearid, "PAYABLE");
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, rev, "RRAS");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of rev geratethan 1
                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }
                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net);
                    reconcorp.setPayPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                }
                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setPendingAmount(net);
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in Dyn Recon table");

            }
            tempBillPayCorp.updatetempbillpayablecorpstatus("RRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from payable");
            if (tempBillDAO.deleteTempBillPayableEntityRRASbyWeekId(weekid, rev, yearid)) {
                tempBillRRASDAO.deleteTempBillEntityRRASbyWeekId(weekid, rev, yearid, "PAYABLE");
                tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "RRAS");
                String msg = "Record Deleted Successfully for Week ID: " + weekid;
                mav2.addObject("Msg", msg);
                return mav2;
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billing_Date);
        mav1.addObject("tempPayList", tempPayList);
        mav1.addObject("tempbilrrasdetilspay", tempbilrrasdetilspay);

        return mav1;
    }

    public ModelAndView verifyUploadRRASReceivable(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadRRASReceivable");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("yearid is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillReceiveEntityRRASDAO tempBillDAO = new TempBillReceiveEntityRRASDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        TempBillRRASDetailsDAO tempRRASDAO = new TempBillRRASDetailsDAO();
        BillRrasDetailsDAO billRRASDAO = new BillRrasDetailsDAO();
        BillReceiveEntityRrasDAO billPayEntDAO = new BillReceiveEntityRrasDAO();
        BillReceiveCorpDAO billReceiveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveEntityRras billEntRras = new BillReceiveEntityRras();
        BillRrasDetails billRrasDet = new BillRrasDetails();
        BillReceiveCorp billReceiveCorp = new BillReceiveCorp();
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        BigDecimal maxRevNo = tempRRASDAO.getMaxRevNoByWeekId(weekid, yearid, "RECEIVABLE");
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        System.out.println("##### rev is " + rev);
        List<Object[]> tempReceiveList = tempBillDAO.getTempRRASReceiveBillDetailsbyWeekId(weekid, yearid, rev);
        System.out.println("tempReceiveList is " + tempReceiveList);
        int tempuniqueId = 0;
        int weekIdFlag = 0;
        String tempunqId = null;
        weekIdFlag = billRRASDAO.checkExistenceOfWeekIDandRevisionNo(weekid, rev, yearid, "RECEIVEBLE");
        System.out.println("In verifyUpload, weekIdFlag is " + weekIdFlag);
        List<Object[]> receiveList = new ArrayList<Object[]>();
        List<Object[]> rrasList = new ArrayList<Object[]>();
        List<Object[]> receiveCorpList = new ArrayList<Object[]>();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date billing_Date = tempRRASDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid, "RECEIVABLE");
        Date fromDate = tempRRASDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid, "RECEIVABLE");
        Date toDate = tempRRASDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid, "RECEIVABLE");
        List<TempBillRrasDetails> tempbillrrasdetlsrec = tempRRASDAO.gettemprrasdetilsbyweekyearrev(weekid, yearid, rev, "RECEIVABLE");

        String saveBtn = request.getParameter("saveBtn");
        System.out.println(" billing_Date is " + billing_Date);
        System.out.println(" fromDate is " + fromDate);
        System.out.println(" toDate is " + toDate);
        System.out.println("saveBtn" + saveBtn);
        if (saveBtn != null) {
            // if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            receiveList = billPayEntDAO.getTempRRASBillReceiveDetailsbyWeekId(weekid, rev, yearid);
            System.out.println("receiveList size is " + receiveList.size());
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "RECEIVABLE", fromDate);

            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("RRAS", "PAYABLE", fromDate);
            for (Object[] listMW1 : receiveList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, entityId, energy_vae, fixed_charges, var_charges, markup_char, net, year, revNo, weekId, corpId = null;
                String billDueDate = null;
                bg = (BigDecimal) row[0];
                entityId = (BigDecimal) row[2];
                weekId = (BigDecimal) row[1];
                energy_vae = (BigDecimal) row[4];
                fixed_charges = (BigDecimal) row[5];
                var_charges = (BigDecimal) row[6];
                markup_char = (BigDecimal) row[7];
                net = (BigDecimal) row[12];
                year = (BigDecimal) row[9];
                revNo = (BigDecimal) row[10];
                corpId = (BigDecimal) row[3];
                billEntRras.setUniqueId(bg);
                billEntRras.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntRras.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntRras.setCorporates(corp);
                billEntRras.setEnergyVae(energy_vae);
                billEntRras.setFixedCharges(fixed_charges);
                billEntRras.setVariableCharges(var_charges);
                billEntRras.setMarkupCharges(markup_char);
                billEntRras.setNetRras(net);
                billEntRras.setBillYear(year);
                billEntRras.setRevisionNo(revNo);
                billEntRras.setBillingDate(billing_Date);
                Calendar cal = Calendar.getInstance();
                cal.setTime(billing_Date);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                billDueDate = sdf.format(cal.getTime());
                billEntRras.setBillDueDate(sdf.parse(billDueDate));
                billEntRras.setRemarks((String) row[11]);
                billPayEntDAO.NewBillPayRrasEntries(billEntRras);

                tempBillDAO.updatetempbillreceivableentityrrasstatus();
                System.out.println("Entries successfully added in Bill Receive Entity RRAS table");
            }
            if (weekIdFlag == 0) {
                rrasList = billRRASDAO.getTempBillRRASDetailsbyWeekId(weekid, yearid, rev, "RECEIVABLE");
                for (Object[] listMW1 : rrasList) {
                    Object[] row = (Object[]) listMW1;
                    BigDecimal bg, weekId, year, revNo = null;
                    Date weekFromDate, weekToDate, bDate, billDueDate = null;
                    bg = (BigDecimal) row[0];
                    weekId = (BigDecimal) row[1];
                    weekFromDate = (Date) row[2];
                    weekToDate = (Date) row[3];
                    bDate = (Date) row[4];
                    billDueDate = (Date) row[6];
                    year = (BigDecimal) row[5];
                    revNo = (BigDecimal) row[7];
                    billRrasDet.setUniqueId(bg);
                    billRrasDet.setWeekId(weekId);
                    billRrasDet.setWeekFromdate(weekFromDate);
                    billRrasDet.setWeekTodate(weekToDate);
                    billRrasDet.setBillingDate(bDate);
                    billRrasDet.setRevisionNo(revNo);
                    billRrasDet.setBillYear(year);
                    billRrasDet.setBillDueDate(billDueDate);
                    billRrasDet.setRemarks((String) row[8]);
                    billRrasDet.setBillNo((String) row[9]);
                    billRrasDet.setEntryDate((Timestamp) row[11]);

                    billRrasDet.setBillCategory("RECEIVABLE");
                    billRRASDAO.NewBillRRASDetailsEntries(billRrasDet);

                    tempRRASDAO.updatetempbillrrasdetailsstatusbybillcategory("RECEIVABLE");
                    System.out.println("Entries successfully added in Bill RRAS Details table");
                }
            }
            receiveCorpList = billReceiveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, "RRAS");
            System.out.println("@@@@@@@@ receiveCorpList size is " + receiveCorpList.size());
            for (Object[] listMW1 : receiveCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null, billDueDate = null;
                String BillType, remarks = null;
                Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
                revNo = (BigDecimal) row[6];
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                tempuniqueId = billReceiveCorpDAO.getMaxUniqueID();
                tempuniqueId = tempuniqueId + 1;
                tempunqId = Integer.toString(tempuniqueId);
                billReceiveCorp.setUniqueId(new BigDecimal(tempunqId));
                billReceiveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billReceiveCorp.setCorporates(corp);
                billReceiveCorp.setToalnet(net);
                billReceiveCorp.setNetDsm(net);
                billReceiveCorp.setBillYear(year);
                billReceiveCorp.setRevisionNo(revNo);
                billReceiveCorp.setRemarks(remarks);
                billReceiveCorp.setBillType(BillType);
                billReceiveCorp.setBillingDate(billingDate);
                billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);
                billReceiveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billReceiveCorp.setAdjustmentflag("0");
                billReceiveCorp.setBillPriority("RRAS");

                cal.setTime(billing_Date);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                String billDueDate1 = sdf.format(cal.getTime());
                billReceiveCorp.setBillDueDate(sdf.parse(billDueDate1));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(billDueDate1));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    List<BillReceiveCorp> listprebillcorp = billReceiveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;

//                        prevnetTotal=listprebillcorp.get(0).getToalnet();
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempBillDAO.deleteTempBillReceiveEntityRRASbyWeekId(weekId, revNo, yearid);
                        tempRRASDAO.deleteTempBillEntityRRASbyWeekId(weekId, revNo, year, "RECEIVABLE");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "RRAS");
                        billPayEntDAO.deleteBillReceiveEntityRRASbyWeekIdRevNoYear(weekId, revNo, year);
                        billRRASDAO.deleteBillDetailsRRASbyWeekIdYearRevNoCategory(weekId, revNo, year, msg);
                        billReceiveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "RRAS");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }

                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billReceiveCorp.setRevisedpaybale(orgPendingamt);
                        billReceiveCorp.setPendingAmount(orgPendingamt);
                        billReceiveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billReceiveCorp.setDisburseStatus("NOT PAID");
                        billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billReceiveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billReceiveCorp.setRevisedrefund(orgPendingamt.negate());
                        billReceiveCorp.setPendingAmount(orgPendingamt.negate());
                        billReceiveCorp.setDisburseStatus("REFUND");
                        billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billing_Date);
                        cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        billDueDate1 = sdf.format(cal.getTime());
                        billReceiveCorp.setBillDueDate(sdf.parse(billDueDate1));

                        reconcorp.setBillDueDate(sdf.parse(billDueDate1));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billReceiveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billReceiveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billReceiveCorp.setPendingAmount(BigDecimal.ZERO);
                        billReceiveCorp.setDisburseStatus("PAID");
                        billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }
                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billReceiveCorp.setBillCategory("Original");
                    billReceiveCorp.setPendingAmount(net);
                    billReceiveCorp.setDisburseStatus("NOT PAID");
                    billReceiveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billReceiveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billReceiveCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");

                } else {
                    billReceiveCorp.setBillCategory("Revised");
                }
                billReceiveCorpDAO.NewBillReceiveCorpEntries(billReceiveCorp);
                System.out.println("Entries successfully added in Bill Receive Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in Dyn Recon table");
            }

            tempBillcorpDAO.updatetempbillreceivablecorpstatus("RRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from payable");
            if (tempBillDAO.deleteTempBillReceiveEntityRRASbyWeekId(weekid, rev, yearid)) {
                if (tempRRASDAO.deleteTempBillEntityRRASbyWeekId(weekid, rev, yearid, "RECEIVABLE"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "RRAS"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billing_Date);
        mav1.addObject("tempReceiveList", tempReceiveList);
        mav1.addObject("tempbillrrasdetlsrec", tempbillrrasdetlsrec);

        return mav1;
    }

    public ModelAndView verifyUploadAGC(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadAGC");

        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekId(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillAgcDetails> tempagcdetils = tempBillAGCDAO.gettempagcdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityAgcDAO tempbillEntityAgcDAO = new TempBillEntityAgcDAO();
        BillEntityAgcDAO billEntityAgcDAO = new BillEntityAgcDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillAgcDetailsDAO billAgcDetailsDAO = new BillAgcDetailsDAO();
        BillEntityAgc billEntAGC = new BillEntityAgc();
        BillAgcDetails billAgcDetails = new BillAgcDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billAgcList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillAGCDAO.getBillNobyWeekIdandRevisionNo(weekid, rev, yearid);
        Date billingDate = tempBillAGCDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date fromDate = tempBillAGCDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date toDate = tempBillAGCDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityAgcDAO.getTempAGCBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            // if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            payRecList = billEntityAgcDAO.getTempAGCBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payRecList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal uId, entityId, totalAgcUpDown, markUpCharges, totalNetAgc, agcEnergyCharges, totalPoolCharges, billYear, revNo, weekId, corpId = null;
                String payRecvFlag = null, remarks = null;
                uId = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                entityId = (BigDecimal) row[2];
                corpId = (BigDecimal) row[3];
                totalAgcUpDown = (BigDecimal) row[4];
                markUpCharges = (BigDecimal) row[5];
                totalNetAgc = (BigDecimal) row[6];
                agcEnergyCharges = (BigDecimal) row[7];
//                totalPoolCharges = (BigDecimal) row[8];
                totalPoolCharges = (BigDecimal) row[13];

                payRecvFlag = (String) row[9];
                billYear = (BigDecimal) row[10];
                revNo = (BigDecimal) row[11];
                remarks = (String) row[12];
                uniqueId = billEntityAgcDAO.getMaxUniqueIDAgc();
                uniqueId = uniqueId + 1;
                billEntAGC.setUniqueId(new BigDecimal(uniqueId));
                billEntAGC.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntAGC.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntAGC.setCorporates(corp);
                billEntAGC.setTotalAgcUpdownMwh(totalAgcUpDown);
                billEntAGC.setMarkupCharges(markUpCharges);
                billEntAGC.setAgcEnergycharges(agcEnergyCharges);
                billEntAGC.setTotalcharges(totalPoolCharges);
                billEntAGC.setTotalnetAgc(totalNetAgc);
                billEntAGC.setRevisionNo(revNo);
                billEntAGC.setBillDueDate(billingDate);
                billEntAGC.setBillYear(billYear);
                billEntAGC.setRemarks(remarks);
                billEntAGC.setPayRecvflag(payRecvFlag);
                billEntityAgcDAO.NewBillAGCEntries(billEntAGC);

                tempbillEntityAgcDAO.updatetempbillentityagcstatus();
                System.out.println("Entries successfully added in Bill AGC Entites table");
            }
            billAgcList = billAgcDetailsDAO.getTempAGCBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billAgcList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billAgcDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billAgcDetails.setUniqueId(new BigDecimal(uniqueId));
                billAgcDetails.setWeekId(weekId);
                billAgcDetails.setWeekFromdate(weekFromDate);
                billAgcDetails.setWeekTodate(weekToDate);
                billAgcDetails.setBillingDate(bDate);
                billAgcDetails.setRevisionNo(revNo);
                billAgcDetails.setBillYear(year);
                billAgcDetails.setBillDueDate(billDueDate);
                billAgcDetails.setRemarks((String) row[8]);
                billAgcDetails.setBillNo((String) row[9]);
                billAgcDetails.setEntryDate((Timestamp) row[10]);
                billAgcDetailsDAO.NewBillAGCDetailsEntries(billAgcDetails);

                tempBillAGCDAO.updatetempbillagcdetailsstatus();
                System.out.println("Entries successfully added in Bill AGC Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("AGC", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("AGC", "RECEIVABLE", fromDate);
            String billType = "AGC";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {

                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.multiply(mul).subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

                        tempbillEntityAgcDAO.deleteTempBillPayableAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        billEntityAgcDAO.deleteBillEntityAGCbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillAGCDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of revision no > 0

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");

                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("AGC");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityAgcDAO.deleteTempBillPayableAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        billEntityAgcDAO.deleteBillEntityAGCbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillAGCDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("AGC");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("AGC");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from AGC ENTITY TEMP TABLE");
            if (tempbillEntityAgcDAO.deleteTempBillPayableAGCDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillAGCDAO.deleteTempBillAGCDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "AGC"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "AGC"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempagcdetils", tempagcdetils);

        return mav1;
    }

    public ModelAndView verifyUploadSRAS(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadSRAS");

        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekIdsras(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillSrasDetails> tempagcdetils = tempBillAGCDAO.gettempsrasdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityAgcDAO tempbillEntityAgcDAO = new TempBillEntityAgcDAO();
        BillEntityAgcDAO billEntityAgcDAO = new BillEntityAgcDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillAgcDetailsDAO billAgcDetailsDAO = new BillAgcDetailsDAO();
        BillEntitySras billEntAGC = new BillEntitySras();
        BillSrasDetails billAgcDetails = new BillSrasDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billAgcList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillAGCDAO.getBillNobyWeekIdandRevisionNosras(weekid, rev, yearid);
        Date billingDate = tempBillAGCDAO.getBillingDatebyWeekIdandRevisionNosras(weekid, rev, yearid);
        Date fromDate = tempBillAGCDAO.getFromDatebyWeekIdandRevisionNosras(weekid, rev, yearid);
        Date toDate = tempBillAGCDAO.getToDatebyWeekIdandRevisionNosras(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityAgcDAO.getTempSRASBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            // if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            payRecList = billEntityAgcDAO.getTempSRASBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payRecList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal uId, entityId, totalAgcUpDown, totalAgcDown, markUpCharges, totalNetAgc, agcEnergyCharges, totalPoolCharges, billYear, revNo, weekId, corpId = null;
                String payRecvFlag = null, remarks = null;
                uId = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                entityId = (BigDecimal) row[2];
                corpId = (BigDecimal) row[3];
                totalAgcUpDown = (BigDecimal) row[4];
                totalAgcDown = (BigDecimal) row[5];
                markUpCharges = (BigDecimal) row[6];
                totalNetAgc = (BigDecimal) row[7];
                agcEnergyCharges = (BigDecimal) row[8];
//                totalPoolCharges = (BigDecimal) row[8];
                totalPoolCharges = (BigDecimal) row[14];

                payRecvFlag = (String) row[10];
                billYear = (BigDecimal) row[11];
                revNo = (BigDecimal) row[12];
                remarks = (String) row[13];
                uniqueId = billEntityAgcDAO.getMaxUniqueIDSras();
                uniqueId = uniqueId + 1;
                billEntAGC.setUniqueId(new BigDecimal(uniqueId));
                billEntAGC.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntAGC.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntAGC.setCorporates(corp);
                billEntAGC.setTotalAgcUpdownMwh(totalAgcUpDown);
                billEntAGC.setTotalAgcDownMwh(totalAgcDown);

                billEntAGC.setMarkupCharges(markUpCharges);
                billEntAGC.setAgcEnergycharges(agcEnergyCharges);
                billEntAGC.setTotalcharges(totalPoolCharges);
                billEntAGC.setTotalnetAgc(totalNetAgc);
                billEntAGC.setRevisionNo(revNo);
                billEntAGC.setBillDueDate(billingDate);
                billEntAGC.setBillYear(billYear);
                billEntAGC.setRemarks(remarks);
                billEntAGC.setPayRecvflag(payRecvFlag);
                billEntityAgcDAO.NewBillSRASEntries(billEntAGC);

                tempbillEntityAgcDAO.updatetempbillentitysrasstatus();
                System.out.println("Entries successfully added in Bill SRAS Entites table");
            }
            billAgcList = billAgcDetailsDAO.getTempSRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billAgcList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billAgcDetailsDAO.getMaxUniqueIDsras();
                uniqueId = uniqueId + 1;
                billAgcDetails.setUniqueId(new BigDecimal(uniqueId));
                billAgcDetails.setWeekId(weekId);
                billAgcDetails.setWeekFromdate(weekFromDate);
                billAgcDetails.setWeekTodate(weekToDate);
                billAgcDetails.setBillingDate(bDate);
                billAgcDetails.setRevisionNo(revNo);
                billAgcDetails.setBillYear(year);
                billAgcDetails.setBillDueDate(billDueDate);
                billAgcDetails.setRemarks((String) row[8]);
                billAgcDetails.setBillNo((String) row[9]);
                billAgcDetails.setEntryDate((Timestamp) row[10]);
                billAgcDetailsDAO.NewBillSRASDetailsEntries(billAgcDetails);

                tempBillAGCDAO.updatetempbillsrasdetailsstatus();
                System.out.println("Entries successfully added in Bill SRAS Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("SRAS", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("SRAS", "RECEIVABLE", fromDate);
            String billType = "SRAS";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {

                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.multiply(mul).subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

                        tempbillEntityAgcDAO.deleteTempBillPayableSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        billEntityAgcDAO.deleteBillEntitySRASbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillSRASDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of revision no > 0

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");

                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("SRAS");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityAgcDAO.deleteTempBillPayableSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        billEntityAgcDAO.deleteBillEntitySRASbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillSRASDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("SRAS");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("SRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from SRAS ENTITY TEMP TABLE");
            if (tempbillEntityAgcDAO.deleteTempBillPayableSRASDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillAGCDAO.deleteTempBillSRASDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "SRAS"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "SRAS"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempagcdetils", tempagcdetils);

        return mav1;
    }

    public ModelAndView verifyUploadTRASM(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadTRASM");

        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillTRASMDetailsDAO tempBillTRASMDAO = new TempBillTRASMDetailsDAO();
        BigDecimal maxRevNo = tempBillTRASMDAO.getMaxRevNoByWeekIdTRASM(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillTrasMDetails> temptrasmdetils = tempBillTRASMDAO.gettemptrasmdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityTRASMDAO tempbillEntityTRASMDAO = new TempBillEntityTRASMDAO();
        BillEntityTRASMDAO billEntityTRASMDAO = new BillEntityTRASMDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillTRASMDetailsDAO billTRASMDetailsDAO = new BillTRASMDetailsDAO();
        BillEntityTrasM billEntTRASM = new BillEntityTrasM();
        BillTrasMDetails billTrasmDetails = new BillTrasMDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billTrasmList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = temptrasmdetils.get(0).getBillNo();
        Date billingDate = temptrasmdetils.get(0).getBillingDate();
        Date fromDate = temptrasmdetils.get(0).getWeekFromdate();
        Date toDate = temptrasmdetils.get(0).getWeekTodate();
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityTRASMDAO.getTempTRASMBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            List<TempBillEntityTrasM> tempbillenttrasmlist = billEntityTRASMDAO.getTempBillEntityTrasM(weekid, yearid, rev);
            for (TempBillEntityTrasM s : tempbillenttrasmlist) {

                uniqueId = billEntityTRASMDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billEntTRASM.setUniqueId(new BigDecimal(uniqueId));
                billEntTRASM.setWeekId(s.getWeekId());
                ent.setEntityId(s.getEntites().getEntityId());
                billEntTRASM.setEntites(ent);
                corp.setCorporateId(s.getCorporates().getCorporateId());
                billEntTRASM.setCorporates(corp);
                billEntTRASM.setTrasUpClearedAhead(s.getTrasUpClearedAhead());
                billEntTRASM.setTrasUpComChargesAhead(s.getTrasUpComChargesAhead());
                billEntTRASM.setTrasUpEnergyChargesAhead(s.getTrasUpEnergyChargesAhead());
                billEntTRASM.setTrasUpScheduledAhead(s.getTrasUpScheduledAhead());
                billEntTRASM.setTrasUpClearedReal(s.getTrasUpClearedReal());
                billEntTRASM.setTrasUpComChargesReal(s.getTrasUpComChargesReal());
                billEntTRASM.setTrasUpEnergyChargesReal(s.getTrasUpEnergyChargesReal());
                billEntTRASM.setTrasUpScheduledReal(s.getTrasUpScheduledReal());
                billEntTRASM.setTrasUpTotalCharges(s.getTrasUpTotalCharges());
                billEntTRASM.setTrasDownEnergyChargesAhead(s.getTrasDownEnergyChargesAhead());
                billEntTRASM.setTrasDownEnergyChargesReal(s.getTrasDownEnergyChargesReal());
                billEntTRASM.setTrasDownScheduledAhead(s.getTrasDownScheduledAhead());
                billEntTRASM.setTrasDownScheduledReal(s.getTrasDownScheduledReal());
                billEntTRASM.setNetTras(s.getWrNetTras());
                billEntTRASM.setBillYear(s.getBillYear());
                billEntTRASM.setRevisionNo(s.getRevisionNo());
                billEntTRASM.setRemarks(s.getRemarks());

                billEntityTRASMDAO.NewBillEntityTRASM(billEntTRASM);

                tempbillEntityTRASMDAO.updatetempbillentitytrasmstatus();
                System.out.println("Entries successfully added in Bill TRAS-M Entites table");
            }
            billTrasmList = billTRASMDetailsDAO.getTempTRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billTrasmList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
                uniqueId = billTRASMDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billTrasmDetails.setUniqueId(new BigDecimal(uniqueId));
                billTrasmDetails.setWeekId(weekId);
                billTrasmDetails.setWeekFromdate(weekFromDate);
                billTrasmDetails.setWeekTodate(weekToDate);
                billTrasmDetails.setBillingDate(bDate);
                billTrasmDetails.setRevisionNo(revNo);
                billTrasmDetails.setBillYear(year);
                billTrasmDetails.setBillDueDate(billDueDate);
                billTrasmDetails.setRemarks((String) row[8]);
                billTrasmDetails.setBillNo((String) row[9]);
                billTrasmDetails.setEntryDate((Timestamp) row[11]);
                billTRASMDetailsDAO.NewBillTRASMDetails(billTrasmDetails);

                tempBillTRASMDAO.updatetempbilltrasmdetailsstatus();
                System.out.println("Entries successfully added in Bill TRAS Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASM", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASM", "RECEIVABLE", fromDate);
            String billType = "TRASM";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {

                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.multiply(mul).subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

                        tempbillEntityTRASMDAO.deleteTempBillPayableTRASMDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillTRASMDAO.deleteTempBillTRASMDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "TRASM");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "TRASM");
                        billEntityTRASMDAO.deleteBillEntityTRASMbyWeekId(weekId, revNo, year);
                        billTRASMDetailsDAO.deleteBillTRASMDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASM");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASM");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of revision no > 0

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");

                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("TRASM");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityTRASMDAO.deleteTempBillPayableTRASMDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillTRASMDAO.deleteTempBillTRASMDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "TRASM");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "TRASM");
                        billEntityTRASMDAO.deleteBillEntityTRASMbyWeekId(weekId, revNo, year);
                        billTRASMDetailsDAO.deleteBillTRASMDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASM");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASM");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("TRASM");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("TRASM");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from SRAS ENTITY TEMP TABLE");
            if (tempbillEntityTRASMDAO.deleteTempBillPayableTRASMDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillTRASMDAO.deleteTempBillTRASMDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "TRASM"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "TRASM"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempagcdetils", temptrasmdetils);

        return mav1;
    }

    public ModelAndView verifyUploadTRASS(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadTRASS");

        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillTRASSDetailsDAO tempBillTRASSDAO = new TempBillTRASSDetailsDAO();
        BigDecimal maxRevNo = tempBillTRASSDAO.getMaxRevNoByWeekIdTRASS(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillTrasSDetails> temptrassdetils = tempBillTRASSDAO.gettemptrassdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityTRASSDAO tempbillEntityTRASSDAO = new TempBillEntityTRASSDAO();
        BillEntityTRASSDAO billEntityTRASSDAO = new BillEntityTRASSDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillTRASSDetailsDAO billTRASSDetailsDAO = new BillTRASSDetailsDAO();
        BillEntityTrasS billEntTRASS = new BillEntityTrasS();
        BillTrasSDetails billTrassDetails = new BillTrasSDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billTrassList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = temptrassdetils.get(0).getBillNo();
        Date billingDate = temptrassdetils.get(0).getBillingDate();
        Date fromDate = temptrassdetils.get(0).getWeekFromdate();
        Date toDate = temptrassdetils.get(0).getWeekTodate();
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityTRASSDAO.getTempTRASSBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            List<TempBillEntityTrasS> tempbillenttrasslist = billEntityTRASSDAO.getTempBillEntityTrasS(weekid, yearid, rev);
            for (TempBillEntityTrasS s : tempbillenttrasslist) {

                uniqueId = billEntityTRASSDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billEntTRASS.setUniqueId(new BigDecimal(uniqueId));
                billEntTRASS.setWeekId(s.getWeekId());
                ent.setEntityId(s.getEntites().getEntityId());
                billEntTRASS.setEntites(ent);
                corp.setCorporateId(s.getCorporates().getCorporateId());
                billEntTRASS.setCorporates(corp);
                billEntTRASS.setTrasUpEnergyShort(s.getTrasUpEnergyShort());
                billEntTRASS.setTrasUpCharges(s.getTrasUpCharges());
                billEntTRASS.setTrasDownEnergyShort(s.getTrasDownEnergyShort());
                billEntTRASS.setTrasDownCharges(s.getTrasDownCharges());
                billEntTRASS.setPayRecvflag(s.getPayRecvflag());

                billEntTRASS.setNetTras(s.getWrNetTras());
                billEntTRASS.setBillYear(s.getBillYear());
                billEntTRASS.setRevisionNo(s.getRevisionNo());
                billEntTRASS.setRemarks(s.getRemarks());

                billEntityTRASSDAO.NewBillEntityTRASS(billEntTRASS);

                tempbillEntityTRASSDAO.updatetempbillentitytrassstatus();
                System.out.println("Entries successfully added in Bill TRAS-M Entites table");
            }
            billTrassList = billTRASSDetailsDAO.getTempTRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billTrassList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
                uniqueId = billTRASSDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billTrassDetails.setUniqueId(new BigDecimal(uniqueId));
                billTrassDetails.setWeekId(weekId);
                billTrassDetails.setWeekFromdate(weekFromDate);
                billTrassDetails.setWeekTodate(weekToDate);
                billTrassDetails.setBillingDate(bDate);
                billTrassDetails.setRevisionNo(revNo);
                billTrassDetails.setBillYear(year);
                billTrassDetails.setBillDueDate(billDueDate);
                billTrassDetails.setRemarks((String) row[8]);
                billTrassDetails.setBillNo((String) row[9]);
                billTrassDetails.setEntryDate((Timestamp) row[11]);
                billTRASSDetailsDAO.NewBillTRASSDetails(billTrassDetails);

                tempBillTRASSDAO.updatetempbilltrassdetailsstatus();
                System.out.println("Entries successfully added in Bill TRAS-S Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASS", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASS", "RECEIVABLE", fromDate);
            String billType = "TRASS";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {

                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.multiply(mul).subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

                        tempbillEntityTRASSDAO.deleteTempBillPayableTRASSDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillTRASSDAO.deleteTempBillTRASSDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "TRASS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "TRASS");
                        billEntityTRASSDAO.deleteBillEntityTRASSbyWeekId(weekId, revNo, year);
                        billTRASSDetailsDAO.deleteBillTRASSDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASS");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of revision no > 0

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");

                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("TRASS");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityTRASSDAO.deleteTempBillPayableTRASSDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillTRASSDAO.deleteTempBillTRASSDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "TRASS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "TRASS");
                        billEntityTRASSDAO.deleteBillEntityTRASSbyWeekId(weekId, revNo, year);
                        billTRASSDetailsDAO.deleteBillTRASSDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASS");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("TRASS");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("TRASS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from TRAS-S ENTITY TEMP TABLE");
            if (tempbillEntityTRASSDAO.deleteTempBillPayableTRASSDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillTRASSDAO.deleteTempBillTRASSDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "TRASS"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "TRASS"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempagcdetils", temptrassdetils);

        return mav1;
    }

    public ModelAndView verifyUploadTRASE(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadTRASE");

        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillTRASEDetailsDAO tempBillTRASEDAO = new TempBillTRASEDetailsDAO();
        BigDecimal maxRevNo = tempBillTRASEDAO.getMaxRevNoByWeekIdTRASE(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillTrasEDetails> temptrasedetils = tempBillTRASEDAO.gettemptrasedetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityTRASEDAO tempbillEntityTRASEDAO = new TempBillEntityTRASEDAO();
        BillEntityTRASEDAO billEntityTRASEDAO = new BillEntityTRASEDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillTRASEDetailsDAO billTRASEDetailsDAO = new BillTRASEDetailsDAO();
        BillEntityTrasE billEntTRASE = new BillEntityTrasE();
        BillTrasEDetails billTraseDetails = new BillTrasEDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billTraseList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = temptrasedetils.get(0).getBillNo();
        Date billingDate = temptrasedetils.get(0).getBillingDate();
        Date fromDate = temptrasedetils.get(0).getWeekFromdate();
        Date toDate = temptrasedetils.get(0).getWeekTodate();
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityTRASEDAO.getTempTRASEBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            List<TempBillEntityTrasE> tempbillenttraselist = billEntityTRASEDAO.getTempBillEntityTrasE(weekid, yearid, rev);
            for (TempBillEntityTrasE s : tempbillenttraselist) {

                uniqueId = billEntityTRASEDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billEntTRASE.setUniqueId(new BigDecimal(uniqueId));
                billEntTRASE.setWeekId(s.getWeekId());
                ent.setEntityId(s.getEntites().getEntityId());
                billEntTRASE.setEntites(ent);
                corp.setCorporateId(s.getCorporates().getCorporateId());
                billEntTRASE.setCorporates(corp);
                billEntTRASE.setTrasUpEnergyEmer(s.getTrasUpEnergyEmer());
                billEntTRASE.setTrasUpCharges(s.getTrasUpCharges());
                billEntTRASE.setTrasDownEnergyEmer(s.getTrasDownEnergyEmer());
                billEntTRASE.setTrasDownCharges(s.getTrasDownCharges());
                billEntTRASE.setPayRecvflag(s.getPayRecvflag());

                billEntTRASE.setNetTras(s.getWrNetTras());
                billEntTRASE.setBillYear(s.getBillYear());
                billEntTRASE.setRevisionNo(s.getRevisionNo());
                billEntTRASE.setRemarks(s.getRemarks());

                billEntityTRASEDAO.NewBillEntityTRASE(billEntTRASE);

                tempbillEntityTRASEDAO.updatetempbillentitytrasestatus();
                System.out.println("Entries successfully added in Bill TRAS-E Entites table");
            }
            billTraseList = billTRASEDetailsDAO.getTempTRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billTraseList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
                uniqueId = billTRASEDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billTraseDetails.setUniqueId(new BigDecimal(uniqueId));
                billTraseDetails.setWeekId(weekId);
                billTraseDetails.setWeekFromdate(weekFromDate);
                billTraseDetails.setWeekTodate(weekToDate);
                billTraseDetails.setBillingDate(bDate);
                billTraseDetails.setRevisionNo(revNo);
                billTraseDetails.setBillYear(year);
                billTraseDetails.setBillDueDate(billDueDate);
                billTraseDetails.setRemarks((String) row[8]);
                billTraseDetails.setBillNo((String) row[9]);
                billTraseDetails.setEntryDate((Timestamp) row[11]);
                billTRASEDetailsDAO.NewBillTRASEDetails(billTraseDetails);

                tempBillTRASEDAO.updatetempbilltrasedetailsstatus();
                System.out.println("Entries successfully added in Bill TRAS-E Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASE", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("TRASE", "RECEIVABLE", fromDate);
            String billType = "TRASE";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {

                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.multiply(mul).subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

                        tempbillEntityTRASEDAO.deleteTempBillPayableTRASEDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillTRASEDAO.deleteTempBillTRASEDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "TRASE");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "TRASE");
                        billEntityTRASEDAO.deleteBillEntityTRASEbyWeekId(weekId, revNo, year);
                        billTRASEDetailsDAO.deleteBillTRASEDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASE");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASE");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of revision no > 0

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");

                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("TRASE");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityTRASEDAO.deleteTempBillPayableTRASEDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillTRASEDAO.deleteTempBillTRASEDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "TRASE");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "TRASE");
                        billEntityTRASEDAO.deleteBillEntityTRASEbyWeekId(weekId, revNo, year);
                        billTRASEDetailsDAO.deleteBillTRASEDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASE");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "TRASE");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("TRASE");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("TRASE");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from TRAS-S ENTITY TEMP TABLE");
            if (tempbillEntityTRASEDAO.deleteTempBillPayableTRASEDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillTRASEDAO.deleteTempBillTRASEDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "TRASE"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "TRASE"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempagcdetils", temptrasedetils);

        return mav1;
    }

    public ModelAndView verifyREVUploadAGC(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadAGC");

        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekId(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillAgcDetails> tempagcdetils = tempBillAGCDAO.gettempagcdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityAgcDAO tempbillEntityAgcDAO = new TempBillEntityAgcDAO();
        BillEntityAgcDAO billEntityAgcDAO = new BillEntityAgcDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillAgcDetailsDAO billAgcDetailsDAO = new BillAgcDetailsDAO();
        BillEntityAgc billEntAGC = new BillEntityAgc();
        BillAgcDetails billAgcDetails = new BillAgcDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billAgcList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillAGCDAO.getBillNobyWeekIdandRevisionNo(weekid, rev, yearid);
        Date billingDate = tempBillAGCDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date fromDate = tempBillAGCDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date toDate = tempBillAGCDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityAgcDAO.getTempAGCBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            // if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            payRecList = billEntityAgcDAO.getTempAGCBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payRecList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal uId, entityId, totalAgcUpDown, markUpCharges, totalNetAgc, agcEnergyCharges, totalPoolCharges, billYear, revNo, weekId, corpId = null;
                String payRecvFlag = null, remarks = null;
                uId = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                entityId = (BigDecimal) row[2];
                corpId = (BigDecimal) row[3];
                totalAgcUpDown = (BigDecimal) row[4];
                markUpCharges = (BigDecimal) row[5];
                totalNetAgc = (BigDecimal) row[6];
                agcEnergyCharges = (BigDecimal) row[7];
//                totalPoolCharges = (BigDecimal) row[8];
                totalPoolCharges = (BigDecimal) row[13];

                payRecvFlag = (String) row[9];
                billYear = (BigDecimal) row[10];
                revNo = (BigDecimal) row[11];
                remarks = (String) row[12];
                uniqueId = billEntityAgcDAO.getMaxUniqueIDAgc();
                uniqueId = uniqueId + 1;
                billEntAGC.setUniqueId(new BigDecimal(uniqueId));
                billEntAGC.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntAGC.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntAGC.setCorporates(corp);
                billEntAGC.setTotalAgcUpdownMwh(totalAgcUpDown);
                billEntAGC.setMarkupCharges(markUpCharges);
                billEntAGC.setAgcEnergycharges(agcEnergyCharges);
                billEntAGC.setTotalcharges(totalPoolCharges);
                billEntAGC.setTotalnetAgc(totalNetAgc);
                billEntAGC.setRevisionNo(revNo);
                billEntAGC.setBillDueDate(billingDate);
                billEntAGC.setBillYear(billYear);
                billEntAGC.setRemarks(remarks);
                billEntAGC.setPayRecvflag(payRecvFlag);
                billEntityAgcDAO.NewBillAGCEntries(billEntAGC);

                tempbillEntityAgcDAO.updatetempbillentityagcstatus();
                System.out.println("Entries successfully added in Bill AGC Entites table");
            }
            billAgcList = billAgcDetailsDAO.getTempAGCBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billAgcList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billAgcDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billAgcDetails.setUniqueId(new BigDecimal(uniqueId));
                billAgcDetails.setWeekId(weekId);
                billAgcDetails.setWeekFromdate(weekFromDate);
                billAgcDetails.setWeekTodate(weekToDate);
                billAgcDetails.setBillingDate(bDate);
                billAgcDetails.setRevisionNo(revNo);
                billAgcDetails.setBillYear(year);
                billAgcDetails.setBillDueDate(billDueDate);
                billAgcDetails.setRemarks((String) row[8]);
                billAgcDetails.setBillNo((String) row[9]);
                billAgcDetails.setEntryDate((Timestamp) row[10]);
                billAgcDetailsDAO.NewBillAGCDetailsEntries(billAgcDetails);

                tempBillAGCDAO.updatetempbillagcdetailsstatus();
                System.out.println("Entries successfully added in Bill AGC Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("AGC", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("AGC", "RECEIVABLE", fromDate);
            String billType = "AGC";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;

                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableAGCforprevnet(weekId, revNo, year, corporateId);

                    System.out.println("prevtotalnet is " + prevtotalnet);

                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();
                        BigDecimal prevnetTotal = prevtotalnet;
                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = (net.multiply(mul)).subtract(prevnetTotal.multiply(mul));

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

                        tempbillEntityAgcDAO.deleteTempBillPayableAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        billEntityAgcDAO.deleteBillEntityAGCbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillAGCDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of revision no > 0

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("AGC");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;

                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableAGCforprevnet(weekId, revNo, year, corpId.intValue());

                    System.out.println("prevtotalnet is " + prevtotalnet);
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                        prevnetTotal = listprebillcorp.get(0).getToalnet();
                        prevnetTotal = prevtotalnet;

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityAgcDAO.deleteTempBillPayableAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillAGCDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "AGC");
                        billEntityAgcDAO.deleteBillEntityAGCbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillAGCDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "AGC");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("AGC");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("AGC");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from AGC ENTITY TEMP TABLE");
            if (tempbillEntityAgcDAO.deleteTempBillPayableAGCDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillAGCDAO.deleteTempBillAGCDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "AGC"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "AGC"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempagcdetils", tempagcdetils);

        return mav1;
    }

    public ModelAndView verifyREVUploadSRAS(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadSRAS");

        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillAGCDetailsDAO tempBillAGCDAO = new TempBillAGCDetailsDAO();
        BigDecimal maxRevNo = tempBillAGCDAO.getMaxRevNoByWeekIdsras(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillSrasDetails> tempagcdetils = tempBillAGCDAO.gettempsrasdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityAgcDAO tempbillEntityAgcDAO = new TempBillEntityAgcDAO();
        BillEntityAgcDAO billEntityAgcDAO = new BillEntityAgcDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillAgcDetailsDAO billAgcDetailsDAO = new BillAgcDetailsDAO();
        BillSrasDetails billAgcDetails = new BillSrasDetails();
        BillEntitySras billEntAGC = new BillEntitySras();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billAgcList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillAGCDAO.getBillNobyWeekIdandRevisionNosras(weekid, rev, yearid);
        Date billingDate = tempBillAGCDAO.getBillingDatebyWeekIdandRevisionNosras(weekid, rev, yearid);
        Date fromDate = tempBillAGCDAO.getFromDatebyWeekIdandRevisionNosras(weekid, rev, yearid);
        Date toDate = tempBillAGCDAO.getToDatebyWeekIdandRevisionNosras(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityAgcDAO.getTempSRASBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            // if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            payRecList = billEntityAgcDAO.getTempSRASBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payRecList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal uId, entityId, totalAgcUpDown, totalAgcDown, markUpCharges, totalNetAgc, agcEnergyCharges, totalPoolCharges, billYear, revNo, weekId, corpId = null;
                String payRecvFlag = null, remarks = null;
                uId = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                entityId = (BigDecimal) row[2];
                corpId = (BigDecimal) row[3];
                totalAgcUpDown = (BigDecimal) row[4];
                totalAgcDown = (BigDecimal) row[5];

                markUpCharges = (BigDecimal) row[6];
                totalNetAgc = (BigDecimal) row[7];
                agcEnergyCharges = (BigDecimal) row[8];
//                totalPoolCharges = (BigDecimal) row[8];
                totalPoolCharges = (BigDecimal) row[14];

                payRecvFlag = (String) row[10];
                billYear = (BigDecimal) row[11];
                revNo = (BigDecimal) row[12];
                remarks = (String) row[13];
                uniqueId = billEntityAgcDAO.getMaxUniqueIDSras();
                uniqueId = uniqueId + 1;
                billEntAGC.setUniqueId(new BigDecimal(uniqueId));
                billEntAGC.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntAGC.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntAGC.setCorporates(corp);
                billEntAGC.setTotalAgcUpdownMwh(totalAgcUpDown);
                billEntAGC.setTotalAgcUpdownMwh(totalAgcDown);

                billEntAGC.setMarkupCharges(markUpCharges);
                billEntAGC.setAgcEnergycharges(agcEnergyCharges);
                billEntAGC.setTotalcharges(totalPoolCharges);
                billEntAGC.setTotalnetAgc(totalNetAgc);
                billEntAGC.setRevisionNo(revNo);
                billEntAGC.setBillDueDate(billingDate);
                billEntAGC.setBillYear(billYear);
                billEntAGC.setRemarks(remarks);
                billEntAGC.setPayRecvflag(payRecvFlag);
                billEntityAgcDAO.NewBillSRASEntries(billEntAGC);

                tempbillEntityAgcDAO.updatetempbillentitysrasstatus();
                System.out.println("Entries successfully added in Bill AGC Entites table");
            }
            billAgcList = billAgcDetailsDAO.getTempSRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billAgcList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billAgcDetailsDAO.getMaxUniqueIDsras();
                uniqueId = uniqueId + 1;
                billAgcDetails.setUniqueId(new BigDecimal(uniqueId));
                billAgcDetails.setWeekId(weekId);
                billAgcDetails.setWeekFromdate(weekFromDate);
                billAgcDetails.setWeekTodate(weekToDate);
                billAgcDetails.setBillingDate(bDate);
                billAgcDetails.setRevisionNo(revNo);
                billAgcDetails.setBillYear(year);
                billAgcDetails.setBillDueDate(billDueDate);
                billAgcDetails.setRemarks((String) row[8]);
                billAgcDetails.setBillNo((String) row[9]);
                billAgcDetails.setEntryDate((Timestamp) row[10]);
                billAgcDetailsDAO.NewBillSRASDetailsEntries(billAgcDetails);

                tempBillAGCDAO.updatetempbillsrasdetailsstatus();
                System.out.println("Entries successfully added in Bill SRAS Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("SRAS", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("SRAS", "RECEIVABLE", fromDate);
            String billType = "SRAS";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;

                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableSRASforprevnet(weekId, revNo, year, corporateId);

                    System.out.println("prevtotalnet is " + prevtotalnet);

                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();
                        BigDecimal prevnetTotal = prevtotalnet;
                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = (net.multiply(mul)).subtract(prevnetTotal.multiply(mul));

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

                        tempbillEntityAgcDAO.deleteTempBillPayableSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        billEntityAgcDAO.deleteBillEntitySRASbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillSRASDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }//end of revision no > 0

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("AGC");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;

                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableSRASforprevnet(weekId, revNo, year, corpId.intValue());

                    System.out.println("prevtotalnet is " + prevtotalnet);
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                        prevnetTotal = listprebillcorp.get(0).getToalnet();
                        prevnetTotal = prevtotalnet;

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityAgcDAO.deleteTempBillPayableSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillAGCDAO.deleteTempBillSRASDetailsbyWeekId(weekid, revNo, yearid);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, revNo, "SRAS");
                        billEntityAgcDAO.deleteBillEntitySRASbyWeekId(weekId, revNo, year);
                        billAgcDetailsDAO.deleteBillSRASDetailsbyWeekIdRevNoYearId(weekId, revNo, yearid);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "SRAS");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("SRAS");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("SRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from AGC ENTITY TEMP TABLE");
            if (tempbillEntityAgcDAO.deleteTempBillPayableSRASDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillAGCDAO.deleteTempBillSRASDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "SRAS"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "SRAS"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempagcdetils", tempagcdetils);

        return mav1;
    }

    public ModelAndView verifyUploadFRAS(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadFRAS");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillFRASDetailsDAO tempBillFRASDAO = new TempBillFRASDetailsDAO();
        BigDecimal maxRevNo = tempBillFRASDAO.getMaxRevNoByWeekId(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillFrasDetails> tempbilfrasdetls = tempBillFRASDAO.gettempfrasdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillEntityFrasDAO tempbillEntityFrasDAO = new TempBillEntityFrasDAO();
        BillEntityFrasDAO billEntityFrasDAO = new BillEntityFrasDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillFrasDetailsDAO billFrasDetailsDAO = new BillFrasDetailsDAO();
        BillEntityFras billEntFRAS = new BillEntityFras();
        BillFrasDetails billFrasDetails = new BillFrasDetails();
        List<Object[]> payRecList = new ArrayList<Object[]>();
        List<Object[]> billFrasList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillFRASDAO.getBillNobyWeekIdandRevisionNo(weekid, rev, yearid);
        Date billingDate = tempBillFRASDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date fromDate = tempBillFRASDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date toDate = tempBillFRASDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayRecList = tempbillEntityFrasDAO.getTempFRASBillDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            //if (submitBtn.equalsIgnoreCase("Save")) {
            ModelAndView mav2 = new ModelAndView("successMsg");
            payRecList = billEntityFrasDAO.getTempFRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payRecList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal uId, entityId, markUpCharges, upRegulation, downRegulation, billYear, revNo, weekId, corpId = null;
                String remarks = null;
                uId = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                entityId = (BigDecimal) row[2];
                corpId = (BigDecimal) row[3];
                upRegulation = (BigDecimal) row[4];
                downRegulation = (BigDecimal) row[5];
//                markUpCharges = (BigDecimal) row[6];
                markUpCharges = (BigDecimal) row[7];

                billYear = (BigDecimal) row[8];
                revNo = (BigDecimal) row[9];
                remarks = (String) row[10];
                uniqueId = billEntityFrasDAO.getMaxUniqueIDFras();
                uniqueId = uniqueId + 1;
                billEntFRAS.setUniqueId(new BigDecimal(uniqueId));
                billEntFRAS.setWeekId(weekId);
                ent.setEntityId(entityId);
                billEntFRAS.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billEntFRAS.setCorporates(corp);
                billEntFRAS.setUpRegulation(upRegulation);
                billEntFRAS.setDownRegulation(downRegulation);
                billEntFRAS.setMarkupCharges(markUpCharges);
                billEntFRAS.setRevisionNo(revNo);
                billEntFRAS.setBillYear(billYear);
                billEntFRAS.setRemarks(remarks);
                billEntityFrasDAO.NewBillFRASEntries(billEntFRAS);

                tempbillEntityFrasDAO.updatetempbillentityfrasstatus();
                System.out.println("Entries successfully added in Bill FRAS Entites table");
            }
            billFrasList = billFrasDetailsDAO.getTempFRASBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billFrasList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billFrasDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billFrasDetails.setUniqueId(new BigDecimal(uniqueId));
                billFrasDetails.setWeekId(weekId);
                billFrasDetails.setWeekFromdate(weekFromDate);
                billFrasDetails.setWeekTodate(weekToDate);
                billFrasDetails.setBillingDate(bDate);
                billFrasDetails.setRevisionNo(revNo);
                billFrasDetails.setBillYear(year);
                billFrasDetails.setBillDueDate(billDueDate);
                billFrasDetails.setRemarks((String) row[8]);
                billFrasDetails.setBillNo((String) row[9]);
                billFrasDetails.setEntryDate((Timestamp) row[10]);

                billFrasDetailsDAO.NewBillFRASDetailsEntries(billFrasDetails);

                tempBillFRASDAO.updatetempbillfrasdetailsstatus();
                System.out.println("Entries successfully added in Bill FRAS Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("FRAS", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("FRAS", "RECEIVABLE", fromDate);
            String billType = "FRAS";
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                BigDecimal mul = new BigDecimal("-1");
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
//                    Date billingDate = null;

                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();
//                    tempunqId = Integer.toString(uniqueId);
                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);
                billPayCorp.setTotalnet(net.multiply(mul));
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");
                billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
//                    if(revNo > 0){

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    System.out.println("$$$$$$preRevNo is " + preRevNo);
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {

                        BigDecimal prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.multiply(mul).subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);

                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "FRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "FRAS");
                        billEntityFrasDAO.deleteBillEntityFRASbyWeekIdRevNoYear(weekId, revNo, year);
                        billFrasDetailsDAO.deleteBillFRASDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                }

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPendingAmount(net.multiply(mul));
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setPayFinalamount(net.multiply(mul));
                    reconcorp.setPayPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.multiply(mul).add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }
            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                billRecieveCorp.setBillPriority("FRAS");
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);

                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net);
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net);
                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                List<BillReceiveCorp> listprebillcorp = null;
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());

                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;
                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "FRAS");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "FRAS");
                        billEntityFrasDAO.deleteBillEntityFRASbyWeekIdRevNoYear(weekId, revNo, year);
                        billFrasDetailsDAO.deleteBillFRASDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");

                        mav2.addObject("Msg", msg);
                        return mav2;

                    }
                    orgPendingamt = (net).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);
                        bill_due_date_recv = sdf.format(cal.getTime());
                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");

                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }
                }

//                    if (revNo.compareTo(BigDecimal.ZERO) == 1) {
//                        BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
//                        System.out.println("$$$$$$preRevNo is " + preRevNo);
//
//                        List<BillReceiveCorp> listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());
//
//                        BigDecimal orgPendingamt = null;
//
//                        BigDecimal prevnetTotal = null;
//
////                        prevnetTotal=listprebillcorp.get(0).getToalnet();
//                        if (listprebillcorp != null && listprebillcorp.size() > 0) {
//                            prevnetTotal = listprebillcorp.get(0).getToalnet();
//
//                        } else {
//                            String msg = "Please check the Entities and upload again for Week ID: " + weekId;
//                            tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
//                            tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekId, revNo, year);
//                            tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "FRAS");
//                            tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "FRAS");
//                            billEntityFrasDAO.deleteBillEntityFRASbyWeekIdRevNoYear(weekId, revNo, year);
//                            billFrasDetailsDAO.deleteBillFRASDetailsbyWeekIdRevNoYear(weekId, revNo, year);
//                            billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
//                            billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "FRAS");
//
//                            mav2.addObject("Msg", msg);
//                            return mav2;
//
//                        }
//
//                        orgPendingamt = (net).subtract(prevnetTotal);
//                        BigDecimal totadisamt = billRecieveCorpDAO.getTotalDisbursedAmtByCorpWeekYearRevNo(weekId, year, corpId.intValue(), BillType);
//
//                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
//                        BigDecimal pendingAmt = net;
//                        System.out.println("%%%%%pendingAmt is " + pendingAmt);
//                        if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
//                            System.out.println("@@@@@pendingAmt > BigDecimal.ZERO @@@");
//                            billRecieveCorp.setRevisedpaybale(orgPendingamt);
//                            billRecieveCorp.setPendingAmount(orgPendingamt);
//                            billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                            billRecieveCorp.setDisburseStatus("NOT PAID");
//
//                        } else if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
//                            System.out.println("@@@@@pendingAmt < BigDecimal.ZERO @@@");
//
//                            System.out.println("Total sum disbused amount@" + totadisamt);
//
//                            BigDecimal diffnetpaid = (net).subtract(totadisamt);
//
//                            if (diffnetpaid.intValue() > 0) {
//
//                                billRecieveCorp.setRevisedpaybale(diffnetpaid);
//                                billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                                billRecieveCorp.setPendingAmount(diffnetpaid);
//                                billRecieveCorp.setDisburseStatus("NOT PAID");
//                                billRecieveCorp.setDisburseAmount(totadisamt);
//
////                                for (int i = 0; i < revNo.intValue(); i++) {
////                                    List<BillReceiveCorp> listrecv = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, new BigDecimal(i), BillType, year, corpId.intValue());
////                                    BigDecimal bgupdatedis = listrecv.get(0).getDisburseAmount().add(listrecv.get(0).getPendingAmount());
////                                    billRecieveCorpDAO.getUpdatePaidAmtbyCorpWeekYearRevNoOnupload(weekId, year, corpId.intValue(), BillType, i, bgupdatedis);
////                                }
//                            }
//
//                            if (diffnetpaid.intValue() < 0) {
//                                billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
//                                billRecieveCorp.setRevisedrefund(diffnetpaid.negate());
//                                billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
//                                billRecieveCorp.setDisburseStatus("REFUND");
//                                billRecieveCorp.setDisburseAmount(totadisamt);
////                                for (int i = 0; i < revNo.intValue(); i++) {
////                                    List<BillReceiveCorp> listrecv = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, new BigDecimal(i), BillType, year, corpId.intValue());
////                                    BigDecimal bgupdatedis = listrecv.get(0).getDisburseAmount().add(listrecv.get(0).getPendingAmount());
////                                    billRecieveCorpDAO.getUpdatePaidAmtbyCorpWeekYearRevNoOnupload(weekId, year, corpId.intValue(), BillType, i, bgupdatedis);
////                                }
//
//                            }
//
//                            if (diffnetpaid.intValue() == 0) {
//                                billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
//                                billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                                billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
//                                billRecieveCorp.setDisburseStatus("PAID");
//                                billRecieveCorp.setDisburseAmount(totadisamt);
//
//                            }
//
//                        } else {
//                            System.out.println("@@@@@ pendingAmt = BigDecimal.ZERO @@@");
//                            billRecieveCorp.setDisburseStatus("PAID");
//                            billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
//                            billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
//                            billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
//                            billRecieveCorp.setDisburseAmount(totadisamt);
//                        }
//                    }
                //billRecieveCorp.setBillPriority("DSM");
                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                    billRecieveCorp.setPendingAmount(net);

                    reconcorp.setRecFinalamount(net);
                    reconcorp.setRecPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in dyn recon table");
            }

            tempBillPayCorp.updatetempbillpayablecorpstatus("FRAS");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("FRAS");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }

        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("saveBtn" + saveBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from FRAS ENTITY TEMP TABLE");
            if (tempbillEntityFrasDAO.deleteTempBillFRASDetailsbyWeekId(weekid, rev, yearid)) {
                if (tempBillFRASDAO.deleteTempBillFRASDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "FRAS"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "FRAS"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }
            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayRecList", tempPayRecList);
        mav1.addObject("tempbilfrasdetls", tempbilfrasdetls);
        return mav1;
    }

    public ModelAndView verifyREVUploadDSM(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadDSM");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
//        BigDecimal weekid = (BigDecimal) request.getSession(false).getAttribute("weekid");
//        BigDecimal yearid = (BigDecimal) request.getSession(false).getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillDSMDetailsDAO tempBillDSMDAO = new TempBillDSMDetailsDAO();
        BigDecimal maxRevNo = tempBillDSMDAO.getMaxRevNoByWeekId(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillDsmDetails> tempdsmdetils = tempBillDSMDAO.gettempdsmdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillPayableEntityDSMDAO tempbillDAO = new TempBillPayableEntityDSMDAO();
        TempBillReceivableEntityDAO tempbillreceiveDAO = new TempBillReceivableEntityDAO();
        BillPayableEntityDsmDAO billPayEntityDSMDAO = new BillPayableEntityDsmDAO();
        BillReceiveEntityDsmDAO billRecEntityDSMDAO = new BillReceiveEntityDsmDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        LetterOfCreditDAO letterDAO = new LetterOfCreditDAO();
        CorporatesDAO corpDAO = new CorporatesDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillDsmDetailsDAO billDsmDetailsDAO = new BillDsmDetailsDAO();
        BillPayableEntityDsm billPayEntDSM = new BillPayableEntityDsm();
        BillReceiveEntityDsm billRecEntDSM = new BillReceiveEntityDsm();
        BillDsmDetails billDsmDetails = new BillDsmDetails();
        List<Object[]> payList = new ArrayList<Object[]>();
        List<Object[]> recList = new ArrayList<Object[]>();
        List<Object[]> billDsmList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillDSMDAO.getBillNobyWeekIdandRevisionNo(weekid, rev, yearid);
        Date billingDate = tempBillDSMDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date fromDate = tempBillDSMDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date toDate = tempBillDSMDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayList = tempbillDAO.getTempDSMBillPayableDetailsbyWeekId(weekid, rev, yearid);
//        List<Object[]> tempRecList = tempbillreceiveDAO.getTempDSMBillReeiveDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            //  if (submitBtn.equalsIgnoreCase("Save")) {
            List<String> corporates = new ArrayList<>();
            int corpCount = 0;

            List<String> corporatesNotPresent = new ArrayList<>();
            int corpNotPresentCount = 0;

            ModelAndView mav2 = new ModelAndView("successMsg_LoC");
            payList = billPayEntityDSMDAO.getTempDSMBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, entityId, cap, add, sign, pay, recv, net, year, revNo, weekId, corpId = null;
                bg = (BigDecimal) row[0];
                entityId = (BigDecimal) row[2];
                weekId = (BigDecimal) row[1];
                cap = (BigDecimal) row[4];
                add = (BigDecimal) row[5];
                sign = (BigDecimal) row[6];
                pay = (BigDecimal) row[7];
//                    net = (BigDecimal) row[8];
                net = (BigDecimal) row[12];
                year = (BigDecimal) row[9];
                recv = (BigDecimal) row[13];
                revNo = rev;
                corpId = (BigDecimal) row[3];
                uniqueId = billPayEntityDSMDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billPayEntDSM.setUniqueId(new BigDecimal(uniqueId));
                billPayEntDSM.setWeekId(weekId);
                ent.setEntityId(entityId);
                billPayEntDSM.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billPayEntDSM.setCorporates(corp);
                billPayEntDSM.setCappingCharges(cap);
                billPayEntDSM.setAdditionalCharges(add);
                billPayEntDSM.setSignCharges(sign);
                billPayEntDSM.setPayableCharges(pay);
                billPayEntDSM.setReceivableCharges(recv);
                billPayEntDSM.setNetDsm(net);
                billPayEntDSM.setBillYear(year);
                billPayEntDSM.setRevisionNo(revNo);
                billPayEntDSM.setRemarks((String) row[11]);
                billPayEntityDSMDAO.NewBillPayDSMEntries(billPayEntDSM);

                tempbillDAO.updatetempbillpayableentitydsmstatus();
                System.out.println("Entries successfully added in Bill Payable Entites table");
            }

            billDsmList = billDsmDetailsDAO.getTempDSMBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billDsmList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billDsmDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billDsmDetails.setUniqueId(new BigDecimal(uniqueId));
                billDsmDetails.setWeekId(weekId);
                billDsmDetails.setWeekFromdate(weekFromDate);
                billDsmDetails.setWeekTodate(weekToDate);
                billDsmDetails.setBillingDate(bDate);
                billDsmDetails.setRevisionNo(revNo);
                billDsmDetails.setBillYear(year);
                billDsmDetails.setBillDueDate(billDueDate);
                billDsmDetails.setRemarks((String) row[8]);
                billDsmDetails.setBillNo((String) row[9]);
                billDsmDetails.setEntryDate((Timestamp) row[10]);
                billDsmDetailsDAO.NewBillDSMDetailsEntries(billDsmDetails);

                tempBillDSMDAO.updatetempbilldsmdetailsstatus();
                System.out.println("Entries successfully added in Bill DSM Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();

            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "RECEIVABLE", fromDate);
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            String billType = "DSM";
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();

                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);

                billPayCorp.setTotalnet(net);
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                BigDecimal lcAmount = letterDAO.getPresentLCAmountbyId(corporateId, year.toString());
                System.out.println(" lc amount fetched in controller for Corpid" + corporateId + " is: " + lcAmount);

                if (!(lcAmount != null)) {
                    String cropName = corpDAO.getCorporateNamebyID(corporateId);
                    System.out.println("LC amount not present for Corporate : " + cropName);

                    corporatesNotPresent.add(cropName);
                    corpNotPresentCount++;

                    if (corpNotPresentCount > 0) {

                        mav2.addObject("corporatesNotPresent", corporatesNotPresent);
                        //  mv9.addObject("corporates", corporates); 
                        //  return mv9; 
                    }
                } else {
                    BigDecimal lc_Max = BigDecimal.ZERO;
                    lc_Max = ((lcAmount).multiply(new BigDecimal(1.5)));
                    if (lc_Max != null) {

                        String cropName = corpDAO.getCorporateNamebyID(corporateId);
                        System.out.println("Max lc amount  150% for Corporate : " + cropName + "is : " + lc_Max);
                        if (net.compareTo(lc_Max) > 0) {
                            corporates.add(cropName);
                            corpCount++;

                        }

                        if (corpCount > 0) {

                            mav2.addObject("corporates", corporates);
                            //  mv9.addObject("corporates", corporates); 
                            //  return mv9; 
                        }
                    }

                }

//                    if(revNo > 0){
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

//                    payList = tempBillPayableCorpDao.getTempBillPayableDSM(weekId, revNo,year);
                    BigDecimal prevtotalnet = null;

                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableDSMforprevnet(weekId, revNo, year, corporateId);

                    System.out.println("prevtotalnet is " + prevtotalnet);

                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    BigDecimal prevnetTotal = null;

                    if (prevtotalnet != null) {

//                        prevnetTotal = listprebillcorp.get(0).getTotalnet();
                        prevnetTotal = prevtotalnet;

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

//                            tempbillreceiveDAO.deleteTempBillReceiveDSMDetailsbyWeekId(weekId, revNo, year);
                        tempbillDAO.deleteTempBillPayableDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillDSMDAO.deleteTempBillDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "DSM");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "DSM");
                        billRecEntityDSMDAO.deleteBillReceiveDSMDetailsbyWeekIdYearRevNo(weekId, revNo, year);
                        billPayEntityDSMDAO.deleteBillPayableDSMEntitybyWeekIdRevNoYear(weekId, revNo, year);
                        billDsmDetailsDAO.deleteBillDSMDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "DSM");
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "DSM");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }

                } else {
                    System.out.println("@@@@@ pendingAmt = BigDecimal.ZERO @@@");
                    billPayCorp.setBillStatus("PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                    billPayCorp.setPendingAmount(BigDecimal.ZERO);
                }

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                    billPayCorp.setPendingAmount(net);
                    billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                    reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                    reconcorp.setPayFinalamount(net);
                    reconcorp.setPayPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in Dyn Recon table");
            }

            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                BigDecimal mul = new BigDecimal("-1");
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                CorporatesDAO corpDao = new CorporatesDAO();

                int corporate_id = corpId.intValueExact();
                String corpType = corpDao.getCorporateTypebyCorpID(corporate_id);
                System.out.println("$$$$$$$$$$$$$$$$$$$corpType is " + corpType);

                if (corpType.equals("IR")) {
                    billRecieveCorp.setBillPriority("DSM-IR");
                } else {
                    billRecieveCorp.setBillPriority("DSM-REG");
                }
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net.multiply(mul));
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net.multiply(mul));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {

                    BigDecimal prevtotalnet = null;

                    TempBillPayableCorpDAO tempBillPayableCorpDao = new TempBillPayableCorpDAO();
                    prevtotalnet = tempBillPayableCorpDao.getTempBillPayableDSMforprevnet(weekId, revNo, year, corpId.intValue());

                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    List<BillReceiveCorp> listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());
                    System.out.println("Jagan Mohscfasdcv$preRevNo is " + listprebillcorp.size());
                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;

//                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                    if (prevtotalnet != null) {
//                        prevnetTotal = listprebillcorp.get(0).getToalnet();
                        prevnetTotal = prevtotalnet;

                        System.out.println("##################prevnetTotal is " + prevnetTotal);

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillreceiveDAO.deleteTempBillReceiveDSMDetailsbyWeekId(weekId, revNo, year);
                        tempbillDAO.deleteTempBillPayableDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillDSMDAO.deleteTempBillDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "DSM");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "DSM");
                        billRecEntityDSMDAO.deleteBillReceiveDSMDetailsbyWeekIdYearRevNo(weekId, revNo, year);
                        billPayEntityDSMDAO.deleteBillPayableDSMEntitybyWeekIdRevNoYear(weekId, revNo, year);
                        billDsmDetailsDAO.deleteBillDSMDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "DSM");
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "DSM");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }

                    orgPendingamt = (net.multiply(mul)).subtract(prevnetTotal.multiply(mul));

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);

                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                }

                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setPendingAmount(net.multiply(mul));
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setRecFinalamount(net.multiply(mul));
                    reconcorp.setRecPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net.multiply(mul));
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }
                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in Dyn Recon table");
            }//end of receveibale for loop

            tempBillPayCorp.updatetempbillpayablecorpstatus("DSM");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("DSM");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from payable");
            if (tempbillDAO.deleteTempBillPayableDSMDetailsbyWeekId(weekid, rev, yearid)) {

                if (tempBillDSMDAO.deleteTempBillDSMDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "DSM"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "DSM"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }

            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }//end of deleteBtn

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayList", tempPayList);
        mav1.addObject("revNo", rev);
        mav1.addObject("tempdsmdetils", tempdsmdetils);

//        mav1.addObject("tempRecList", tempRecList);
        return mav1;
    }

    public ModelAndView verifyUploadDSM(HttpServletRequest request,
            HttpServletResponse response) throws Exception {
        ModelAndView mav1 = new ModelAndView("BillUpload/verifyUploadDSM");
        HttpSession session = request.getSession(false);

        BigDecimal weekid = (BigDecimal) session.getAttribute("weekid");
        BigDecimal yearid = (BigDecimal) session.getAttribute("year");
//        BigDecimal weekid = (BigDecimal) request.getSession(false).getAttribute("weekid");
//        BigDecimal yearid = (BigDecimal) request.getSession(false).getAttribute("year");
        System.out.println("week id is :" + weekid);
        System.out.println("year id is :" + yearid);
        BigDecimal rev = BigDecimal.ZERO;
        TempBillDSMDetailsDAO tempBillDSMDAO = new TempBillDSMDetailsDAO();
        BigDecimal maxRevNo = tempBillDSMDAO.getMaxRevNoByWeekId(weekid, yearid);
        System.out.println("maxRevNo is " + maxRevNo);
        if (maxRevNo != null) {
            rev = maxRevNo;
        }
        List<TempBillDsmDetails> tempdsmdetils = tempBillDSMDAO.gettempdsmdetilsbyweekyearrev(weekid, yearid, rev);
        Entites ent = new Entites();
        Corporates corp = new Corporates();
        TempBillPayableEntityDSMDAO tempbillDAO = new TempBillPayableEntityDSMDAO();
        TempBillReceivableEntityDAO tempbillreceiveDAO = new TempBillReceivableEntityDAO();
        BillPayableEntityDsmDAO billPayEntityDSMDAO = new BillPayableEntityDsmDAO();
        BillReceiveEntityDsmDAO billRecEntityDSMDAO = new BillReceiveEntityDsmDAO();
        TempBillPayableCorpDAO tempBillPayCorp = new TempBillPayableCorpDAO();
        TempBillReceiveCorpDAO tempBillcorpDAO = new TempBillReceiveCorpDAO();
        BillReceiveCorpDAO billRecieveCorpDAO = new BillReceiveCorpDAO();
        BillReceiveCorp billRecieveCorp = new BillReceiveCorp();
        BillPayableCorpDAO billPayCorpDAO = new BillPayableCorpDAO();
        LetterOfCreditDAO letterDAO = new LetterOfCreditDAO();
        CorporatesDAO corpDAO = new CorporatesDAO();
        BillPayableCorp billPayCorp = new BillPayableCorp();
        int uniqueId = 0;
        BillDsmDetailsDAO billDsmDetailsDAO = new BillDsmDetailsDAO();
        BillPayableEntityDsm billPayEntDSM = new BillPayableEntityDsm();
        BillReceiveEntityDsm billRecEntDSM = new BillReceiveEntityDsm();
        BillDsmDetails billDsmDetails = new BillDsmDetails();
        List<Object[]> payList = new ArrayList<Object[]>();
        List<Object[]> recList = new ArrayList<Object[]>();
        List<Object[]> billDsmList = new ArrayList<Object[]>();
        List<Object[]> payCorpList = new ArrayList<Object[]>();
        List<Object[]> recCorpList = new ArrayList<Object[]>();
        String billNo = tempBillDSMDAO.getBillNobyWeekIdandRevisionNo(weekid, rev, yearid);
        Date billingDate = tempBillDSMDAO.getBillingDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date fromDate = tempBillDSMDAO.getFromDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        Date toDate = tempBillDSMDAO.getToDatebyWeekIdandRevisionNo(weekid, rev, yearid);
        System.out.println("Billing Date is: " + billingDate);
        System.out.println("From Date is: " + fromDate);
        List<Object[]> tempPayList = tempbillDAO.getTempDSMBillPayableDetailsbyWeekId(weekid, rev, yearid);
//        List<Object[]> tempRecList = tempbillreceiveDAO.getTempDSMBillReeiveDetailsbyWeekId(weekid, rev, yearid);
        String saveBtn = request.getParameter("saveBtn");
        System.out.println("saveBtn" + saveBtn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (saveBtn != null) {
            //  if (submitBtn.equalsIgnoreCase("Save")) {
            List<String> corporates = new ArrayList<>();
            int corpCount = 0;

            List<String> corporatesNotPresent = new ArrayList<>();
            int corpNotPresentCount = 0;

            ModelAndView mav2 = new ModelAndView("successMsg_LoC");
            payList = billPayEntityDSMDAO.getTempDSMBillPayableDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : payList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, entityId, cap, add, sign, pay, recv, net, year, revNo, weekId, corpId = null;
                bg = (BigDecimal) row[0];
                entityId = (BigDecimal) row[2];
                weekId = (BigDecimal) row[1];
                cap = (BigDecimal) row[4];
                add = (BigDecimal) row[5];
                sign = (BigDecimal) row[6];
                pay = (BigDecimal) row[7];
//                    net = (BigDecimal) row[8];
                net = (BigDecimal) row[12];
                year = (BigDecimal) row[9];
                recv = (BigDecimal) row[13];
                revNo = rev;
                corpId = (BigDecimal) row[3];
                uniqueId = billPayEntityDSMDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billPayEntDSM.setUniqueId(new BigDecimal(uniqueId));
                billPayEntDSM.setWeekId(weekId);
                ent.setEntityId(entityId);
                billPayEntDSM.setEntites(ent);
                corp.setCorporateId(corpId.intValue());
                billPayEntDSM.setCorporates(corp);
                billPayEntDSM.setCappingCharges(cap);
                billPayEntDSM.setAdditionalCharges(add);
                billPayEntDSM.setSignCharges(sign);
                billPayEntDSM.setPayableCharges(pay);
                billPayEntDSM.setReceivableCharges(recv);
                billPayEntDSM.setNetDsm(net);
                billPayEntDSM.setBillYear(year);
                billPayEntDSM.setRevisionNo(revNo);
                billPayEntDSM.setRemarks((String) row[11]);
                billPayEntityDSMDAO.NewBillPayDSMEntries(billPayEntDSM);

                tempbillDAO.updatetempbillpayableentitydsmstatus();
                System.out.println("Entries successfully added in Bill Payable Entites table");
            }

            billDsmList = billDsmDetailsDAO.getTempDSMBillDetailsbyWeekId(weekid, rev, yearid);
            for (Object[] listMW1 : billDsmList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, weekId, year, revNo = null;
                Date weekFromDate, weekToDate, bDate, billDueDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                weekFromDate = (Date) row[2];
                weekToDate = (Date) row[3];
                bDate = (Date) row[4];
                billDueDate = (Date) row[6];
                year = (BigDecimal) row[5];
                revNo = rev;
//                    revNo = (BigDecimal) row[7];
                uniqueId = billDsmDetailsDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                billDsmDetails.setUniqueId(new BigDecimal(uniqueId));
                billDsmDetails.setWeekId(weekId);
                billDsmDetails.setWeekFromdate(weekFromDate);
                billDsmDetails.setWeekTodate(weekToDate);
                billDsmDetails.setBillingDate(bDate);
                billDsmDetails.setRevisionNo(revNo);
                billDsmDetails.setBillYear(year);
                billDsmDetails.setBillDueDate(billDueDate);
                billDsmDetails.setRemarks((String) row[8]);
                billDsmDetails.setBillNo((String) row[9]);
                billDsmDetails.setEntryDate((Timestamp) row[10]);
                billDsmDetailsDAO.NewBillDSMDetailsEntries(billDsmDetails);

                tempBillDSMDAO.updatetempbilldsmdetailsstatus();
                System.out.println("Entries successfully added in Bill DSM Details table");
            }
            BillPaymentDuedateDAO billpaydaudao = new BillPaymentDuedateDAO();
            DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
            List<BillPaymentDuedate> list999 = null;
            list999 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "PAYABLE", fromDate);
            List<BillPaymentDuedate> list1000 = null;
            list1000 = billpaydaudao.getBillPaymentDuedatebyfromdate("DSM", "RECEIVABLE", fromDate);
            String bill_due_date_pay = null;
            String bill_due_date_recv = null;
            String billType = "DSM";
            payCorpList = billPayCorpDAO.getTempBillPayableCorpDetailsbyWeekId(weekid, rev, billType, yearid);
            for (Object[] listMW1 : payCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId, type = null;
                String BillType, remarks = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_pay = sdf.format(cal.getTime());
                uniqueId = billPayCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
                int corporateId = corpId.intValue();

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                billPayCorp.setUniqueId(new BigDecimal(uniqueId));
                billPayCorp.setWeekId(weekId);
                corp.setCorporateId(corporateId);
                billPayCorp.setCorporates(corp);

                billPayCorp.setTotalnet(net);
                billPayCorp.setBillYear(year);
                billPayCorp.setRevisionNo(revNo);
                billPayCorp.setRemarks(remarks);
                billPayCorp.setBillType(BillType);
                billPayCorp.setBillingDate(billingDate);
                billPayCorp.setBillPriority(BillType);
                billPayCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billPayCorp.setAdjustmentFlag("0");

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                System.out.println("slno is" + slno);
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);

                reconcorp.setPayTotalnet(net);
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
//                if (billpay.getRevisionNo().compareTo(BigDecimal.ZERO) == 0) {
//                    reconcorp.setPayFinalamount(billpay.getTotalnet());
//                    reconcorp.setPayPendingamount(billpay.getTotalnet());
//                    outstanding = billpay.getTotalnet().add(outstanding);
//                    reconcorp.setOutstandingAmount(outstanding);
//                    reconcorp.setRemarks("Payable Pending");
//                }
//                if (billpay.getRevisionNo().compareTo(BigDecimal.ZERO) == 1) {
//
//                    if (billpay.getBillStatus().equals("REFUND")) {
//                        reconcorp.setRecFinalamount(billpay.getRevisedrefund());
//                        reconcorp.setRecPendingamount(billpay.getRevisedrefund());
//                        outstanding = outstanding.subtract(billpay.getRevisedrefund());
//                        reconcorp.setOutstandingAmount(outstanding);
//                        reconcorp.setRemarks("Payable Rev Refund");
//                    } else {
//                        reconcorp.setPayFinalamount(billpay.getRevisedpaybale());
//                        reconcorp.setPayPendingamount(billpay.getRevisedpaybale());
//                        outstanding = outstanding.add(billpay.getRevisedpaybale());
//                        reconcorp.setOutstandingAmount(outstanding);
//                        reconcorp.setRemarks("Payable Rev Pending");
//                    }
//                }
//                reconcorpdao.NewReconciliationCorp(reconcorp);

                BigDecimal lcAmount = letterDAO.getPresentLCAmountbyId(corporateId, year.toString());
                System.out.println(" lc amount fetched in controller for Corpid" + corporateId + " is: " + lcAmount);

                if (!(lcAmount != null)) {
                    String cropName = corpDAO.getCorporateNamebyID(corporateId);
                    System.out.println("LC amount not present for Corporate : " + cropName);

                    corporatesNotPresent.add(cropName);
                    corpNotPresentCount++;

                    if (corpNotPresentCount > 0) {

                        mav2.addObject("corporatesNotPresent", corporatesNotPresent);
                        //  mv9.addObject("corporates", corporates); 
                        //  return mv9; 
                    }
                } else {
                    BigDecimal lc_Max = BigDecimal.ZERO;
                    lc_Max = ((lcAmount).multiply(new BigDecimal(1.5)));
                    if (lc_Max != null) {

                        String cropName = corpDAO.getCorporateNamebyID(corporateId);
                        System.out.println("Max lc amount  150% for Corporate : " + cropName + "is : " + lc_Max);
                        if (net.compareTo(lc_Max) > 0) {
                            corporates.add(cropName);
                            corpCount++;

                        }

                        if (corpCount > 0) {

                            mav2.addObject("corporates", corporates);
                            //  mv9.addObject("corporates", corporates); 
                            //  return mv9; 
                        }
                    }

                }

//                    if(revNo > 0){
                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);

                    List<BillPayableCorp> listprebillcorp = billPayCorpDAO.getBillPayableCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corporateId);

                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    BigDecimal prevnetTotal = null;

                    if (listprebillcorp != null && listprebillcorp.size() > 0) {

                        prevnetTotal = listprebillcorp.get(0).getTotalnet();

                        System.out.println("prevnetAmt is " + prevnetTotal);

                        BigDecimal pendingAmt = net.subtract(prevnetTotal);

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == -1) {
                            billPayCorp.setRevisedrefund(pendingAmt.negate());
                            billPayCorp.setBillStatus("REFUND");
                            billPayCorp.setPendingAmount(pendingAmt.negate());
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);

                            cal.setTime(billingDate);
                            cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                            System.out.println("Calender date is: " + cal);
                            bill_due_date_pay = sdf.format(cal.getTime());
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setRecFinalamount(pendingAmt.negate());
                            reconcorp.setRecPendingamount(pendingAmt.negate());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.subtract(pendingAmt.negate());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Refund");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 1) {
                            billPayCorp.setRevisedpaybale(pendingAmt);
                            billPayCorp.setPendingAmount(pendingAmt);
                            billPayCorp.setBillStatus("NOT PAID");
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");
                        }

                        if (pendingAmt.compareTo(BigDecimal.ZERO) == 0) {
                            billPayCorp.setBillStatus("PAID");
                            billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                            billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                            billPayCorp.setPendingAmount(BigDecimal.ZERO);
                            billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));
                            reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                            reconcorp.setPayFinalamount(pendingAmt);
                            reconcorp.setPayPendingamount(pendingAmt);
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                            outstanding = outstanding.add(pendingAmt);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Payable Rev Pending");

                        }

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;

//                            tempbillreceiveDAO.deleteTempBillReceiveDSMDetailsbyWeekId(weekId, revNo, year);
                        tempbillDAO.deleteTempBillPayableDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillDSMDAO.deleteTempBillDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "DSM");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "DSM");
                        billRecEntityDSMDAO.deleteBillReceiveDSMDetailsbyWeekIdYearRevNo(weekId, revNo, year);
                        billPayEntityDSMDAO.deleteBillPayableDSMEntitybyWeekIdRevNoYear(weekId, revNo, year);
                        billDsmDetailsDAO.deleteBillDSMDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "DSM");
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "DSM");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }

                } else {
                    System.out.println("@@@@@ pendingAmt = BigDecimal.ZERO @@@");
                    billPayCorp.setBillStatus("PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                    billPayCorp.setPendingAmount(BigDecimal.ZERO);
                }

                if (revNo == BigDecimal.ZERO) {
                    billPayCorp.setBillCategory("Original");
                    billPayCorp.setPaidAmount(BigDecimal.ZERO);
                    billPayCorp.setBillStatus("NOT PAID");
                    billPayCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billPayCorp.setRevisedrefund(BigDecimal.ZERO);
                    billPayCorp.setPendingAmount(net);
                    billPayCorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                    reconcorp.setBillDueDate(sdf.parse(bill_due_date_pay));

                    reconcorp.setPayFinalamount(net);
                    reconcorp.setPayPendingamount(net);
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corporateId);
                    outstanding = net.add(outstanding);
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Payable Pending");
                } else {
                    billPayCorp.setBillCategory("Revised");
                }

                billPayCorpDAO.NewBillPayCorpEntries(billPayCorp);
                System.out.println("Entries successfully added in Bill Payable Corp table");

                reconcorpdao.NewReconciliationCorp(reconcorp);

            }

            recCorpList = billRecieveCorpDAO.getTempBillReceiveCorpDetailsbyWeekId(weekid, yearid, rev, billType);
            for (Object[] listMW1 : recCorpList) {
                Object[] row = (Object[]) listMW1;
                BigDecimal bg, net, year, revNo, weekId, corpId = null;
                BigDecimal mul = new BigDecimal("-1");
                String BillType, remarks = null;
                // Date billingDate = null;
                bg = (BigDecimal) row[0];
                weekId = (BigDecimal) row[1];
                billingDate = (Date) row[4];
                net = (BigDecimal) row[3];
                year = (BigDecimal) row[5];
//                    revNo = (BigDecimal) row[6];
                revNo = rev;
                corpId = (BigDecimal) row[2];
                System.out.println("Corporate id in Bill Receive Corp of DSM is : " + corpId);
                CorporatesDAO corpDao = new CorporatesDAO();

                int corporate_id = corpId.intValueExact();
                String corpType = corpDao.getCorporateTypebyCorpID(corporate_id);
                System.out.println("$$$$$$$$$$$$$$$$$$$corpType is " + corpType);

                if (corpType.equals("IR")) {
                    billRecieveCorp.setBillPriority("DSM-IR");
                } else {
                    billRecieveCorp.setBillPriority("DSM-REG");
                }
                remarks = (String) row[7];
                BillType = (String) row[8];
                Calendar cal = Calendar.getInstance();
                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                uniqueId = billRecieveCorpDAO.getMaxUniqueID();
                uniqueId = uniqueId + 1;
//                    uniqueId = Integer.toString(uniqueId);
                billRecieveCorp.setUniqueId(new BigDecimal(uniqueId));
                billRecieveCorp.setWeekId(weekId);
                corp.setCorporateId(corpId.intValue());
                billRecieveCorp.setCorporates(corp);
                billRecieveCorp.setToalnet(net.multiply(mul));
                billRecieveCorp.setNetDsm(net);
                billRecieveCorp.setBillYear(year);
                billRecieveCorp.setRevisionNo(revNo);
                billRecieveCorp.setRemarks(remarks);
                billRecieveCorp.setBillType(BillType);
                billRecieveCorp.setBillingDate(billingDate);
                billRecieveCorp.setPendingAmount(net.multiply(mul));
                billRecieveCorp.setAdjustmentAmount(BigDecimal.ZERO);
                billRecieveCorp.setAdjustmentflag("0");

                cal.setTime(billingDate);
                cal.add(Calendar.DATE, list1000.get(0).getNoofdays().intValue());
                System.out.println("Calender date is: " + cal);
                bill_due_date_recv = sdf.format(cal.getTime());

                billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                billRecieveCorp.setAdjustmentflag("0");

                DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                BigDecimal slno = new BigDecimal(0);
                slno = new BigDecimal(reconcorpdao.getMaxslno());
                slno = slno.add(BigDecimal.ONE);
                reconcorp.setSlno(slno);
                reconcorp.setCorporates(corp);
                reconcorp.setWeekId(weekId);
                reconcorp.setBillEntryDate(billingDate);
                reconcorp.setBillType(BillType);
                reconcorp.setBillingDate(billingDate);
                reconcorp.setRevisionNo(revNo);
                reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                reconcorp.setRecTotalnet(net.multiply(mul));
                Date d = new Date();
                reconcorp.setEntryDate(d);
                reconcorp.setBillYear(year);
//                                        if (billrec.getRevisionNo().compareTo(BigDecimal.ZERO) == 0) {
//
//                                            reconcorp.setRecFinalamount(billrec.getToalnet());
//                                            reconcorp.setRecPendingamount(billrec.getToalnet());
//                                            outstanding = outstanding.subtract(billrec.getToalnet());
//                                            reconcorp.setOutstandingAmount(outstanding);
//                                            reconcorp.setRemarks("Receivable Pending");
//                                        }
//                                        if (billrec.getRevisionNo().compareTo(BigDecimal.ZERO) == 1) {
//
//                                            if (billrec.getDisburseStatus().equals("REFUND")) {
//                                                reconcorp.setPayFinalamount(billrec.getRevisedrefund());
//                                                reconcorp.setPayPendingamount(billrec.getRevisedrefund());
//                                                outstanding = outstanding.add(billrec.getRevisedrefund());
//                                                reconcorp.setOutstandingAmount(outstanding);
//                                                reconcorp.setRemarks("Receivable Rev Refund");
//
//                                            } else {
//                                                reconcorp.setRecFinalamount(billrec.getRevisedpaybale());
//                                                reconcorp.setRecPendingamount(billrec.getRevisedpaybale());
//                                                outstanding = outstanding.subtract(billrec.getRevisedpaybale());
//                                                reconcorp.setOutstandingAmount(outstanding);
//                                                reconcorp.setRemarks("Receivable Rev Pending");
//                                            }
//                                        }
//                                        reconcorpdao.NewReconciliationCorp(reconcorp);

                if (revNo.compareTo(BigDecimal.ZERO) == 1) {
                    BigDecimal preRevNo = revNo.subtract(BigDecimal.ONE);
                    System.out.println("$$$$$$preRevNo is " + preRevNo);

                    List<BillReceiveCorp> listprebillcorp = billRecieveCorpDAO.getBillRecvCorpDetailsbyWeekId(weekId, preRevNo, BillType, year, corpId.intValue());
                    System.out.println("Jagan Mohscfasdcv$preRevNo is " + listprebillcorp.size());
                    BigDecimal orgPendingamt = null;

                    BigDecimal prevnetTotal = null;

                    if (listprebillcorp != null && listprebillcorp.size() > 0) {
                        prevnetTotal = listprebillcorp.get(0).getToalnet();
                        System.out.println("##################prevnetTotal is " + prevnetTotal);

                    } else {
                        String msg = "Please check the Entities and upload again for Week ID: " + weekId;
                        tempbillreceiveDAO.deleteTempBillReceiveDSMDetailsbyWeekId(weekId, revNo, year);
                        tempbillDAO.deleteTempBillPayableDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillDSMDAO.deleteTempBillDSMDetailsbyWeekId(weekId, revNo, year);
                        tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekId, year, revNo, "DSM");
                        tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekId, year, revNo, "DSM");
                        billRecEntityDSMDAO.deleteBillReceiveDSMDetailsbyWeekIdYearRevNo(weekId, revNo, year);
                        billPayEntityDSMDAO.deleteBillPayableDSMEntitybyWeekIdRevNoYear(weekId, revNo, year);
                        billDsmDetailsDAO.deleteBillDSMDetailsbyWeekIdRevNoYear(weekId, revNo, year);
                        billRecieveCorpDAO.deleteBillReceiveCorpbyWeekIdYearRevNoBillType(weekId, year, revNo, "DSM");
                        billPayCorpDAO.deleteBillPayableCorpbyWeekIdYearRevNoBillType(weekId, yearid, revNo, "DSM");
                        mav2.addObject("Msg", msg);
                        return mav2;

                    }

                    orgPendingamt = (net.multiply(mul)).subtract(prevnetTotal);

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 1) {
                        billRecieveCorp.setRevisedpaybale(orgPendingamt);
                        billRecieveCorp.setPendingAmount(orgPendingamt);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("NOT PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == -1) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(orgPendingamt.negate());
                        billRecieveCorp.setPendingAmount(orgPendingamt.negate());
                        billRecieveCorp.setDisburseStatus("REFUND");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        cal.setTime(billingDate);
                        cal.add(Calendar.DATE, list999.get(0).getNoofdays().intValue());
                        System.out.println("Calender date is: " + cal);

                        bill_due_date_recv = sdf.format(cal.getTime());

                        billRecieveCorp.setBillDueDate(sdf.parse(bill_due_date_recv));

                        reconcorp.setBillDueDate(sdf.parse(bill_due_date_recv));
                        reconcorp.setPayFinalamount(orgPendingamt.negate());
                        reconcorp.setPayPendingamount(orgPendingamt.negate());
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.add(orgPendingamt.negate());
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Refund");
                    }

                    if (orgPendingamt.compareTo(BigDecimal.ZERO) == 0) {
                        billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                        billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);
                        billRecieveCorp.setPendingAmount(BigDecimal.ZERO);
                        billRecieveCorp.setDisburseStatus("PAID");
                        billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);

                        reconcorp.setRecFinalamount(orgPendingamt);
                        reconcorp.setRecPendingamount(orgPendingamt);
                        BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                        outstanding = outstanding.subtract(orgPendingamt);
                        reconcorp.setOutstandingAmount(outstanding);
                        reconcorp.setRemarks("Receivable Rev Pending");
                    }

                }

                if (revNo == BigDecimal.ZERO) {
                    billRecieveCorp.setBillCategory("Original");
                    billRecieveCorp.setPendingAmount(net.multiply(mul));
                    billRecieveCorp.setDisburseStatus("NOT PAID");
                    billRecieveCorp.setDisburseAmount(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedpaybale(BigDecimal.ZERO);
                    billRecieveCorp.setRevisedrefund(BigDecimal.ZERO);

                    reconcorp.setRecFinalamount(net.multiply(mul));
                    reconcorp.setRecPendingamount(net.multiply(mul));
                    BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(corpId.intValue());
                    outstanding = outstanding.subtract(net.multiply(mul));
                    reconcorp.setOutstandingAmount(outstanding);
                    reconcorp.setRemarks("Receivable Pending");
                } else {
                    billRecieveCorp.setBillCategory("Revised");
                }

                if (billRecieveCorpDAO.NewBillReceiveCorpEntries(billRecieveCorp));
                {
                    System.out.println("Entries successfully added in Bill Receive Corp table");
                }

                reconcorpdao.NewReconciliationCorp(reconcorp);
                System.out.println("Entries successfully added in Dyn Recon table");
            }//end of receveibale for loop

            tempBillPayCorp.updatetempbillpayablecorpstatus("DSM");
            tempBillcorpDAO.updatetempbillreceivablecorpstatus("DSM");
            String msg = "Data Saved Successfully for Week ID: " + weekid;
            mav2.addObject("Msg", msg);
            return mav2;
        }
        String deleteBtn = request.getParameter("deleteBtn");
        System.out.println("deleteBtn" + deleteBtn);
        if (deleteBtn != null) {
            ModelAndView mav2 = new ModelAndView("successMsg");

            System.out.println(" In delete records from payable");
            if (tempbillDAO.deleteTempBillPayableDSMDetailsbyWeekId(weekid, rev, yearid)) {

                if (tempBillDSMDAO.deleteTempBillDSMDetailsbyWeekId(weekid, rev, yearid));
                if (tempBillPayCorp.deleteTempBillPayableCorpbyWeekId(weekid, yearid, rev, "DSM"));
                if (tempBillcorpDAO.deleteTempBillReceiveCorpbyWeekId(weekid, yearid, rev, "DSM"));
                {
                    String msg = "Record Deleted Successfully for Week ID: " + weekid;
                    mav2.addObject("Msg", msg);
                    return mav2;
                }

            } else {
                String errormsg = "cannot be deleted";
                mav2.addObject("Msg", errormsg);
                return mav2;
            }
        }//end of deleteBtn

        mav1.addObject("fromDate", fromDate);
        mav1.addObject("toDate", toDate);
        mav1.addObject("billingDate", billingDate);
        mav1.addObject("billNo", billNo);
        mav1.addObject("tempPayList", tempPayList);
        mav1.addObject("revNo", rev);
        mav1.addObject("tempdsmdetils", tempdsmdetils);

//        mav1.addObject("tempRecList", tempRecList);
        return mav1;
    }

    public ModelAndView importBankStatementTemplate(HttpServletRequest request,
            HttpServletResponse response) throws ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        BankStatementDAO bnkStmtDao = new BankStatementDAO();
        List<Date> pendingList = null;
        pendingList = bnkStmtDao.getListFromDatebyStmtList();
        bnkStmtDao.deleteBankStatementbyChecker();
        System.out.println("pendingList is " + pendingList);
        if (pendingList != null && pendingList.size() > 0) {
            ModelAndView mv5 = new ModelAndView("successMsg");
            String msg = "Non-verified Bank Statement is there in checker. Kindly take required action on it first!!";
            mv5.addObject("Msg", msg);
            return mv5;
        }

        System.out.println("Inside importExcelController excelBankStatementUpload");
        ModelAndView mv = new ModelAndView("BankStatement/excelBankStatementUpload");
        BankStatementDAO bankStmtDao = new BankStatementDAO();
        int year = bankStmtDao.getMaxStmtYear();
        System.out.println("year is " + year);
        Date maxToDate = bankStmtDao.getMaxStmtTodate(year);
        System.out.println("maxToDate is " + maxToDate);
        mv.addObject("maxToDate", maxToDate);
        return mv;
    }

    public ModelAndView downloadBankStatementTemplate(HttpServletRequest request,
            HttpServletResponse response) throws IOException, ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView model = null;
        System.out.println(" inside downloadBankStatementTemplate");
        String filename = "bank_statement_excel_file";
        ConstantsMasterDAO constadao = new ConstantsMasterDAO();
        String filepath = constadao.getFilePathbyName("BANK_TEMPLATE");
        System.out.print("File path " + filepath);
        System.out.println("filepath obtained is" + filepath);
        filepath = filepath + filename + ".xlsx";//"C:\\OnlineABTFiles\\Village Culture.pdf";
        File file = new File(filepath, URLDecoder.decode(filepath, "UTF-8"));
// if(file.exists()){
        response.setContentType("application/xls");
// response.setContentType("image/jpeg");
// response.setHeader("Content-Length", String.valueOf(file.length()));
        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        ServletOutputStream out1;
        out1 = response.getOutputStream();
        FileInputStream fin = new FileInputStream(filepath);
        BufferedInputStream bin = new BufferedInputStream(fin);
        BufferedOutputStream bout = new BufferedOutputStream(out1);
        int ch = 0;;
        while ((ch = bin.read()) != -1) {
            bout.write(ch);
        }
        bin.close();
        fin.close();
        bout.close();
        out1.close();
        return null;
    }

    public ModelAndView uploadBankStatement(HttpServletRequest request,
            HttpServletResponse response) throws ParseException, IOException {
        HttpSession session1 = request.getSession(false);
        String uname = request.getParameter("loginname");
        System.out.println("!@#!@#uname is " + uname);
        if (session1 == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        ModelAndView mv = new ModelAndView("BankStatement/excelBankStatementUpload");
        System.out.println("inside upload Bank Statement sheet");
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("file");
        System.out.println(multipartFile);
        String fname = multipartFile.getOriginalFilename();
        System.out.println("fname is: " + fname);
        String fileExtn = FilenameUtils.getExtension(fname);
        System.out.println("File fileExtn is: " + fileExtn);
        BigDecimal revno = BigDecimal.ZERO;
        String startdate = request.getParameter("startdate");
        String enddate = request.getParameter("enddate");
        System.out.println("startdate is: " + startdate + " and enddate is : " + enddate);
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Date startdate1 = sdf.parse(startdate);
        Date enddate1 = sdf.parse(enddate);

        if (startdate != null) {

            XSSFWorkbook wb_xssf = new XSSFWorkbook(multipartFile.getInputStream());
            XSSFSheet sheet = wb_xssf.getSheetAt(0);
            Map<Integer, ArrayList<String>> retMap = new HashMap<Integer, ArrayList<String>>();
            int rowNum = 0;
            CorporatesDAO corpDao = new CorporatesDAO();

            Iterator<Row> rowIterator = sheet.iterator();
            int rows = sheet.getLastRowNum();
            int Rowss = sheet.getPhysicalNumberOfRows();
            System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@ No. of rows are " + rows);
            System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@ getPhysicalNumberOfRows are " + Rowss);
            int entryCount = 0;
            //Row row = rowIterator.next();
            String stmtid = null, disburseId = null, descAmt = null, disburseType = null, fromDate = null, toDate = null, amtDate = null, amtDate1 = null, amtTime = null, corpId = null, receiptNo = null, crDrFlag = null, txnType = null, paidAmt = null, mainBal = null, subAccNum = null, remarks = null;
            remarks = "No Remarks!!";

            BankStatementDAO bnkStmtDao = new BankStatementDAO();

            int stmtId = bnkStmtDao.getMaxStmtIdmaker();
            int corpCount = 0;
            List<String> corporates = new ArrayList<>();
            while (rowIterator.hasNext()) {

                Row row = rowIterator.next();
                System.out.println("$$$$$$$$$$$$ Rowss is " + Rowss);

                System.out.print("Inside row" + row.getRowNum());
                Iterator<Cell> cellIterator = row.cellIterator();
                rowNum = (row.getRowNum());
                int cellNum;

                if (rowNum == 0 || rowNum == 1) {
                    cellNum = 12;

                    for (int cellNo = 0; cellNo < cellNum; cellNo++) {

                        if (rowNum == 0) {
                            while (cellIterator.hasNext()) {
                                Cell cell = cellIterator.next();

                                switch (cell.getCellType()) {
                                    case Cell.CELL_TYPE_STRING:
                                        if (cell.getColumnIndex() == 0) {

                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Txn Posted Date(dd-mm-yyyy)";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 0");
                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }
                                        if (cell.getColumnIndex() == 1) {

                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Txn Posted Time(hh:mm:ss AM/PM)";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 1");
                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }
                                        if (cell.getColumnIndex() == 2) {

                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Bank Sub Account Number";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 2");
                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }
                                        if (cell.getColumnIndex() == 3) {

                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Description";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 3");
                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }
                                        if (cell.getColumnIndex() == 4) {

                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Cheque No.";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 4");
                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }
                                        if (cell.getColumnIndex() == 5) {
                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "CR/DR";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 5");

                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct RRAS UP excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }

                                        if (cell.getColumnIndex() == 6) {
                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Disburse Id";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 6");

                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }

                                        if (cell.getColumnIndex() == 7) {
                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Txn Type";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 7");

                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }
                                        if (cell.getColumnIndex() == 8) {
                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Txn Amount(INR)";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 8");

                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }
                                        }
//                                        if (cell.getColumnIndex() == 9) {
//                                            String colName = cell.getStringCellValue().trim();
//                                            String str2 = "Balance(INR)";
//                                            if (str2.equalsIgnoreCase(colName)) {
//
//                                            } else {
//                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
//                                                System.out.println("inside column 10");
//
//                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
//                                                mv9.addObject("Msg", Msg);
//                                                return mv9;
//                                            }
//
//                                        }

                                        if (cell.getColumnIndex() == 9) {
                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "Remarks";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 9");

                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }

                                        }
                                        if (cell.getColumnIndex() == 10) {
                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "From Date(dd-mm-yyyy)";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 9");

                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }

                                        }

                                        if (cell.getColumnIndex() == 11) {
                                            String colName = cell.getStringCellValue().trim();
                                            String str2 = "To Date(dd-mm-yyyy)";
                                            if (str2.equalsIgnoreCase(colName)) {

                                            } else {
                                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                                System.out.println("inside column 10");

                                                String Msg = "There is a mismatch of Excel sheet Header!! Kindly check and upload the correct Excel sheet!!";
                                                mv9.addObject("Msg", Msg);
                                                return mv9;
                                            }

                                        }

                                }
                            }

                            if (isCellEmpty(row.getCell(cellNo))) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;
                            }
                        } else {
                            if (isCellEmpty(row.getCell(cellNo)) && cellNo != 9) {
                                String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                                System.out.println("Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                                ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                                mv9.addObject("Msg", Msg);
                                return mv9;

                            }
                        }
                    }

                } else {
                    cellNum = 9;
                    for (int cellNo = 0; cellNo < cellNum; cellNo++) {
                        if (isCellEmpty(row.getCell(cellNo))) {
                            String Msg = "Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!";
                            System.out.println(" JAGAN MOHAN inside 9 Empty cell number " + (cellNo + 1) + " at row number " + (rowNum + 1) + " !!");
                            ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                            mv9.addObject("Msg", Msg);
                            return mv9;
                        }
                    }
                }
                System.out.println("Max cellNum is " + cellNum);
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_STRING:

                            subAccNum = null;

                            if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 2");
                                String subAccNo = cell.getStringCellValue().trim();
                                int corpid = corpDao.getCorpIdbySubAccNum(subAccNo);
//                                int corpid = corpDao.getCorpIdbyName(corporateName);
                                if (corpid == 0) {
                                    corpid = corpDao.getCorpIdbyName(subAccNo);
                                    if (corpid == 0) {
                                        corporates.add(subAccNo);
//                                    corporates.add(corporateName);
                                        corpCount++;
                                    }

                                }
                                System.out.println("subAccNo is " + subAccNo);
                                System.out.println("corpid is " + corpid);
                            }
                            break;
                        case Cell.CELL_TYPE_NUMERIC:

                            if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 2");
                                String subAccNo = String.valueOf(Double.valueOf(cell.getNumericCellValue()).longValue());
                                System.out.println("@@@@@@@@@@@ subAccNum is " + subAccNo);
                                int corpid = corpDao.getCorpIdbySubAccNum(subAccNo);
                                System.out.println("@@@@@@@@@@ corpid is " + corpid);
                                if (corpid == 0) {
                                    corporates.add(subAccNo);
//                                    corporates.add(corporateName);
                                    corpCount++;

                                }
                            }

                    }
                }
            }
            if (corpCount > 0) {
                ModelAndView mv9 = new ModelAndView("BankStatement/displayUnregisterCorporate");
                mv9.addObject("corporates", corporates);
                return mv9;
            }
            // Checking for comma in each cell
            rowIterator = sheet.iterator();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                Iterator<Cell> cellIterator = row.cellIterator();
                rowNum = (row.getRowNum());

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                        if (cell.getStringCellValue().contains(",") && cell.getColumnIndex() != 9) {
                            System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                            System.out.println(" Error in String cell type!!");
                            System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                            ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                            String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contain comma!! ";
                            mv9.addObject("Msg", Msg);
                            return mv9;
                        }
                    }
                    if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {

                        Double cellval = cell.getNumericCellValue();
                        if (cellval.toString().contains(",") && cell.getColumnIndex() != 9) {
                            System.out.print("@@@@@@@@@@@@@@@@@Inside row" + row.getRowNum());
                            System.out.println(" Error in numeric cell type!!");
                            System.out.print("@@@@@@@@@@@@@@@@@Cell contains comma");
                            ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                            String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ". Cell/s contain comma!! ";
                            mv9.addObject("Msg", Msg);
                            return mv9;
                        }
                    }
                    if (cell.getCellType() != Cell.CELL_TYPE_STRING && cell.getCellType() != Cell.CELL_TYPE_NUMERIC && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                        ModelAndView mv9 = new ModelAndView("excelSheetUploadErrorMsg");
                        String Msg = "Kindly check Row " + (row.getRowNum() + 1) + ".and cell no of " + cell.getColumnIndex() + " contain other than numeric/string formats!! ";
                        mv9.addObject("Msg", Msg);
                        return mv9;
                    }
                    System.out.println("cll type is = " + cell.getCellTypeEnum());
                }
            }
            boolean flag1 = false;
            boolean flag2 = false;

            rowIterator = sheet.iterator();

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                System.out.print("Inside row" + row.getRowNum());
                Iterator<Cell> cellIterator = row.cellIterator();
                rowNum = (row.getRowNum());
                System.out.println("@@@@@@@@ rowNum is " + rowNum);
                if (isCellEmpty(row.getCell(0))) {
                    break;
                }
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    CellType type = cell.getCellTypeEnum();
                    System.out.println("!!!!!!!! type is " + type);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_STRING:
                            if (cell.getColumnIndex() == 10 && (rowNum == 1)) {
                                System.out.println("inside column 9");
                                fromDate = cell.getStringCellValue().trim();
                                System.out.println("fromDate is " + cell.getStringCellValue());
                                Date fromDate1 = sdf.parse(fromDate);
                                if (fromDate1.compareTo(startdate1) == 0) {
                                    flag1 = true;
                                    System.out.println("fromDate is equal to startdate");
                                }
                                System.out.println("@@@@ flag1 is " + flag1);
                            }
//                             System.out.println("@@@@ flag1 is "+flag1);
                            if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                System.out.println("inside column 10");
                                toDate = cell.getStringCellValue().trim();
                                System.out.println("toDate is " + cell.getStringCellValue());
                                Date toDate1 = sdf.parse(toDate);
                                if (toDate1.compareTo(enddate1) == 0) {
                                    flag2 = true;
                                    System.out.println("toDate is equal to enddate");
                                }
                                System.out.println("@@@@@@@@@ flag1 is " + flag1 + " flag2 is " + flag2);
                                if (!flag1 || !flag2) {
                                    ModelAndView mav2 = new ModelAndView("successMsg");
                                    String Msg = null;
                                    if (!flag1 && flag2) {
                                        Msg = "Selected Transaction start date is " + startdate + " but in excel upload sheet Transaction start date is " + fromDate + "! Transaction Start Date Mismatch results to Upload fail!!";
                                    } else if (flag1 && !flag2) {
                                        Msg = "Selected Transaction end date is " + enddate + " but in excel upload sheet Transaction start date is " + toDate + "! Transaction End Date Mismatch results to Upload fail!!";
                                    } else {
                                        Msg = "Selected Transaction start date is " + startdate + " but in excel upload sheet Transaction start date is " + fromDate + " and Selected Transaction end date is " + enddate + " but in excel upload sheet Transaction end date is " + toDate + "!  Transaction Dates Mismatch result to Upload fail!!";
                                    }
                                    mav2.addObject("Msg", Msg);
                                    return mav2;
                                }
                            }
                            break;
                        case Cell.CELL_TYPE_NUMERIC:
                            if (cell.getColumnIndex() == 10 && (rowNum == 1)) {
                                System.out.println("inside column 9");
                                Date fromDate1 = cell.getDateCellValue();
                                if (fromDate1.compareTo(startdate1) == 0) {
                                    flag1 = true;
                                    System.out.println("fromDate is equal to startdate");
                                }
                                System.out.println("@@@@ flag1 is " + flag1);
                                fromDate = new SimpleDateFormat("dd-MM-yyyy").format(fromDate1);
                                System.out.println("From Date is " + fromDate);
                            }
                            if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                System.out.println("inside column 10");
                                Date toDate1 = cell.getDateCellValue();
                                toDate = new SimpleDateFormat("dd-MM-yyyy").format(toDate1);
                                System.out.println("to date is " + toDate);
                                if (toDate1.compareTo(enddate1) == 0) {
                                    flag2 = true;
                                    System.out.println("toDate is equal to enddate");
                                }
                                System.out.println("@@@@@@@@@ flag1 is " + flag1 + " flag2 is " + flag2);
                                if (!flag1 || !flag2) {
                                    ModelAndView mav2 = new ModelAndView("successMsg");
                                    String Msg = null;
                                    if (!flag1 && flag2) {
                                        Msg = "Selected Transaction start date is " + startdate + " but in excel upload sheet Transaction start date is " + fromDate + "! Transaction Start Date Mismatch results to Upload fail!!";
                                    } else if (flag1 && !flag2) {
                                        Msg = "Selected Transaction end date is " + enddate + " but in excel upload sheet Transaction start date is " + toDate + "! Transaction End Date Mismatch results to Upload fail!!";
                                    } else {
                                        Msg = "Selected Transaction start date is " + startdate + " but in excel upload sheet Transaction start date is " + fromDate + " and Selected Transaction end date is " + enddate + " but in excel upload sheet Transaction end date is " + toDate + "!  Transaction Dates Mismatch result to Upload fail!!";
                                    }
                                    mav2.addObject("Msg", Msg);
                                    return mav2;
                                }
                            }
                    }
                }
            }

            //Disburse ID Check Starts------------------------------------------------------------------------------------>
            rowIterator = sheet.iterator();
            PaymentDisbursementDAO payDisDao = new PaymentDisbursementDAO();
            DisbursedInterestDetailsDAO disburseInterestDao = new DisbursedInterestDetailsDAO();
            TempRefundBillCorpDAO tempRefundBillCorpDao = new TempRefundBillCorpDAO();
            CsdfDetailsDAO csdfDao = new CsdfDetailsDAO();
            miscDisbursementDAO miscdao = new miscDisbursementDAO();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                System.out.print("Inside row" + row.getRowNum());
                Iterator<Cell> cellIterator = row.cellIterator();
                rowNum = (row.getRowNum());
                System.out.println("@@@@@@@@ rowNum is " + rowNum);
                List<PaymentDisbursement> checkDisburseId = null;
                List<PaymentDisbursement> checkDisburseIdinbank = null;
                List<PaymentInterestDisbursement> checkDisburseIdI = null;
                List<PaymentInterestDisbursement> checkDisburseIdIinbankI = null;
                List<TempRefundBillCorp> checkDisburseIdR = null;
                List<TempRefundBillCorp> checkDisburseIdRinbankR = null;
                List<CsdfDetails> checkDisburseIdP = null;
                List<CsdfDetails> checkDisburseIdPinbankP = null;
                List<MiscDisbursement> checkDisburseIdM = null;
                List<MiscDisbursement> checkDisburseIdPinbankM = null;
                String ben1 = null;
                String ben2 = null;
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    CellType type = cell.getCellTypeEnum();
                    System.out.println("!!!!!!!! type is " + type);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_STRING:

                            if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 2");
                                ben1 = cell.getStringCellValue().trim();
                                System.out.println("@@@@@@@@@@@ ben1 is " + ben1);
                                int id = corpDao.getCorpIdbySubAccNum(ben1);
                                System.out.println("@@@@@@@@@@ corpid is " + id);
                                if (id == 0) {

                                    id = corpDao.getCorpIdbyName(ben1);
                                }
                                ben2 = corpDao.geCorpNamebyId(id);
                                System.out.println("subAccNum is " + ben1);
                                System.out.println("corporateName is " + ben2);

                            }
                            if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 5");
                                crDrFlag = cell.getStringCellValue().trim();
                                System.out.println("crDrFlag is " + crDrFlag);
                            }

                            if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 6");
                                disburseId = cell.getStringCellValue().trim();
                                System.out.println("$$$$$$$$$$$Disburse ID Check Starts disburseId is " + disburseId);
                                if (crDrFlag.equalsIgnoreCase("CR")) {
                                    if (disburseId.compareTo("0") == 0) {

                                    } else {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have 0 but it has " + disburseId + ". Kindly correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }

                                if (crDrFlag.equalsIgnoreCase("DR")) {
                                    System.out.println("#######disburseId is " + disburseId.substring(1));
                                    int disbId = Integer.parseInt(disburseId.substring(1));
                                    if (disburseId.startsWith("B") || disburseId.startsWith("b")) {

                                        checkDisburseId = payDisDao.getDisbursementDetailsbyDisburseID(disbId);
                                        checkDisburseIdinbank = payDisDao.getDisbursementDetailsbyDisburseIDnotinbankstmt(disbId);

                                        if (checkDisburseId != null && !(checkDisburseId.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in Payment Disbursement Table");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have existing DisburseId but it has " + disburseId + " which is not existing in Normal Bill Disbursement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (checkDisburseIdinbank != null && !(checkDisburseIdinbank.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in Payment Disbursement Table and not in bank");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column  have DisburseId  " + disburseId + " which is already uploaded in Bank Statement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (!(checkDisburseIdinbank.get(0).getCorporates().getCorporateName().equals(ben2))) {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  Pool holder name =" + ben2 + " ,but actual Corporate name=" + checkDisburseIdinbank.get(0).getCorporates().getCorporateName() + " for this transaction . Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }

                                    }
                                    if (disburseId.startsWith("I") || disburseId.startsWith("i")) {
                                        checkDisburseIdI = disburseInterestDao.getDisbursementInterestDetailsbyDisburseID(disbId);
                                        checkDisburseIdIinbankI = disburseInterestDao.getDisbursementInterestDetailsbyDisburseIDnotinbank(disbId);

                                        if (checkDisburseIdI != null && !(checkDisburseIdI.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in DisbursedInterestDetails Table");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have existing DisburseId but it has " + disburseId + " which is not existing in Interest Disbursement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (checkDisburseIdIinbankI != null && !(checkDisburseIdIinbankI.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in DisbursedInterestDetails Table and not in bank");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column  have DisburseId  " + disburseId + " which is already uploaded in Bank Statement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (!(checkDisburseIdIinbankI.get(0).getDisbursedInterestDetails().getCorporates().getCorporateName().equals(ben2))) {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  Pool holder name =" + ben2 + " ,but actual Corporate name=" + checkDisburseIdIinbankI.get(0).getDisbursedInterestDetails().getCorporates().getCorporateName() + " for this transaction . Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                    }
                                    if (disburseId.startsWith("R") || disburseId.startsWith("r")) {
                                        checkDisburseIdR = tempRefundBillCorpDao.getRefundDetailsbyDisburseID(new BigDecimal(disbId));
                                        checkDisburseIdRinbankR = tempRefundBillCorpDao.getRefundDetailsbyDisburseIDnotinbank(new BigDecimal(disbId));

                                        if (checkDisburseIdR != null && !(checkDisburseIdR.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in tempRefundBillCorp Table");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have existing DisburseId but it has " + disburseId + " which is not existing in Refund Disbursement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (checkDisburseIdRinbankR != null && !(checkDisburseIdRinbankR.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in TempRefundBillCorp Table and not in bank");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column  have DisburseId  " + disburseId + " which is already uploaded in Bank Statement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (!(checkDisburseIdRinbankR.get(0).getCorporates().getCorporateName().equals(ben2))) {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  Pool holder name =" + ben2 + " ,but actual Corporate name=" + checkDisburseIdRinbankR.get(0).getCorporates().getCorporateName() + " for this transaction . Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                    }
                                    if (disburseId.startsWith("P")) {
                                        checkDisburseIdP = csdfDao.getCSDFDetailsbyDisburseID(new BigDecimal(disbId));
                                        checkDisburseIdPinbankP = csdfDao.getCSDFDetailsbyDisburseIDnotinbank(new BigDecimal(disbId));
                                        if (!(ben2.equals("PSDF"))) {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  Pool holder name =" + ben2 + " ,but actual Corporate name=PSDF for this transaction . Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (checkDisburseIdP != null && !(checkDisburseIdP.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in tempRefundBillCorp Table");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have existing DisburseId but it has " + disburseId + " which is not existing in PSDF. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (checkDisburseIdPinbankP != null && !(checkDisburseIdPinbankP.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in TempRefundBillCorp Table and not in bank");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column  have DisburseId  " + disburseId + " which is already uploaded in Bank Statement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                    }
                                    if (disburseId.startsWith("M")) {
                                        checkDisburseIdM = miscdao.getmiscDisbursementbyDisburseID(new BigDecimal(disbId));
                                        checkDisburseIdPinbankM = miscdao.getmiscdisbursementbyDisburseIDnotinbank(new BigDecimal(disbId));

                                        if (!(checkDisburseIdPinbankM.get(0).getCorpName().equals(ben2))) {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  Pool holder name =" + ben2 + " ,but actual Corporate name=" + checkDisburseIdPinbankM.get(0).getCorpName() + " for this transaction . Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (checkDisburseIdM != null && !(checkDisburseIdM.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in miscdisbursement Table");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have existing DisburseId but it has " + disburseId + " which is not existing in miscdisbursement table. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }
                                        if (checkDisburseIdPinbankM != null && !(checkDisburseIdPinbankM.isEmpty())) {
                                            System.out.println("disburseId " + disburseId + " existing in miscdisbursement Table and not in bank");

                                        } else {
                                            ModelAndView mav2 = new ModelAndView("successMsg");
                                            String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column  have DisburseId  " + disburseId + " which is already uploaded in Bank Statement. Kindly check and correct it !!";
                                            mav2.addObject("Msg", Msg);
                                            return mav2;
                                        }

                                    }
                                    if (disburseId.startsWith("P") || disburseId.startsWith("p") || disburseId.startsWith("R") || disburseId.startsWith("r") || disburseId.startsWith("I") || disburseId.startsWith("i") || disburseId.startsWith("B") || disburseId.startsWith("b") || disburseId.startsWith("M") || disburseId.startsWith("m")) {
                                    } else {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have Start with B (or) R (or) I (or) P (or) M along with DisburseId but it has " + disburseId + " . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }

                                }
                                System.out.println("disburseId is " + disburseId);

                            }
                            if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 8");
//                                int paidAmt = new Double(cell.getNumericCellValue()).intValue();
                                String paidAmtforcheck = cell.getStringCellValue().trim();
//                                System.out.println("paidAmt string is " + paidAmtforcheck);
//                                System.out.println("Disburse actual  is " + checkDisburseIdinbank.get(0).getDisburseAmount());
                                if (disburseId.startsWith("B") || disburseId.startsWith("b")) {
                                    if (!(checkDisburseIdinbank.get(0).getDisburseAmount().equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdinbank.get(0).getDisburseAmount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("I") || disburseId.startsWith("i")) {
                                    if (!(checkDisburseIdIinbankI.get(0).getInterestPaidamount().equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdIinbankI.get(0).getInterestPaidamount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("R") || disburseId.startsWith("r")) {
                                    if (!(checkDisburseIdRinbankR.get(0).getPaidAmount().equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdRinbankR.get(0).getPaidAmount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("P")) {
                                    if (!(checkDisburseIdPinbankP.get(0).getCsdfAmount().equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdPinbankP.get(0).getCsdfAmount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("M")) {
                                    if (!(checkDisburseIdPinbankM.get(0).getRefundAmt().equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdPinbankM.get(0).getRefundAmt() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }

                            }
                            break;

                        case Cell.CELL_TYPE_NUMERIC:

                            if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 2");
                                ben1 = String.valueOf(Double.valueOf(cell.getNumericCellValue()).longValue());
                                System.out.println("@@@@@@@@@@@ ben1 is " + ben1);
                                int id = corpDao.getCorpIdbySubAccNum(ben1);
                                System.out.println("@@@@@@@@@@ corpid is " + id);
                                if (id == 0) {

                                    id = corpDao.getCorpIdbyName(ben1);
                                }
                                ben2 = corpDao.geCorpNamebyId(id);
                                System.out.println("subAccNum is " + ben1);
                                System.out.println("corporateName is " + ben2);
                            }

                            if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 6");
                                disburseId = String.valueOf(new Double(cell.getNumericCellValue()).intValue());
                                System.out.println("$$$$$$$$$$$Disburse ID Check Starts disburseId is " + disburseId);

                                if (crDrFlag.equalsIgnoreCase("CR")) {
                                    if (disburseId.compareTo("0") == 0) {

                                    } else {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have 0 but it has " + disburseId + ". Kindly correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (crDrFlag.equalsIgnoreCase("DR")) {
                                    ModelAndView mav2 = new ModelAndView("successMsg");
                                    String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column should have Start with B (or) R (or) I (or) P along with DisburseId but it has " + disburseId + " . Kindly check and correct it !!";
                                    mav2.addObject("Msg", Msg);
                                    return mav2;
                                }
                                System.out.println("disburseId is " + disburseId);
                            }

                            if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 8");
//                                int paidAmt = new Double(cell.getNumericCellValue()).intValue();
                                String paidAmtforcheck = String.valueOf(new BigDecimal(cell.getNumericCellValue()).setScale(2, BigDecimal.ROUND_HALF_EVEN));
                                System.out.println("paidAmt is " + paidAmtforcheck);
                                System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@ ");
                                System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@ ");
                                System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@ ");
                                System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@ ");
                                System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@ ");
                                if (disburseId.startsWith("B") || disburseId.startsWith("b")) {
                                    if (!(checkDisburseIdinbank.get(0).getDisburseAmount().setScale(2, BigDecimal.ROUND_HALF_EVEN).equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdinbank.get(0).getDisburseAmount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("I") || disburseId.startsWith("i")) {
                                    if (!(checkDisburseIdIinbankI.get(0).getInterestPaidamount().setScale(2, BigDecimal.ROUND_HALF_EVEN).equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdIinbankI.get(0).getInterestPaidamount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("R") || disburseId.startsWith("r")) {
                                    if (!(checkDisburseIdRinbankR.get(0).getPaidAmount().setScale(2, BigDecimal.ROUND_HALF_EVEN).equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdRinbankR.get(0).getPaidAmount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("P")) {
                                    if (!(checkDisburseIdPinbankP.get(0).getCsdfAmount().setScale(2, BigDecimal.ROUND_HALF_EVEN).equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdPinbankP.get(0).getCsdfAmount() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }
                                if (disburseId.startsWith("M")) {
                                    if (!(checkDisburseIdPinbankM.get(0).getRefundAmt().setScale(2, BigDecimal.ROUND_HALF_EVEN).equals(new BigDecimal(paidAmtforcheck)))) {
                                        ModelAndView mav2 = new ModelAndView("successMsg");
                                        String Msg = "Kindly check Row no." + (rowNum + 1) + "  Disburse Id Column have DisburseId  " + disburseId + " , where  DR amount=" + paidAmtforcheck + " and actual Disburse amount=" + checkDisburseIdPinbankM.get(0).getRefundAmt() + " are not equal  . Kindly check and correct it !!";
                                        mav2.addObject("Msg", Msg);
                                        return mav2;
                                    }
                                }

                            }

                    }
                }
            }

            //Disburse ID Check Ends------------------------------------------------------------------------------------>
            rowIterator = sheet.iterator();
            List<Integer> nonverifiedrow = new ArrayList<Integer>();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                System.out.print("Inside row" + row.getRowNum());
                Iterator<Cell> cellIterator = row.cellIterator();
                rowNum = (row.getRowNum());
                System.out.println("@@@@@@@@ rowNum is " + rowNum);
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    CellType type = cell.getCellTypeEnum();
                    System.out.println("!!!!!!!! type is " + type);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_STRING:
//                            System.out.println("SSSS cell.getCellType() is "+cell.getCellType());
                            if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 0");
                                amtDate = cell.getStringCellValue().trim();
                                Date date1 = new SimpleDateFormat("dd-MM-yyyy").parse(amtDate);
                                amtDate1 = new SimpleDateFormat("yyyy-MM-dd").format(date1);
                                System.out.println("amtDate is " + amtDate);
                            }
                            if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 1 STRING");
                                amtTime = cell.getStringCellValue().trim();
                                System.out.println("STRING amtTime is " + amtTime);
                            }
                            if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 2");
                                subAccNum = cell.getStringCellValue().trim();
                                System.out.println("@@@@@@@@@@@ subAccNum is " + subAccNum);
                                int corpid = corpDao.getCorpIdbySubAccNum(subAccNum);
                                System.out.println("@@@@@@@@@@ corpid is " + corpid);
                                if (corpid == 0) {

                                    corpid = corpDao.getCorpIdbyName(subAccNum);
                                }
                                String corporateName = corpDao.geCorpNamebyId(corpid);
                                corpId = Integer.toString(corpid);
                                System.out.println("subAccNum is " + subAccNum);
                                System.out.println("corporateName is " + corporateName);
                                System.out.println("corpId is " + corpId);
                            }
                            if (cell.getColumnIndex() == 3 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 3");
                                descAmt = cell.getStringCellValue().trim();
                                System.out.println("descAmt is " + descAmt);
                            }
                            if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 4");
//                                int receiptNo = new Double(cell.getNumericCellValue()).intValue();
                                receiptNo = cell.getStringCellValue().trim();
                                System.out.println("receiptNo is " + receiptNo);
                            }

                            if (cell.getColumnIndex() == 5 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 5");
                                crDrFlag = cell.getStringCellValue().trim();
                                System.out.println("crDrFlag is " + crDrFlag);
                            }

                            if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 6");
                                disburseId = cell.getStringCellValue().trim();
                                System.out.println("disburseId is " + disburseId);
                            }
                            if (cell.getColumnIndex() == 7 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 7");
                                txnType = cell.getStringCellValue().trim();
                                System.out.println("txnType is " + txnType);
                            }
                            if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 8");
//                                int paidAmt = new Double(cell.getNumericCellValue()).intValue();
                                paidAmt = cell.getStringCellValue().trim();
                                System.out.println("paidAmt string is " + paidAmt);
                            }
                            if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 9");
//                                int paidAmt = new Double(cell.getNumericCellValue()).intValue();
                                remarks = cell.getStringCellValue().trim();
                                System.out.println("remarks string is " + remarks);
                            }

                            if (cell.getColumnIndex() == 10 && (rowNum == 1)) {
                                System.out.println("inside column 10");
                                fromDate = cell.getStringCellValue().trim();
                                System.out.println("From Date is " + cell.getStringCellValue());
                            }
                            if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                System.out.println("inside column 11");
                                toDate = cell.getStringCellValue().trim();
                                System.out.println("to date is " + cell.getStringCellValue());
                            }
                            break;

                        case Cell.CELL_TYPE_NUMERIC:

//                                 System.out.println("NNNNN cell.getCellType() is"+cell.getCellType());
                            if (cell.getColumnIndex() == 0 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("@@@@@ inside column 0 Transaction Date");
                                Date date1 = cell.getDateCellValue();
                                amtDate = new SimpleDateFormat("dd-MM-yyyy").format(date1);
                                amtDate1 = new SimpleDateFormat("yyyy-MM-dd").format(date1);
                                System.out.println("amtDate is " + amtDate);
                            }

                            if (cell.getColumnIndex() == 1 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 1");
                                Date date = cell.getDateCellValue();
                                System.out.println(" date is " + date);
                                SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm:ss a");
//                                    
                                amtTime = formatTime.format(date);
                                System.out.println("amtTime is " + amtTime);
                            }
                            if (cell.getColumnIndex() == 4 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 4");
//                                int receiptNo = new Double(cell.getNumericCellValue()).intValue();
                                receiptNo = String.valueOf(new Double(cell.getNumericCellValue()).intValue());
                                System.out.println("receiptNo is " + receiptNo);
                            }

                            if (cell.getColumnIndex() == 6 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 6");
//                                int paidAmt = new Double(cell.getNumericCellValue()).intValue();
                                disburseId = String.valueOf(new Double(cell.getNumericCellValue()).intValue());
                                System.out.println("disburseId is " + disburseId);
                            }

                            if (cell.getColumnIndex() == 8 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 8");
//                                int paidAmt = new Double(cell.getNumericCellValue()).intValue();
                                paidAmt = String.valueOf(new Double(cell.getNumericCellValue()));
                                System.out.println("paidAmt is " + paidAmt);
                            }

                            if (cell.getColumnIndex() == 9 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 9");
//                                int paidAmt = new Double(cell.getNumericCellValue()).intValue();
                                remarks = String.valueOf(new Double(cell.getNumericCellValue()));
                                System.out.println("remarks is " + remarks);
                            }

                            if (cell.getColumnIndex() == 10 && (rowNum == 1)) {
                                System.out.println("inside column 10");
                                Date date1 = cell.getDateCellValue();
                                fromDate = new SimpleDateFormat("dd-MM-yyyy").format(date1);
                                System.out.println("From Date is " + fromDate);
                            }
                            if (cell.getColumnIndex() == 11 && (rowNum == 1)) {
                                System.out.println("inside column 11");
                                Date date1 = cell.getDateCellValue();
                                toDate = new SimpleDateFormat("dd-MM-yyyy").format(date1);
                                System.out.println("to date is " + toDate);
                            }

                            if (cell.getColumnIndex() == 2 && (rowNum <= rows) && (rowNum != 0)) {
                                System.out.println("inside column 2");
                                subAccNum = String.valueOf(Double.valueOf(cell.getNumericCellValue()).longValue());
                                System.out.println("@@@@@@@@@@@ subAccNum is " + subAccNum);
                                int corpid = corpDao.getCorpIdbySubAccNum(subAccNum);
                                System.out.println("@@@@@@@@@@ corpid is " + corpid);
                                if (corpid == 0) {

                                    corpid = corpDao.getCorpIdbyName(subAccNum);
                                }
                                String corporateName = corpDao.geCorpNamebyId(corpid);
                                corpId = Integer.toString(corpid);
                                System.out.println("subAccNum is " + subAccNum);
                                System.out.println("corporateName is " + corporateName);
                                System.out.println("corpId is " + corpId);
                            }
                    }
                }
                if (rowNum != 0) {
                    int result = bnkStmtDao.getBankEntryExistance(Integer.parseInt(corpId), amtDate1, amtTime);
                    if (result == 0) {
                        ArrayList<String> valSetOne = new ArrayList<>();
                        stmtId = stmtId + 1;
                        stmtid = Integer.toString(stmtId);
                        valSetOne.add(stmtid);
                        valSetOne.add(fromDate);
                        valSetOne.add(toDate);
                        valSetOne.add(amtDate);
                        valSetOne.add(amtTime);
                        valSetOne.add(corpId);
                        valSetOne.add(receiptNo);
                        valSetOne.add(crDrFlag);
                        valSetOne.add(disburseId);
                        valSetOne.add(txnType);
                        valSetOne.add(paidAmt);
//                        valSetOne.add(mainBal);
                        valSetOne.add(subAccNum);
                        valSetOne.add(descAmt);

                        if (crDrFlag.equalsIgnoreCase("DR")) {
                            if ((disburseId.startsWith("B")) || (disburseId.startsWith("b"))) {
                                valSetOne.add("Bills");
                            }
                            if ((disburseId.startsWith("I")) || (disburseId.startsWith("i"))) {
                                valSetOne.add("Interest");
                            }
                            if ((disburseId.startsWith("P")) || (disburseId.startsWith("p"))) {
                                valSetOne.add("PSDF");
                            }
                            if ((disburseId.startsWith("R")) || (disburseId.startsWith("r"))) {
                                valSetOne.add("Refund");
                            }
                            if ((disburseId.startsWith("M")) || (disburseId.startsWith("m"))) {
                                valSetOne.add("Misc");
                            }
                        } else if (crDrFlag.equalsIgnoreCase("CR")) {
                            valSetOne.add("Credit");
                        }

                        valSetOne.add(remarks);
                        retMap.put(stmtId, valSetOne);
                        remarks = "No Remarks!!";
                    } else {
                        nonverifiedrow.add(rowNum + 1);
                    }
                }
            }
            for (Integer nonver : nonverifiedrow) {
                System.out.println("nonverifiedrow is " + nonver);
            }
            multipartFile.getInputStream().close();

            BigDecimal bgpool = new BigDecimal(0);
            PoolAccountDetailsDAO pooldao = new PoolAccountDetailsDAO();
            List<PoolAccountDetails> listpool = null;
            listpool = pooldao.getPoolAccountDetails();
            bgpool = listpool.get(0).getMainBalance();

            for (Map.Entry<Integer, ArrayList<String>> entry : retMap.entrySet()) {
                MakerBankStatement bnkStmt = new MakerBankStatement();
                Integer key = entry.getKey();
                List<String> values = entry.getValue();
                System.out.println("Key = " + key);
                fromDate = values.get(1);
                System.out.println("##### fromDate is " + fromDate);
                toDate = values.get(2);
                System.out.println("##### toDate is " + toDate);
                SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MM-yyyy");
                Date date1 = dateFormat2.parse(fromDate);
                System.out.println("date1is " + date1);
                SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
                Date date2 = dateFormat2.parse(toDate);
                amtDate = values.get(3);
                Date date3 = dateFormat2.parse(amtDate);
                amtTime = values.get(4);
                corpId = values.get(5);
                receiptNo = values.get(6);
                crDrFlag = values.get(7);
                disburseId = values.get(8);
                txnType = values.get(9);
                paidAmt = values.get(10);
//                mainBal = values.get(11);
                subAccNum = values.get(11);
                descAmt = values.get(12);
                disburseType = values.get(13);
                remarks = values.get(14);

                Date entryDate = new Date();
                Corporates corp = new Corporates();

                bnkStmt.setStmtId(new BigDecimal(key));
                bnkStmt.setStmtFromdate(date1);
                bnkStmt.setStmtTodate(date2);
                bnkStmt.setAmountDate(date3);
                bnkStmt.setAmountTime(amtTime);
                corp.setSubAccountNumber(subAccNum);
                corp.setCorporateId(Integer.parseInt(corpId));
                bnkStmt.setCorporates(corp);
                bnkStmt.setReceiptNumber(receiptNo);
                bnkStmt.setCreditDebitFlag(crDrFlag);

                if (crDrFlag.equalsIgnoreCase("DR")) {

                    bnkStmt.setDisburseId(new BigDecimal(disburseId.substring(1)));
                    bnkStmt.setReconFlag("0");
                } else {

                    bnkStmt.setDisburseId(new BigDecimal(0));

                    bnkStmt.setReconFlag("0");

                    bgpool = bgpool.add(new BigDecimal(paidAmt));
                    bnkStmt.setPoolBal(bgpool);

                }

                bnkStmt.setTransactionType(txnType);
                bnkStmt.setPaidAmount(new BigDecimal(paidAmt));

                bnkStmt.setMainBalance(new BigDecimal(0));
                bnkStmt.setEntryDate(entryDate);
                bnkStmt.setEntryDesc(descAmt);
//                bnkStmt.setStmtStatus("Pending");
                bnkStmt.setStmtStatus("mPending");

                bnkStmt.setMappedAmount(BigDecimal.ZERO);
                bnkStmt.setMappedBalance(new BigDecimal(paidAmt));
                bnkStmt.setDisburseType(disburseType);

                bnkStmt.setRemarks(remarks);

                try {
                    if (bnkStmtDao.NewBankStatementEntriesmaker(bnkStmt)) {
                        System.out.println("New stmt entry added successfully");
                        entryCount++;
//                            System.out.println("entryCount is "+entryCount);
//                            System.out.println("rows is "+rows);
                    }
                } catch (Exception t) {
                    System.out.println("Exception is" + t.getMessage());
                    t.printStackTrace();
                }
            }
            //CHECKING FOR NEW BANK ENTRIES, IF ANY
            if (entryCount == rows || entryCount > 0) {

                ModelAndView modelAndView = new ModelAndView("redirect:viewBankStmtDetailsOnUpload.htm");
                modelAndView.addObject("startdate", startdate);
                modelAndView.addObject("nonverifiedrow", nonverifiedrow);

                return modelAndView;

            } //NO NEW BANK ENTRIES FOUND
            else {
                ModelAndView mv9 = new ModelAndView("successMsg");
                String msg = "No new Bank Entry found in the Bank Statement !! Kindly Check!!";
                mv9.addObject("Msg", msg);
                return mv9;
            }
        }

        return mv;
    }

    public ModelAndView viewBankStatement(HttpServletRequest request,
            HttpServletResponse response) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        System.out.println("Inside importExcelController");

//        List<BankStatement> stmtInfoList = bankDao.getStmtListByStmtStatus();
        TempRefundBillCorpDAO temprefunddao = new TempRefundBillCorpDAO();
        List<TempRefundBillCorp> listrefund = null;
        CsdfDetailsDAO csdfdao = new CsdfDetailsDAO();
        List<CsdfDetails> listpsdf = null;
        listrefund = temprefunddao.getAllPendingReceviableTempRefundBillCorp();
        TempPaymentDisbursementDAO tempdisdao = new TempPaymentDisbursementDAO();
        List<TempPaymentDisbursement> list1234 = null;
        DisbursedInterestDetailsDAO disinterestdao = new DisbursedInterestDetailsDAO();
        List<PaymentInterestDisbursement> listcheck = null;
        list1234 = tempdisdao.getTempDisbursementDetailsbyStatus("Pending");
        if (list1234 != null && list1234.size() > 0) {
            ModelAndView mv = new ModelAndView("successMsg");
            mv.addObject("Msg", "Please clear the pending Payment Disbusrment !!!!!! ");
            return mv;
        }
        if (listrefund != null && listrefund.size() > 0) {
            ModelAndView mv2 = new ModelAndView("successMsg");
            mv2.addObject("Msg", "Disbursement is Pending at Checker . Please Clear it and Try Again...");
            return mv2;
        }

        listpsdf = csdfdao.getCsdfDetails("Bills");
        if (listpsdf != null && listpsdf.size() > 0) {
            ModelAndView mv2 = new ModelAndView("successMsg");
            mv2.addObject("Msg", "PSDF Disbursement is Pending at Checker . Please Clear it and Try Again...");
            return mv2;
        }
        listpsdf = csdfdao.getCsdfDetails("Interest");
        if (listpsdf != null && listpsdf.size() > 0) {
            ModelAndView mv2 = new ModelAndView("successMsg");
            mv2.addObject("Msg", "Interest PSDF Pending in Checker. Please Clear IT");
            return mv2;
        }

        listcheck = disinterestdao.getDisbursedInterestDetailsbyCorpforChecker();
        if (listcheck != null && listcheck.size() > 0) {
            ModelAndView mv2 = new ModelAndView("successMsg");
            mv2.addObject("Msg", "Interest Disbursement is Pending in Checker");
            return mv2;
        }
        miscDisbursementDAO miscdao = new miscDisbursementDAO();
        List<MiscDisbursement> listmiscdis = null;
        listmiscdis = miscdao.getmiscDetails("Bills");
        System.out.print("Inside misc button" + listmiscdis.size());
        if (listmiscdis != null && listmiscdis.size() > 0) {
            ModelAndView mv2 = new ModelAndView("successMsg");
            mv2.addObject("Msg", "Misc Disbursement Record is pending with checker...Please clear it");
            return mv2;

        }

        ModelAndView mv = new ModelAndView("BankStatement/viewBankStatement");
        BankStatementDAO bankDao = new BankStatementDAO();
        List<Date> stmtInfoList = bankDao.getListFromDatebyStmtList();
        System.out.println("stmtInfoList is " + stmtInfoList);
        if (stmtInfoList != null) {
            System.out.println("stmtInfoList size is " + stmtInfoList.size());
            mv.addObject("stmtInfoList", stmtInfoList);
        } else {
            ModelAndView mv1 = new ModelAndView("successMsg");
            String Msg = "No Bank Statement to Verify!! ";
            mv1.addObject("Msg", Msg);
            return mv1;
        }
        return mv;
    }

    public ModelAndView viewBankStmtDetailsByFromDate(HttpServletRequest request,
            HttpServletResponse response) throws ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        System.out.println("Inside importExcelController");
        ModelAndView mv = new ModelAndView("BankStatement/viewCheckerBankStatementInDetail");
        BankStatementDAO bankDao = new BankStatementDAO();
        String verify = request.getParameter("bconfirm");
        String delete = request.getParameter("bcancel");
        if (verify != null) {
            System.out.println("@@@ In verify condition");
            List<MakerBankStatement> makerbnkstmt = null;
            BigDecimal bgpool = new BigDecimal(0);
            PoolAccountDetailsDAO pooldao = new PoolAccountDetailsDAO();
            List<PoolAccountDetails> listpoolnew = null;
            listpoolnew = pooldao.getPoolAccountDetails();
            bgpool = listpoolnew.get(0).getMainBalance();
            Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());

            makerbnkstmt = bankDao.getBankStatementbymakerpending();
            for (MakerBankStatement e : makerbnkstmt) {
                BankStatement bnkstmt = new BankStatement();
                int stmtId = bankDao.getMaxStmtId();
                stmtId = stmtId + 1;
                bnkstmt.setStmtId(new BigDecimal(stmtId));
                bnkstmt.setStmtFromdate(e.getStmtFromdate());
                bnkstmt.setStmtTodate(e.getStmtTodate());
                bnkstmt.setCorporates(e.getCorporates());
                bnkstmt.setAmountDate(e.getAmountDate());
                bnkstmt.setAmountTime(e.getAmountTime());
                bnkstmt.setPaidAmount(e.getPaidAmount());
                bnkstmt.setReceiptNumber(e.getReceiptNumber());
                bnkstmt.setCreditDebitFlag(e.getCreditDebitFlag());
                bnkstmt.setTransactionType(e.getTransactionType());
                bnkstmt.setOpenBalance(e.getOpenBalance());
                bnkstmt.setMainBalance(e.getMainBalance());
                bnkstmt.setMappedAmount(e.getMappedAmount());
                bnkstmt.setMappedBalance(e.getMappedBalance());
                bnkstmt.setMappedStatus(e.getMappedStatus());
                bnkstmt.setStmtStatus(e.getStmtStatus());
                bnkstmt.setRemarks(e.getRemarks());
                bnkstmt.setEntryDate(e.getEntryDate());
                bnkstmt.setEntryDesc(e.getEntryDesc());
                bnkstmt.setDisburseId(e.getDisburseId());
                bnkstmt.setReconFlag(e.getReconFlag());
                bnkstmt.setDisburseType(e.getDisburseType());
                if (e.getCreditDebitFlag().equalsIgnoreCase("DR")) {
                    bnkstmt.setPoolBal(e.getPoolBal());

                    if (e.getDisburseType().equals("Bills")) {
                        System.out.println("Inside for  bank Bills");
                        DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
                        PaymentDisbursementDAO paydisdao = new PaymentDisbursementDAO();
                        List<PaymentDisbursement> listpaydiburse = paydisdao.getDisbursementDetailsbyDisburseID(e.getDisburseId().intValue());
                        if (listpaydiburse != null && !(listpaydiburse.isEmpty())) {
                            System.out.println("Inside for  bank bill print");
                            PaymentDisbursement paydis = new PaymentDisbursement();
                            paydis = listpaydiburse.get(0);
                            DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                            BigDecimal slno = new BigDecimal(0);
                            slno = new BigDecimal(reconcorpdao.getMaxslno());
                            slno = slno.add(BigDecimal.ONE);
                            System.out.println("slno =" + slno);
                            reconcorp.setSlno(slno);
                            reconcorp.setCorporates(e.getCorporates());
                            reconcorp.setWeekId(paydis.getWeekId());
                            reconcorp.setBillEntryDate(e.getAmountDate());
                            reconcorp.setBillType(paydis.getBillReceiveCorp().getBillType());
                            reconcorp.setBillingDate(paydis.getBillingDate());
                            reconcorp.setRevisionNo(paydis.getBillReceiveCorp().getRevisionNo());
                            reconcorp.setBillDueDate(paydis.getBillDueDate());
                            reconcorp.setRecTotalnet(paydis.getBillReceiveCorp().getToalnet());
                            reconcorp.setEntryDate(new Date());
                            reconcorp.setBillYear(paydis.getBillReceiveCorp().getBillYear());
                            reconcorp.setRecFinalamount(paydis.getTotalAmount());
                            reconcorp.setRecPendingamount(paydis.getPendingAmount());
                            reconcorp.setCrDrDate(e.getAmountDate());
                            reconcorp.setDrAmount(e.getPaidAmount());
                            reconcorp.setDrSettledAmount(paydis.getDisburseAmount());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(e.getCorporates().getCorporateId());
                            System.out.println("outstanding =" + outstanding);
                            outstanding = outstanding.add(paydis.getDisburseAmount());
                            System.out.println("outstanding after=" + outstanding);
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Receivable Disbursed");
                            reconcorpdao.NewReconciliationCorp(reconcorp);
                        }
                    } else if (e.getDisburseType().equals("Refund")) {
                        DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
                        TempRefundBillCorpDAO temprefundbill = new TempRefundBillCorpDAO();
                        List<TempRefundBillCorp> temprefund = temprefundbill.getRefundDetailsbyDisburseID(e.getDisburseId());
                        if (temprefund != null && !(temprefund.isEmpty())) {
                            TempRefundBillCorp temprefundvar = new TempRefundBillCorp();
                            temprefundvar = temprefund.get(0);
                            DynReconciliationCorp reconcorp = new DynReconciliationCorp();

                            BigDecimal slno = new BigDecimal(0);
                            slno = new BigDecimal(reconcorpdao.getMaxslno());
                            slno = slno.add(BigDecimal.ONE);
                            reconcorp.setSlno(slno);
                            reconcorp.setCorporates(e.getCorporates());
                            reconcorp.setWeekId(temprefundvar.getWeekid());
                            reconcorp.setBillEntryDate(e.getAmountDate());
                            reconcorp.setBillType(temprefundvar.getBillPayableCorp().getBillType());
                            reconcorp.setBillingDate(temprefundvar.getBillPayableCorp().getBillingDate());
                            reconcorp.setRevisionNo(temprefundvar.getBillPayableCorp().getRevisionNo());
                            reconcorp.setBillDueDate(temprefundvar.getBillPayableCorp().getBillDueDate());
                            reconcorp.setPayTotalnet(temprefundvar.getBillPayableCorp().getTotalnet());
                            reconcorp.setEntryDate(new Date());
                            reconcorp.setBillYear(temprefundvar.getBillPayableCorp().getBillYear());
                            reconcorp.setRecFinalamount(temprefundvar.getBillPayableCorp().getRevisedrefund());
                            reconcorp.setRecPendingamount(temprefundvar.getPendingAmount());
                            reconcorp.setCrDrDate(e.getAmountDate());
                            reconcorp.setDrAmount(e.getPaidAmount());
                            reconcorp.setDrSettledAmount(temprefundvar.getPaidAmount());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(e.getCorporates().getCorporateId());
                            outstanding = outstanding.add(temprefundvar.getPaidAmount());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Refund Disbursed");
                            reconcorpdao.NewReconciliationCorp(reconcorp);
                        }
                    } else if (e.getDisburseType().equals("Interest")) {
                        DynReconciliationCropDAO reconcorpdao = new DynReconciliationCropDAO();
                        DisbursedInterestDetailsDAO disintdetdao = new DisbursedInterestDetailsDAO();
                        List<PaymentInterestDisbursement> disintdetlis = disintdetdao.getPaymentInterestdisbursementbyslno(e.getDisburseId());
                        if (disintdetlis != null && !(disintdetlis.isEmpty())) {

                            PaymentInterestDisbursement paydisint = new PaymentInterestDisbursement();
                            DynReconciliationCorp reconcorp = new DynReconciliationCorp();
                            paydisint = disintdetlis.get(0);

                            BigDecimal slno = new BigDecimal(0);
                            slno = new BigDecimal(reconcorpdao.getMaxslno());
                            slno = slno.add(BigDecimal.ONE);
                            reconcorp.setSlno(slno);
                            reconcorp.setCorporates(e.getCorporates());
                            reconcorp.setWeekId(paydisint.getDisbursedInterestDetails().getWeekId());
                            reconcorp.setBillEntryDate(e.getAmountDate());
                            reconcorp.setBillType(paydisint.getDisbursedInterestDetails().getBillType());
                            reconcorp.setBillingDate(paydisint.getDisbursedInterestDetails().getBillingDate());
                            reconcorp.setRevisionNo(paydisint.getDisbursedInterestDetails().getRevisionNo());
                            reconcorp.setBillDueDate(paydisint.getDisbursedInterestDetails().getBillingDuedate());
                            reconcorp.setRecTotalnet(paydisint.getDisbursedInterestDetails().getInterestAmount());
                            reconcorp.setEntryDate(new Date());
                            Date dateyear = paydisint.getDisbursedInterestDetails().getBillingDate();
                            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"));
                            cal.setTime(dateyear);
                            int year = cal.get(Calendar.YEAR);
                            reconcorp.setBillYear(paydisint.getDisbursedInterestDetails().getBillYear());
                            reconcorp.setRecFinalamount(paydisint.getDisbursedInterestDetails().getInterestAmount());
                            reconcorp.setRecPendingamount(paydisint.getInterestPendingamount());
                            reconcorp.setCrDrDate(e.getAmountDate());
                            reconcorp.setDrAmount(e.getPaidAmount());
                            reconcorp.setDrSettledAmount(paydisint.getInterestPaidamount());
                            BigDecimal outstanding = reconcorpdao.getLatestOutstandingbyCorpId(e.getCorporates().getCorporateId());
                            outstanding = outstanding.add(paydisint.getInterestPaidamount());
                            reconcorp.setOutstandingAmount(outstanding);
                            reconcorp.setRemarks("Disbursed Interest");
                            reconcorpdao.NewReconciliationCorp(reconcorp);
                        }
                    }

                } else {

                    bgpool = bgpool.add(e.getPaidAmount());
                    bnkstmt.setPoolBal(bgpool);

                }
                currentTimestamp = addMilliseconds(currentTimestamp, 1);
                bnkstmt.setEntryTime(currentTimestamp);                
                bankDao.NewBankStatementEntries(bnkstmt);
                System.out.println("new bank statement created");

            }
            String frmDate = request.getParameter("fromDate");
            Date fromDate = new SimpleDateFormat("dd-MM-yyyy").parse(frmDate);
//            Date fromDate = new SimpleDateFormat("yyyy-MM-dd").parse(frmDate);

            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String strDate = dateFormat.format(fromDate);
            System.out.println("strDate is " + strDate);
            BigDecimal poolsum = new BigDecimal(0);
            poolsum = bankDao.getCRSumAmountBankStmtbyPendingStatus();
            if (poolsum == null) {
                poolsum = new BigDecimal(0);
            }
            int result = bankDao.updateBankStmtbyCheckerFromDate(strDate);
            bankDao.updatemakerBankStmtbyCheckerFromDate(strDate);
            System.out.println("result is " + result);
            if (result == 0) {
                ModelAndView mv1 = new ModelAndView("successMsg");
                String Msg = "Verified Bank Statement whose From Date is " + frmDate + " !! ";
                PoolAccountDetailsDAO poolaccdao = new PoolAccountDetailsDAO();
                System.out.println("########## poolsum is " + poolsum);
                List<PoolAccountDetails> listpool = new ArrayList<>();

                listpool = poolaccdao.getPoolAccountDetails();
                BigDecimal mainpool = listpool.get(0).getMainBalance();
                System.out.println(" ##########  prior to addition mainpool is " + mainpool);
                BigDecimal finalpoolact = mainpool.add(poolsum);
                System.out.println(" ##########  finalpoolact is " + finalpoolact);
                poolaccdao.getUpdatePoolAccountbyChecker(finalpoolact);
                mv1.addObject("Msg", Msg);
                return mv1;
            } else {
                ModelAndView mv1 = new ModelAndView("successMsg");
                String Msg = "Not Verified Bank Statement whose From Date is " + frmDate + " !! ";
                mv1.addObject("Msg", Msg);
                return mv1;
            }
        }
        if (delete != null) {
            System.out.println("@@@ In delete condition");
            String frmDate = request.getParameter("fromDate");
            System.out.println("frmDate is " + frmDate);
            Date fromDate = new SimpleDateFormat("dd-MM-yyyy").parse(frmDate);
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String strDate = dateFormat.format(fromDate);
            System.out.println("strDate is " + strDate);
            int result = bankDao.deleteBankStatementbyCheckerFromDate(strDate);
            System.out.println("result is " + result);
            if (result == 0) {
                ModelAndView mv1 = new ModelAndView("successMsg");
                String Msg = "Not Discarded Bank Statement whose From Date is " + frmDate + " !! ";
                mv1.addObject("Msg", Msg);
                return mv1;
            } else {
                ModelAndView mv1 = new ModelAndView("successMsg");
                String Msg = "Discarded Bank Statement whose From Date  is " + frmDate + " !! ";
                mv1.addObject("Msg", Msg);
                return mv1;
            }
        }

        String frmDate = request.getParameter("selecteddate");
        Date txFrmdt = new SimpleDateFormat("yyyy-MM-dd").parse(frmDate);
        System.out.println("frmDate is " + frmDate);
        Date toDate = bankDao.getToDateForFromDate(frmDate);
        System.out.println("toDate is " + toDate);
        String txnToDate = new SimpleDateFormat("dd-MM-yyyy").format(toDate);
        String txn4mDate = new SimpleDateFormat("dd-MM-yyyy").format(txFrmdt);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String endDate = dateFormat.format(toDate);
        List<Object[]> stmtInfo = bankDao.getStmtInfoByStatusFrmDate(frmDate);
        System.out.println("stmtInfo is " + stmtInfo);
        if (stmtInfo != null) {
            CorporatesDAO corpDao = new CorporatesDAO();
            List<Object[]> stmtInfo1 = new ArrayList<>();
            int index = 0;
            for (Object[] info : stmtInfo) {
                BigDecimal corpId = (BigDecimal) info[3];
                String corpName = corpDao.geCorpNamebyId(corpId.intValueExact());
                String bankSubAccNumber = corpDao.getBankSubAccNumberbyId(corpId.intValueExact());
                System.out.println("corpName is " + corpName);
                Date txDate = (Date) info[4];
                String txTime = (String) info[5];
                BigDecimal txAmt = (BigDecimal) info[6];
//            BigDecimal receiptNo = (BigDecimal) info[7];
                String crDbFlag = (String) info[8];
//            String txType = (String) info[9];

                BigDecimal openBal = (BigDecimal) info[10];
                String disburseType = (String) info[22];
                String entryDesc = (String) info[19];
                String remarks = (String) info[17];
                Date entryDate = (Date) info[18];
                BigDecimal disburseId = (BigDecimal) info[20];
                String disbursalId = disburseId.toString();
                StringBuilder sb = new StringBuilder(disbursalId);
                if (disburseType.equalsIgnoreCase("Bills")) {

                    sb.insert(0, 'B');
                }
                if (disburseType.equalsIgnoreCase("Refund")) {

                    sb.insert(0, 'R');
                }
                if (disburseType.equalsIgnoreCase("PSDF")) {

                    sb.insert(0, 'P');
                }
                if (disburseType.equalsIgnoreCase("Interest")) {

                    sb.insert(0, 'I');
                }
                System.out.println("##########Disburse Id is " + sb.toString());
                System.out.println("disburseId " + disburseId);
                System.out.println("txDate " + txDate);
                System.out.println("txTime " + txTime);
                System.out.println("txAmt " + txAmt);
                //System.out.println("receiptNo "+receiptNo);
                System.out.println("crDbFlag " + crDbFlag);
                //System.out.println("txType "+txType);
                System.out.println("openBal " + openBal);
                System.out.println("disburseType " + disburseType);
                System.out.println("&&&&&& entryDesc  " + entryDesc);
                System.out.println("&&&&&& entryDate  " + entryDate);
//                Object[] stmtDetail = new Object[]{corpName, txDate, txTime, entryDesc, crDbFlag, txAmt, openBal, mainBal, entryDate};
                Object[] stmtDetail = new Object[]{corpName, bankSubAccNumber, txDate, txTime, entryDesc, crDbFlag, sb.toString(), txAmt, disburseType, entryDate, remarks};
                //stmtInfo1.add(stmtDetail);
                stmtInfo1.add(index, stmtDetail);
                index++;
            }
            System.out.println("stmtInfo1 is " + stmtInfo1);
            mv.addObject("stmtInfo", stmtInfo1);
        }
        mv.addObject("endDate", txnToDate);
        mv.addObject("frmDate", txn4mDate);
        return mv;
    }

    public ModelAndView viewCheckedBankStatement(HttpServletRequest request,
            HttpServletResponse response) throws ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        System.out.println("Inside importExcelController");
        ModelAndView mv = new ModelAndView("BankStatement/selectTransactionDatesBankStmt");
        BankStatementDAO bankDao = new BankStatementDAO();
        String bName = request.getParameter("bName");
        System.out.println("bName " + bName);
        if (bName != null) {
            String startdate = request.getParameter("startdate");
            String enddate = request.getParameter("enddate");
            Date startDate = new SimpleDateFormat("dd-MM-yyyy").parse(startdate);
            Date endDate = new SimpleDateFormat("dd-MM-yyyy").parse(enddate);
            String frmDate = new SimpleDateFormat("yyyy-MM-dd").format(startDate);
            String toDate = new SimpleDateFormat("yyyy-MM-dd").format(endDate);
            System.out.println("frmDate is " + frmDate);
            System.out.println("toDate is " + toDate);
            List<Object[]> stmtInfoList = bankDao.getVerifiedStmtInfoByAmountFrmToDate(frmDate, toDate);
            //System.out.println("stmtInfoList is " + stmtInfoList);
            if (stmtInfoList != null) {
                System.out.println("In stmtInfoList != null $$$$$$ stmtInfoList size is " + stmtInfoList.size());
                ModelAndView mv1 = new ModelAndView("BankStatement/viewSelectedDatesVerifiedBankStmt");
                CorporatesDAO corpDao = new CorporatesDAO();
                List<Object[]> stmtInfo1 = new ArrayList<>();
                int index = 0;
                for (Object[] info : stmtInfoList) {
                    BigDecimal corpId = (BigDecimal) info[3];
                    String corpName = corpDao.geCorpNamebyId(corpId.intValueExact());
                    List<Corporates> corplist = corpDao.getCorporatesbyCorporateId(corpId.intValueExact());
                    String Agencycode = corplist.get(0).getPartyCode();
                    String bankSubAccNumber = corpDao.getBankSubAccNumberbyId(corpId.intValueExact());
                    System.out.println("corpName is " + corpName);
                    Date txDate = (Date) info[4];
                    String txTime = (String) info[5];
                    BigDecimal txAmt = (BigDecimal) info[6];
                    String entryDesc = (String) info[19];
                    String remarks = (String) info[17];
                    String disburseType = (String) info[22];
                    BigDecimal disburseId = (BigDecimal) info[20];
                    String disbursalId = disburseId.toString();
                    StringBuilder sb = new StringBuilder(disbursalId);
                    if (disburseType.equalsIgnoreCase("Bills")) {

                        sb.insert(0, 'B');
                    }
                    if (disburseType.equalsIgnoreCase("Refund")) {

                        sb.insert(0, 'R');
                    }
                    if (disburseType.equalsIgnoreCase("PSDF")) {

                        sb.insert(0, 'P');
                    }
                    if (disburseType.equalsIgnoreCase("Interest")) {

                        sb.insert(0, 'I');
                    }
                    if (disburseType.equalsIgnoreCase("Misc")) {

                        sb.insert(0, 'M');
                    }
                    System.out.println("##########Disburse Id is " + sb.toString());
                    System.out.println("%%%%%%%%%%%% entryDesc " + entryDesc);
                    System.out.println("disburseId is " + disburseId);
//            BigDecimal receiptNo = (BigDecimal) info[7];
                    String crDbFlag = (String) info[8];
//            String txType = (String) info[9];
                    BigDecimal openBal = (BigDecimal) info[10];

                    BigDecimal mappedBal = (BigDecimal) info[13];
                    Date entryDate = (Date) info[18];

                    System.out.println("txDate " + txDate);
                    System.out.println("txTime " + txTime);
                    System.out.println("txAmt " + txAmt);
                    //System.out.println("receiptNo "+receiptNo);
                    System.out.println("crDbFlag " + crDbFlag);
                    //System.out.println("txType "+txType);
                    System.out.println("openBal " + openBal);
                    System.out.println("disburseType " + disburseType);
//                    Object[] stmtDetail = new Object[]{corpName, txDate, txTime, entryDesc,crDbFlag, txAmt,  openBal, mainBal, entryDate};
                    Object[] stmtDetail = new Object[]{corpName, Agencycode, bankSubAccNumber, txDate, txTime, entryDesc, crDbFlag, sb.toString(), txAmt, mappedBal, disburseType, entryDate, remarks};

//stmtInfo1.add(stmtDetail);
                    stmtInfo1.add(index, stmtDetail);
                    index++;
                }
                System.out.println("stmtInfo1 is " + stmtInfo1);
                mv1.addObject("stmtInfoList", stmtInfo1);
                mv1.addObject("endDate", enddate);
                mv1.addObject("frmDate", startdate);
                return mv1;
            } else {
                ModelAndView mv1 = new ModelAndView("successMsg");
                String Msg = "No Bank Statement to View!! ";
                mv1.addObject("Msg", Msg);
                return mv1;
            }
        }
        return mv;
    }

    public ModelAndView viewCheckedBankStmtDetailsByFromDate(HttpServletRequest request,
            HttpServletResponse response) throws ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        System.out.println("Inside importExcelController");
        ModelAndView mv = new ModelAndView("BankStatement/viewCheckedBankStatementInDetail");
        BankStatementDAO bankDao = new BankStatementDAO();
        String frmDate = request.getParameter("selecteddate");
        System.out.println("frmDate is " + frmDate);
        List<Object[]> stmtInfo = bankDao.getCheckedStmtInfoByStatusFrmDate(frmDate);
        Date toDate = bankDao.getToDateForFromDate(frmDate);
        System.out.println("toDate is " + toDate);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String endDate = dateFormat.format(toDate);
        System.out.println("stmtInfo is " + stmtInfo);
        if (stmtInfo != null) {
            CorporatesDAO corpDao = new CorporatesDAO();
            List<Object[]> stmtInfo1 = new ArrayList<>();
            int index = 0;
            for (Object[] info : stmtInfo) {
                BigDecimal corpId = (BigDecimal) info[3];
                String corpName = corpDao.geCorpNamebyId(corpId.intValueExact());
                System.out.println("corpName is " + corpName);
                Date txDate = (Date) info[4];
                String txTime = (String) info[5];
                BigDecimal txAmt = (BigDecimal) info[6];
                String crDbFlag = (String) info[8];
                BigDecimal openBal = (BigDecimal) info[10];
                BigDecimal mainBal = (BigDecimal) info[11];
                BigDecimal mappedBal = (BigDecimal) info[13];
                String entryDesc = (String) info[19];
                String remarks = (String) info[17];
                Date entryDate = (Date) info[18];
                System.out.println("txDate " + txDate);
                System.out.println("txTime " + txTime);
                System.out.println("txAmt " + txAmt);
                //System.out.println("receiptNo "+receiptNo);
                System.out.println("crDbFlag " + crDbFlag);
                //System.out.println("txType "+txType);
                System.out.println("openBal " + openBal);
                System.out.println("mainBal " + mainBal);
                System.out.println("$$$$$$$$entryDesc is " + entryDesc);
                Object[] stmtDetail = new Object[]{corpName, txDate, txTime, entryDesc, crDbFlag, txAmt, mappedBal, openBal, mainBal, entryDate};
                //stmtInfo1.add(stmtDetail);
                stmtInfo1.add(index, stmtDetail);
                index++;
            }
            System.out.println("stmtInfo1 is " + stmtInfo1);
            mv.addObject("stmtInfo", stmtInfo1);
        }
        mv.addObject("endDate", endDate);
        mv.addObject("frmDate", frmDate);
        return mv;
    }

    public ModelAndView viewBankStmtDetailsOnUpload(HttpServletRequest request,
            HttpServletResponse response) throws ParseException {
        HttpSession session = request.getSession(false);
        if (session == null) {
            RedirectView redirectView = new RedirectView();
            redirectView.setContextRelative(true);
            redirectView.setUrl("/logout.htm");
            return new ModelAndView(redirectView);
        }
        System.out.println("Inside importExcelController");
        ModelAndView mv = new ModelAndView("BankStatement/viewBankStatementInDetail");
        BankStatementDAO bankDao = new BankStatementDAO();
        String verify = request.getParameter("bconfirm");

        String delete = request.getParameter("bcancel");
        if (verify != null) {
            List<Date> stmtInfoList = bankDao.getListFromDatebyStmtListmaker();
            System.out.println("stmtInfoList is " + stmtInfoList);
            System.out.println("@@@ In delete condition");
            DateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy");
            String frmDate = dateFormat1.format(stmtInfoList.get(0));
            System.out.println("frmDate is " + frmDate);
            Date fromDate = new SimpleDateFormat("dd-MM-yyyy").parse(frmDate);
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String strDate = dateFormat.format(fromDate);
            System.out.println("strDate is " + strDate);
            bankDao.updateBankStmtbyMakerFromDate(strDate);
            ModelAndView mv1 = new ModelAndView("successMsg");
            String Msg = "Bank Statement saved successfully!! ";
            mv1.addObject("Msg", Msg);
            return mv1;
        }
        if (delete != null) {

//        List<BankStatement> stmtInfoList = bankDao.getStmtListByStmtStatus();
            List<Date> stmtInfoList = bankDao.getListFromDatebyStmtListmaker();
            System.out.println("stmtInfoList is " + stmtInfoList);
            System.out.println("@@@ In delete condition");
            DateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy");
            String frmDate = dateFormat1.format(stmtInfoList.get(0));
            System.out.println("frmDate is " + frmDate);
            Date fromDate = new SimpleDateFormat("dd-MM-yyyy").parse(frmDate);
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String strDate = dateFormat.format(fromDate);
            System.out.println("strDate is " + strDate);
            int result = bankDao.deleteBankStatementbyChecker();
            //int result = bankDao.deleteBankStatementbyCheckerFromDate(strDate);
            System.out.println("result is " + result);
            if (result == 0) {
                ModelAndView mv1 = new ModelAndView("successMsg");
                String Msg = "Not Discarded Bank Statement whose From Date is " + frmDate + " !! ";
                mv1.addObject("Msg", Msg);
                return mv1;
            } else {
                ModelAndView mv1 = new ModelAndView("successMsg");
                String Msg = "Discarded Bank Statement whose From Date  is " + frmDate + " !! ";
                mv1.addObject("Msg", Msg);
                return mv1;
            }
        }
        String[] nonverifiedrow1 = request.getParameterValues("nonverifiedrow");
        if (nonverifiedrow1 != null) {
            for (String nonvr : nonverifiedrow1) {
                System.out.println("nonvr is " + nonvr);
            }
        }
        SimpleDateFormat dateFormatYouWant = new SimpleDateFormat("yyyy-MM-dd");
        String fomdate = request.getParameter("startdate");
        System.out.println("frmDate is " + fomdate);
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Date d2 = sdf.parse(fomdate);
        System.out.println("Date formated frmDate is " + d2.toString());
        String frmDate = dateFormatYouWant.format(d2);
        System.out.println("formated frmDate is " + frmDate);
        String txFrmDate = sdf.format(d2);
        Date toDate = bankDao.getToDateForFromDate(frmDate);
        System.out.println("toDate is " + toDate);
        String txEndDate = sdf.format(toDate);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        List<Object[]> stmtInfo = bankDao.getStmtInfoByStatusFrmDatemaker(frmDate);

//        List<Object[]> stmtInfo = bankDao.getStmtInfoByStatusFrmDate(frmDate);
        System.out.println("stmtInfo is " + stmtInfo);
        if (stmtInfo != null) {
            CorporatesDAO corpDao = new CorporatesDAO();
            List<Object[]> stmtInfo1 = new ArrayList<>();
            int index = 0;
            for (Object[] info : stmtInfo) {
                BigDecimal corpId = (BigDecimal) info[3];
                String corpName = corpDao.geCorpNamebyId(corpId.intValueExact());
                String bankSubAccNumber = corpDao.getBankSubAccNumberbyId(corpId.intValueExact());
                System.out.println("corpName is " + corpName);
                Date txDate = (Date) info[4];
                String txTime = (String) info[5];
                BigDecimal txAmt = (BigDecimal) info[6];
                String crDbFlag = (String) info[8];
                BigDecimal openBal = (BigDecimal) info[10];
                String disburseType = (String) info[22];
                String entryDesc = (String) info[19];
                String remarks = (String) info[17];
                Date entryDate = (Date) info[18];
                BigDecimal disburseId = (BigDecimal) info[20];
                String disbursalId = disburseId.toString();
                StringBuilder sb = new StringBuilder(disbursalId);
                if (disburseType.equalsIgnoreCase("Bills")) {

                    sb.insert(0, 'B');
                }
                if (disburseType.equalsIgnoreCase("Refund")) {

                    sb.insert(0, 'R');
                }
                if (disburseType.equalsIgnoreCase("PSDF")) {

                    sb.insert(0, 'P');
                }
                if (disburseType.equalsIgnoreCase("Interest")) {

                    sb.insert(0, 'I');
                }
                System.out.println("##########Disburse Id is " + sb.toString());

                Object[] stmtDetail = new Object[]{corpName, bankSubAccNumber, txDate, txTime, entryDesc, crDbFlag, sb.toString(), txAmt, disburseType, entryDate, remarks};

                stmtInfo1.add(index, stmtDetail);
                index++;
            }
            System.out.println("stmtInfo1 is " + stmtInfo1);
            mv.addObject("stmtInfo", stmtInfo1);
        }
        mv.addObject("nonverifiedrow1", nonverifiedrow1);
        mv.addObject("endDate", txEndDate);
        mv.addObject("frmDate", txFrmDate);
        return mv;
    }

    public static Timestamp addMilliseconds(Timestamp timestamp, int milliseconds) {
        return add(timestamp, Calendar.MILLISECOND, milliseconds);
    }

    private static Timestamp add(Timestamp timestamp, int unit, int amount) {
        Calendar c = Calendar.getInstance();
        c.setTime(timestamp);
        c.add(unit, amount);
        Timestamp ts = new Timestamp(c.getTimeInMillis());
        ts.setNanos(ts.getNanos() + timestamp.getNanos() % 1000000);
        return ts;
    }

    public static int getNanos(Timestamp timestamp) {
        return timestamp.getNanos();
    }
}
